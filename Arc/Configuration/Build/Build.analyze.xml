<?xml version="1.0" encoding="utf-8"?>
<project name="Analyze" default="Analyze">

  <!-- Load external tasks -->
  <loadtasks assembly="${path.ncoverexplorer.tasks}" />
  <loadtasks assembly="${path.ndepend.tasks}" />

  <!-- Poperties -->
  <property name="tests.all.project.name" value="AllTests" />
  <property name="codecoverage.log.name" value="CodeCoverageResult" />
  <property name="codecoverage.output.name" value="CodeCoverageResult" />
  <property name="codecoverage.full.output.name" value="CodeCoverageFullResult" />
  
  <property name="codequality.project.name" value="Solution" />
  <property name="codequality.output.name" value="CodeQualityFullReport" />
  
  <property name="codeduplication.output.name" value="CodeDuplicationFullReport" />
  
  <property name="codemetrics.project.name" value="Solution.NDepend" />
  
  <!-- Main target -->
  <target name="Analyze" 
          description="Analyzes project" 
          depends="AnalyzeCodeCoverage,AnalyzeCodeQuality,AnalyzeCodeDuplication" />

  <!-- Targets -->
  <target name="AnalyzeCodeCoverage" description="Code coverage for solution">

	  <nunitproject project="${build.tests.path}\${tests.all.project.name}.nunit">
      <fileset basedir="${build.tests.path}">
        <include name="*.Unit.Tests.dll" />
		    <include name="*.Integration.Tests.dll" />
      </fileset>
    </nunitproject>
	
    <exec program="${path.ncover.console}">
      <arg path="${path.nunit.console}" />
      <arg path="${build.tests.path}\${tests.all.project.name}.nunit" />
      <arg value="//l" />
      <arg path="${build.results.path}\${codecoverage.log.name}.log" />
      <arg value="//x" />
      <arg path="${build.results.path}\${codecoverage.output.name}.xml" />
    </exec>

    <ncoverexplorer 
      projectName="${project.name}"
      program="${path.ncoverexplorer.console}"
      xmlReportName="${build.results.path}\${codecoverage.full.output.name}.xml"
      satisfactoryCoverage="80"
      reportType="5">
      
      <fileset>
        <include name="${build.results.path}\${codecoverage.output.name}.xml" />
      </fileset>
      <exclusions>
        <exclusion type="Assembly" pattern="*.Tests.*" />
		<exclusion type="Assembly" pattern="*.Tests" />
      </exclusions>
      
    </ncoverexplorer>

  </target>
  
  <target name="AnalyzeCodeQuality" description="Analyzes code quality">
    
    <fxcop
      verbose="${verbose}"
      directOutputToConsole="false"
      projectFile="${project.config.build.path}\${codequality.project.name}.FxCop"
      analysisReportFilename="${build.results.path}\${codequality.output.name}.xml" 
      basedir="${build.binary.path}">
      
      <targets>
        <include name="${build.binary.path}\${project.name}*.dll" />
      </targets>
      
    </fxcop>
    
  </target>

  <target name="AnalyzeCodeDuplication" description="Finds duplicated code">
    
    <exec program="${path.simian.console}">
      <arg value="-includes=${project.source.path}/**/*.cs" />
      <arg value="-excludes=${project.root.path}/**/*Test.cs" />
      <arg value="-excludes=${project.root.path}/**/CVS/**/*.cs" />
      <arg value="-excludes=${project.root.path}/**/AssemblyInfo.cs" />
      <arg value="-excludes=${project.root.path}/**/*.Designer.cs" />
      <arg value="-formatter=xml:${build.results.path}\${codeduplication.output.name}.xml" />
      <arg value="-failOnDuplication-" />
    </exec>
    
    <copy file="${path.simian}\simian.xsl" todir="${build.results.path}" />
    
  </target>

  <target name="AnalyzeCodeMetrics" description="Analyzes code">
    
    <exec program="${path.ndepend.console}">
      <arg path="${project.config.build.path}\${codemetrics.project.name}.xml" />
      <arg value="/InDirs" />
	    <arg path="${build.binary.path}" />
	    <arg path="${path.net.2.0}" />
	    <arg path="${path.net.3.0}" />
	    <arg path="${path.net.3.5}" />
	    <arg value="/OutDir" />
      <arg path="${build.results.path}" />
    </exec>

    <copy file="${build.results.path}\AbstractnessVSInstability.png" tofile="${path.artifacts}/images/AbstractnessVSInstability.${project.label}.png" />
    <copy file="${build.results.path}\ComponentDependenciesDiagram.png" tofile="${path.artifacts}/images/ComponentDependenciesDiagram.${project.label}.png" />
    
  </target>
  
</project>