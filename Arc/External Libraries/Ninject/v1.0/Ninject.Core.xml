<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ninject.Core</name>
    </assembly>
    <members>
        <member name="T:Ninject.Core.Activation.IContext">
            <summary>
            The context in which an activation process occurs.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.IDebugInfoProvider">
            <summary>
            An object that can have related debugging information.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.IDebugInfoProvider.DebugInfo">
            <summary>
            Gets or sets the debugging information for the object.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.IDebugInfoProvider.HasDebugInfo">
            <summary>
            Gets a value indicating whether the object has debugging information.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.IContext.Kernel">
            <summary>
            Gets or sets the kernel that is processing the activation request.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.IContext.ParentContext">
            <summary>
            Gets or sets the parent context of this context. If this is a root context, this value
            is <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.IContext.Service">
            <summary>
            Gets or sets the type of service that is being activated.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.IContext.Level">
            <summary>
            Gets or sets the numeric nesting level for the context.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.IContext.Binding">
            <summary>
            Gets or sets the binding being used to activate items within the context.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.IContext.Plan">
            <summary>
            Gets or sets the activation plan that is being used to activate the service.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.IContext.GenericArguments">
            <summary>
            Gets the generic type arguments associated with the service, if applicable.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.IContext.Parameters">
            <summary>
            Gets or sets the transient parameters for the context, if any are defined.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.IContext.Instance">
            <summary>
            Gets or sets the instance that is being injected, if it has been created, and not
            garbage collected.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.IContext.Member">
            <summary>
            Gets or sets the member that is being injected.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.IContext.Target">
            <summary>
            Gets or sets the injection target.
            </summary>
            <remarks>
            In the case of method and constructor injection, this will represent the current
            parameter that is being resolved. In the case of field and property injection, it will
            be the member.
            </remarks>
        </member>
        <member name="P:Ninject.Core.Activation.IContext.IsRoot">
            <summary>
            Gets a value indicating whether this is a root context (that is, it originated from an
            active request from client code and not passively via dependency resolution).
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.IContext.IsOptional">
            <summary>
            Gets or sets a value indicating whether the dependency resolution occuring in this
            context is optional.
            </summary>
            <remarks>
            If an optional request is made for a service, and an automatic binding cannot be
            created (if the requested service is not self-bindable, or automatic bindings are disabled),
            the kernel will simply inject a <see langword="null"/> value rather than throwing an
            <see cref="T:Ninject.Core.ActivationException"/>.
            </remarks>
        </member>
        <member name="T:Ninject.Core.Activation.IContextFactory">
            <summary>
            Creates <see cref="T:Ninject.Core.Activation.IContext"/>s that contain information about an activation process.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.IKernelComponent">
            <summary>
            An object that contributes functionality to a <see cref="T:Ninject.Core.IKernel"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IKernelComponent.Connect(Ninject.Core.IKernel)">
            <summary>
            Connects the component to its environment.
            </summary>
            <param name="kernel">The kernel to associate the component with.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IKernelComponent.Disconnect">
            <summary>
            Disconnects the component from its environment.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IKernelComponent.Validate">
            <summary>
            Validates the component and throws an exception if it is not configured properly.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.IKernelComponent.Kernel">
            <summary>
            Gets the kernel associated with the component.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.IKernelComponent.IsConnected">
            <summary>
            Gets a value indicating whether the component is connected to its environment.
            </summary>
        </member>
        <member name="E:Ninject.Core.Infrastructure.IKernelComponent.Connected">
            <summary>
            Indicates that the component has been connected to its environment.
            </summary>
        </member>
        <member name="E:Ninject.Core.Infrastructure.IKernelComponent.Disconnected">
            <summary>
            Indicates that the component has been disconnected from its environment.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.IContextFactory.Create(System.Type)">
            <summary>
            Creates a new root context.
            </summary>
            <param name="service">The type that was requested.</param>
            <returns>The root context.</returns>
        </member>
        <member name="M:Ninject.Core.Activation.IContextFactory.CreateChild(Ninject.Core.Activation.IContext,System.Object,System.Reflection.MemberInfo,Ninject.Core.Planning.Targets.ITarget,System.Boolean)">
            <summary>
            Creates a child context using the specified context as its parent.
            </summary>
            <param name="parent">The parent context.</param>
            <param name="instance">The instance receiving the injection.</param>
            <param name="member">The member that the child context will be injecting.</param>
            <param name="target">The target that is being injected.</param>
            <param name="optional"><see langword="True"/> if the child context's resolution is optional, otherwise, <see langword="false"/>.</param>
            <returns>The child context.</returns>
        </member>
        <member name="T:Ninject.Core.Activation.StandardContext">
            <summary>
            The baseline definition of a context. To create a custom context, extend this type.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.DebugInfoProvider">
            <summary>
            The baseline definition of an object that can have related debugging information.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.DisposableObject">
            <summary>
            An abstract object that is disposable. Used for proper implementation of the Disposal pattern.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.IDisposableEx">
            <summary>
            A disposable object.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.IDisposableEx.IsDisposed">
            <summary>
            Gets a value indicating whether the object has been disposed.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DisposableObject.Dispose">
            <summary>
            Releases all resources currently held by the object.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DisposableObject.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            object is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DisposableObject.DisposeMember(System.Object)">
            <summary>
            Disposes the specified member if it implements <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="member">The member to dispose.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DisposableObject.DisposeCollection(System.Collections.IEnumerable)">
            <summary>
            Disposes the collection and all of its contents, if they implement <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="collection">The collection to dispose.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DisposableObject.DisposeDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Disposes the dictionary and all of its contents, if they implement <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="dictionary">The dictionary to dispose.</param>
        </member>
        <member name="P:Ninject.Core.Infrastructure.DisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether the object has been disposed.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DebugInfoProvider.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="P:Ninject.Core.Infrastructure.DebugInfoProvider.DebugInfo">
            <summary>
            Gets or sets debugging information for the object.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.DebugInfoProvider.HasDebugInfo">
            <summary>
            Gets a value indicating whether the object has debugging information.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.StandardContext.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Activation.StandardContext.#ctor(Ninject.Core.IKernel,System.Type)">
            <summary>
            Creates a new root context.
            </summary>
            <param name="kernel">The kernel that is processing the activation request.</param>
            <param name="service">The service being activated.</param>
        </member>
        <member name="M:Ninject.Core.Activation.StandardContext.#ctor(Ninject.Core.Activation.IContext,System.Type)">
            <summary>
            Creates a new child context.
            </summary>
            <param name="parentContext">The parent context containing the new child context.</param>
            <param name="service">The service that will be activated in the new child context.</param>
        </member>
        <member name="P:Ninject.Core.Activation.StandardContext.Kernel">
            <summary>
            Gets or sets the kernel that is processing the activation request.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.StandardContext.ParentContext">
            <summary>
            Gets or sets the parent context of this context. If this is a root context, this value
            is <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.StandardContext.Level">
            <summary>
            Gets or sets the numeric nesting level for the context.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.StandardContext.Service">
            <summary>
            Gets or sets the type of service that is being activated.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.StandardContext.Binding">
            <summary>
            Gets or sets the binding being used to activate items within the context.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.StandardContext.Plan">
            <summary>
            Gets or sets the plan.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.StandardContext.GenericArguments">
            <summary>
            Gets the generic type arguments associated with the service, if applicable.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.StandardContext.Parameters">
            <summary>
            Gets or sets the transient parameters for the context, if any are defined.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.StandardContext.Instance">
            <summary>
            Gets or sets the instance that is being injected, if it has been created.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.StandardContext.Member">
            <summary>
            Gets or sets the member that is being injected.
            </summary>
        </member>
        <member name="P:Ninject.Core.Activation.StandardContext.Target">
            <summary>
            Gets or sets the target that is being injected.
            </summary>
            <remarks>
            In the case of method and constructor injection, this will represent the current
            parameter that is being resolved. In the case of field and property injection, it will
            be the member.
            </remarks>
        </member>
        <member name="P:Ninject.Core.Activation.StandardContext.IsOptional">
            <summary>
            Gets or sets a value indicating whether the dependency resolution occuring in this
            context is optional.
            </summary>
            <remarks>
            If an optional request is made for a service, and an automatic binding cannot be
            created (if the requested service is not self-bindable, or automatic bindings are disabled),
            the kernel will simply inject a <see langword="null"/> value rather than throwing an
            <see cref="T:Ninject.Core.ActivationException"/>.
            </remarks>
        </member>
        <member name="P:Ninject.Core.Activation.StandardContext.IsRoot">
            <summary>
            Gets a value indicating whether this is a root context (that is, it originated from an
            active request from client code and not passively via dependency resolution).
            </summary>
        </member>
        <member name="T:Ninject.Core.Activation.StandardContextFactory">
            <summary>
            The default implementation of a <see cref="T:Ninject.Core.Activation.IContextFactory"/>.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.KernelComponentBase">
            <summary>
            An object that contributes functionality to a <see cref="T:Ninject.Core.IKernel"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.KernelComponentBase.OnConnected(System.EventArgs)">
            <summary>
            Called when the component is connected to its environment.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.KernelComponentBase.OnDisconnected(System.EventArgs)">
            <summary>
            Called when the component is disconnected from its environment.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.KernelComponentBase.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.KernelComponentBase.Connect(Ninject.Core.IKernel)">
            <summary>
            Connects the component to its environment.
            </summary>
            <param name="kernel">The kernel to associate the component with.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.KernelComponentBase.Disconnect">
            <summary>
            Disconnects the component from its environment.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.KernelComponentBase.Validate">
            <summary>
            Validates the component and throws an exception if it is not configured properly.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.KernelComponentBase.Kernel">
            <summary>
            Gets the kernel associated with the component.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.KernelComponentBase.Logger">
            <summary>
            Gets the logger associated with the component.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.KernelComponentBase.IsConnected">
            <summary>
            Gets a value indicating whether the component is connected to its environment.
            </summary>
        </member>
        <member name="E:Ninject.Core.Infrastructure.KernelComponentBase.Connected">
            <summary>
            Indicates that the component has been connected to its environment.
            </summary>
        </member>
        <member name="E:Ninject.Core.Infrastructure.KernelComponentBase.Disconnected">
            <summary>
            Indicates that the component has been disconnected from its environment.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.StandardContextFactory.Create(System.Type)">
            <summary>
            Creates a new root context.
            </summary>
            <param name="service">The type that was requested.</param>
            <returns>The root context.</returns>
        </member>
        <member name="M:Ninject.Core.Activation.StandardContextFactory.CreateChild(Ninject.Core.Activation.IContext,System.Object,System.Reflection.MemberInfo,Ninject.Core.Planning.Targets.ITarget,System.Boolean)">
            <summary>
            Creates a child context using the specified context as its parent.
            </summary>
            <param name="parent">The parent context.</param>
            <param name="instance">The instance receiving the injection.</param>
            <param name="member">The member that the child context will be injecting.</param>
            <param name="target">The target that is being injected.</param>
            <param name="optional"><see langword="True"/> if the child context's resolution is optional, otherwise, <see langword="false"/>.</param>
            <returns>The child context.</returns>
        </member>
        <member name="T:Ninject.Core.Parameters.ConstructorArgumentParameter">
            <summary>
            A transient parameter that will override the injection for a constructor argument during activation.
            </summary>
        </member>
        <member name="T:Ninject.Core.Parameters.IParameter">
            <summary>
            A transient parameter used during activation.
            </summary>
        </member>
        <member name="P:Ninject.Core.Parameters.IParameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="M:Ninject.Core.Parameters.ConstructorArgumentParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Parameters.ConstructorArgumentParameter"/> class.
            </summary>
            <param name="name">The name of the argument to override.</param>
            <param name="value">The value of the argument.</param>
        </member>
        <member name="P:Ninject.Core.Parameters.ConstructorArgumentParameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Ninject.Core.Parameters.ConstructorArgumentParameter.Value">
            <summary>
            Gets the value to inject into the constructor argument.
            </summary>
        </member>
        <member name="T:Ninject.Core.Parameters.ContextVariableParameter">
            <summary>
            A transient parameter that will declare a variable that can be read by the context.
            </summary>
        </member>
        <member name="M:Ninject.Core.Parameters.ContextVariableParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Parameters.ContextVariableParameter"/> class.
            </summary>
            <param name="name">The name of the variable to define.</param>
            <param name="value">The value to assign to the variable.</param>
        </member>
        <member name="P:Ninject.Core.Parameters.ContextVariableParameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Ninject.Core.Parameters.ContextVariableParameter.Value">
            <summary>
            Gets the value of the context variable.
            </summary>
        </member>
        <member name="T:Ninject.Core.Parameters.PropertyValueParameter">
            <summary>
            A transient parameter that will override the injection for a property during activation.
            </summary>
        </member>
        <member name="M:Ninject.Core.Parameters.PropertyValueParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Parameters.PropertyValueParameter"/> class.
            </summary>
            <param name="name">The name of the property whose injection will be overridden.</param>
            <param name="value">The value to inject.</param>
        </member>
        <member name="P:Ninject.Core.Parameters.PropertyValueParameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:Ninject.Core.Parameters.PropertyValueParameter.Value">
            <summary>
            Gets the value to inject into the property.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Ninject.Core.Parameters.IParameterCollection">
            <summary>
            A collection of transient parameters used during injection.
            </summary>
        </member>
        <member name="M:Ninject.Core.Parameters.IParameterCollection.Add``1(``0)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <typeparam name="T">The type to organize the item under.</typeparam>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Ninject.Core.Parameters.IParameterCollection.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified items to the collection.
            </summary>
            <typeparam name="T">The type to organize the items under.</typeparam>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:Ninject.Core.Parameters.IParameterCollection.Has``1(System.String)">
            <summary>
            Gets a value indicating whether an item with the specified key has been organized under
            the specified type.
            </summary>
            <typeparam name="T">The type the item is organized under.</typeparam>
            <param name="key">The item's key.</param>
            <returns><see langword="True"/> if the item has been defined, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Parameters.IParameterCollection.HasOneOrMore``1">
            <summary>
            Gets a value indicating whether one or more items organized under the specified type.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <returns><see langword="True"/> if there are such items, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Parameters.IParameterCollection.GetOne``1">
            <summary>
            Gets the first item in the collection that is organized under the specified type.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <returns>The item, or <see langword="null"/> if none has been defined.</returns>
        </member>
        <member name="M:Ninject.Core.Parameters.IParameterCollection.GetOne``1(System.String)">
            <summary>
            Gets the item with the specified key, organized under the specified type, if one has been defined.
            </summary>
            <typeparam name="T">The type the item is organized under.</typeparam>
            <param name="key">The item's key.</param>
            <returns>The item, or <see langword="null"/> if none has been defined.</returns>
        </member>
        <member name="M:Ninject.Core.Parameters.IParameterCollection.GetAll``1">
            <summary>
            Gets all items organized under the specified type.
            </summary>
            <typeparam name="T">The type the items are organized under.</typeparam>
            <returns>A collection of items organized under the specified type.</returns>
        </member>
        <member name="T:Ninject.Core.Parameters.ParameterCollection">
            <summary>
            A collection that organizes parameters by type.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.TypedCollection`2">
            <summary>
            A collection that organizes items by type.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.TypedCollection`2.Add``1(``0)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <typeparam name="T">The type to organize the item under.</typeparam>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.TypedCollection`2.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified items to the collection.
            </summary>
            <typeparam name="T">The type to organize the items under.</typeparam>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.TypedCollection`2.Has``1(`0)">
            <summary>
            Gets a value indicating whether an item with the specified key has been organized under
            the specified type.
            </summary>
            <typeparam name="T">The type the item is organized under.</typeparam>
            <param name="key">The item's key.</param>
            <returns><see langword="True"/> if the item has been defined, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.TypedCollection`2.HasOneOrMore``1">
            <summary>
            Gets a value indicating whether one or more items organized under the specified type.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <returns><see langword="True"/> if there are such items, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.TypedCollection`2.GetOne``1">
            <summary>
            Gets the first item in the collection that is organized under the specified type.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <returns>The item, or <see langword="null"/> if none has been defined.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.TypedCollection`2.GetOne``1(`0)">
            <summary>
            Gets the item with the specified key, organized under the specified type, if one has been defined.
            </summary>
            <typeparam name="T">The type the item is organized under.</typeparam>
            <param name="key">The item's key.</param>
            <returns>The item, or <see langword="null"/> if none has been defined.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.TypedCollection`2.GetAll``1">
            <summary>
            Gets all items organized under the specified type.
            </summary>
            <typeparam name="T">The type the items are organized under.</typeparam>
            <returns>A collection of items organized under the specified type.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.TypedCollection`2.GetKeyForItem(`1)">
            <summary>
            Gets the key for the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The key for the item.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.TypedCollection`2.OnKeyCollision(System.Type,`0,`1,`1)">
            <summary>
            Called when an item is added to the collection when an item with the same key already
            exists in the collection, organized under the same type.
            </summary>
            <param name="type">The type the items are organized under.</param>
            <param name="key">The key the items share.</param>
            <param name="newItem">The new item that was added.</param>
            <param name="existingItem">The item that already existed in the collection.</param>
        </member>
        <member name="M:Ninject.Core.Parameters.ParameterCollection.GetKeyForItem(Ninject.Core.Parameters.IParameter)">
            <summary>
            Gets the key for the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The key for the item.</returns>
        </member>
        <member name="M:Ninject.Core.Parameters.ParameterCollection.OnKeyCollision(System.Type,System.String,Ninject.Core.Parameters.IParameter,Ninject.Core.Parameters.IParameter)">
            <summary>
            Called when an item is added to the collection when an item with the same key already
            exists in the collection, organized under the same type.
            </summary>
            <param name="type">The type the items are organized under.</param>
            <param name="key">The key the items share.</param>
            <param name="newItem">The new item that was added.</param>
            <param name="existingItem">The item that already existed in the collection.</param>
        </member>
        <member name="T:Ninject.Core.Parameters.ParameterCollectionBuilder">
            <summary>
            An adapter for a parameter collection that provides a fluent interface.
            </summary>
        </member>
        <member name="M:Ninject.Core.Parameters.ParameterCollectionBuilder.ConstructorArgument(System.String,System.Object)">
            <summary>
            Adds a transient value for the constructor argument with the specified name.
            </summary>
            <param name="name">The name of the argument.</param>
            <param name="value">The value to inject.</param>
        </member>
        <member name="M:Ninject.Core.Parameters.ParameterCollectionBuilder.ConstructorArguments(System.Collections.IDictionary)">
            <summary>
            Adds transient values for the arguments defined in the dictionary.
            </summary>
            <param name="arguments">A dictionary of argument names and values to define.</param>
        </member>
        <member name="M:Ninject.Core.Parameters.ParameterCollectionBuilder.ConstructorArguments(System.Object)">
            <summary>
            Adds transient values for constructor arguments matching the properties defined on the object.
            </summary>
            <param name="arguments">An object containing the values to define as arguments.</param>
        </member>
        <member name="M:Ninject.Core.Parameters.ParameterCollectionBuilder.PropertyValue(System.String,System.Object)">
            <summary>
            Adds a transient value for the property with the specified name.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value to inject.</param>
        </member>
        <member name="M:Ninject.Core.Parameters.ParameterCollectionBuilder.PropertyValues(System.Collections.IDictionary)">
            <summary>
            Adds transient values for the properties defined in the dictionary.
            </summary>
            <param name="values">A dictionary of property names and values to define.</param>
        </member>
        <member name="M:Ninject.Core.Parameters.ParameterCollectionBuilder.PropertyValues(System.Object)">
            <summary>
            Adds transient values for properties matching those defined on the object.
            </summary>
            <param name="values">An object containing the values to define as arguments.</param>
        </member>
        <member name="M:Ninject.Core.Parameters.ParameterCollectionBuilder.ContextVariable(System.String,System.Object)">
            <summary>
            Adds a variable to the context.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The value for the variable.</param>
        </member>
        <member name="M:Ninject.Core.Parameters.ParameterCollectionBuilder.ContextVariables(System.Collections.IDictionary)">
            <summary>
            Adds context variables for the properties defined in the dictionary.
            </summary>
            <param name="values">A dictionary of context variables and their associated values.</param>
        </member>
        <member name="M:Ninject.Core.Parameters.ParameterCollectionBuilder.ContextVariables(System.Object)">
            <summary>
            Adds context variables for the properties defined on the object.
            </summary>
            <param name="values">An object containing the values to define as context variables.</param>
        </member>
        <member name="M:Ninject.Core.Parameters.ParameterCollectionBuilder.Custom``1(``0)">
            <summary>
            Adds the specified custom parameter to the collection.
            </summary>
            <param name="parameter">The parameter to add.</param>
        </member>
        <member name="M:Ninject.Core.Parameters.ParameterCollectionBuilder.Custom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified custom parameters to the collection.
            </summary>
            <param name="parameters">The parameters to add.</param>
        </member>
        <member name="T:Ninject.Core.Parameters.With">
            <summary>
            A container for the transient parameter fluent interface.
            </summary>
        </member>
        <member name="P:Ninject.Core.Parameters.With.Parameters">
            <summary>
            Declares a new collection of parameters.
            </summary>
        </member>
        <member name="T:Ninject.Core.Activation.Strategies.ActivationStrategyBase">
            <summary>
            A baseline definition of an activation strategy.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.StrategyBase`1">
            <summary>
            A baseline definition of a strategy. This type may be extended to create
            custom strategy types.
            </summary>
            <typeparam name="TOwner">The type of object that owns the strategy.</typeparam>
        </member>
        <member name="T:Ninject.Core.Infrastructure.IStrategy`1">
            <summary>
            An object that implements a subset of a process.
            </summary>
            <typeparam name="TOwner">The type of object that owns the strategy.</typeparam>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IStrategy`1.Connect(Ninject.Core.IKernel,`0)">
            <summary>
            Connects the strategy to its environment.
            </summary>
            <param name="kernel">The kernel to associate the strategy with.</param>
            <param name="owner">The owner of the strategy.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IStrategy`1.Disconnect">
            <summary>
            Disconnects the strategy from its environment.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.IStrategy`1.Kernel">
            <summary>
            Gets the kernel associated with the strategy.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.IStrategy`1.Owner">
            <summary>
            Gets the owner of the strategy.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.IStrategy`1.IsConnected">
            <summary>
            Gets a value indicating whether the strategy has been connected to its environment.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.IStrategy`1.IsDisposed">
            <summary>
            Gets a value indicating whether the strategy has been disposed.
            </summary>
        </member>
        <member name="E:Ninject.Core.Infrastructure.IStrategy`1.Connected">
            <summary>
            Indicates that the strategy has been connected to its environment.
            </summary>
        </member>
        <member name="E:Ninject.Core.Infrastructure.IStrategy`1.Disconnected">
            <summary>
            Indicates that the strategy has been disconnected from its environment.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyBase`1.OnConnected(System.EventArgs)">
            <summary>
            Called when the strategy is connected to its environment.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyBase`1.OnDisconnected(System.EventArgs)">
            <summary>
            Called when the strategy is disconnected from its environment.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyBase`1.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyBase`1.Connect(Ninject.Core.IKernel,`0)">
            <summary>
            Connects the strategy to its environment.
            </summary>
            <param name="kernel">The kernel to associate the strategy with.</param>
            <param name="owner">The owner of the strategy.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyBase`1.Disconnect">
            <summary>
            Disconnects the strategy from its environment.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.StrategyBase`1.Kernel">
            <summary>
            Gets the kernel associated with the strategy.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.StrategyBase`1.Owner">
            <summary>
            Gets the owner of the strategy.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.StrategyBase`1.Logger">
            <summary>
            Gets the logger associated with the strategy.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.StrategyBase`1.IsConnected">
            <summary>
            Gets a value indicating whether the strategy has been connected to its environment.
            </summary>
        </member>
        <member name="E:Ninject.Core.Infrastructure.StrategyBase`1.Connected">
            <summary>
            Indicates that the strategy has been connected to its environment.
            </summary>
        </member>
        <member name="E:Ninject.Core.Infrastructure.StrategyBase`1.Disconnected">
            <summary>
            Indicates that the strategy has been disconnected from its environment.
            </summary>
        </member>
        <member name="T:Ninject.Core.Activation.Strategies.IActivationStrategy">
            <summary>
            A strategy that contributes to the activation of an instance.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.IActivationStrategy.BeforeCreate(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed before the instance is created.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.IActivationStrategy.AfterCreate(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed after the instance is created, but before it is initialized.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.IActivationStrategy.Initialize(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed when the instance is being initialized.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.IActivationStrategy.AfterInitialize(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed after the instance is initialized.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.IActivationStrategy.BeforeDestroy(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed before the instance is destroyed.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.IActivationStrategy.Destroy(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed when the instance is being destroyed.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.IActivationStrategy.AfterDestroy(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed after the instance is destroyed.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.ActivationStrategyBase.BeforeCreate(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed before the instance is created.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.ActivationStrategyBase.AfterCreate(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed after the instance is created, but before it is initialized.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.ActivationStrategyBase.Create(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed to create the instance.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.ActivationStrategyBase.Initialize(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed when the instance is being initialized.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.ActivationStrategyBase.AfterInitialize(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed after the instance is initialized.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.ActivationStrategyBase.BeforeDestroy(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed before the instance is destroyed.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.ActivationStrategyBase.Destroy(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed when the instance is being destroyed.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.ActivationStrategyBase.AfterDestroy(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed after the instance is destroyed.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="T:Ninject.Core.Activation.Strategies.ContextAwareStrategy">
            <summary>
            An activation strategy that initializes objects which implement <see cref="T:Ninject.Core.IContextAware"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.ContextAwareStrategy.AfterInitialize(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed after the instance is initialized.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="T:Ninject.Core.Activation.Strategies.DisposableStrategy">
            <summary>
            An activation strategy that disposes objects which implements <see cref="T:System.IDisposable"/>
            after they are destroyed.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.DisposableStrategy.AfterDestroy(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed after the instance is destroyed.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="T:Ninject.Core.Activation.Strategies.FieldInjectionStrategy">
            <summary>
            An activation strategy that resolves and injects values into fields on the instance.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.FieldInjectionStrategy.Initialize(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed when the instance is being initialized.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="T:Ninject.Core.Activation.Strategies.InitializableStrategy">
            <summary>
            An activation strategy that initializes objects which implement <see cref="T:Ninject.Core.IInitializable"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.InitializableStrategy.AfterInitialize(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed after the instance is initialized.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="T:Ninject.Core.Activation.Strategies.MethodInjectionStrategy">
            <summary>
            An activation strategy that resolves and injects values into methods on the instance.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.MethodInjectionStrategy.Initialize(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed when the instance is being initialized.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="T:Ninject.Core.Activation.Strategies.PropertyInjectionStrategy">
            <summary>
            An activation strategy that resolves and injects values into properties on the instance.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.PropertyInjectionStrategy.Initialize(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed when the instance is being initialized.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="T:Ninject.Core.Activation.Strategies.ProxyStrategy">
            <summary>
            An activation strategy that resolves and injects values into methods on the instance.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.ProxyStrategy.AfterInitialize(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed after the instance is initialized.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.ProxyStrategy.BeforeDestroy(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed before the instance is destroyed.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.ProxyStrategy.ShouldProxy(Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Returns a value indicating whether the specified instance should be proxied.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns><see langword="True"/> if the instance should be proxied, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Ninject.Core.Activation.Strategies.StartableStrategy">
            <summary>
            An activation strategy that calls <c>Start</c> and <c>Stop</c> on instances that implement
            <see cref="T:Ninject.Core.IStartable"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.StartableStrategy.AfterInitialize(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed after the instance is initialized.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Activation.Strategies.StartableStrategy.BeforeDestroy(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Executed before the instance is destroyed.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="instance">The instance being activated.</param>
            <returns>
            A value indicating whether to proceed or stop the execution of the strategy chain.
            </returns>
        </member>
        <member name="T:Ninject.Core.Activation.ActivatorBase">
            <summary>
            The baseline implemenation of an activator with no strategies installed. This type can be
            extended to customize the activation process.
            </summary>
        </member>
        <member name="T:Ninject.Core.Activation.IActivator">
            <summary>
            Performs the actual creation and destruction of instances.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.IActivator.Create(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Creates an instance by executing the chain of activation strategies.
            </summary>
            <param name="context">The context in which the instance is being activated.</param>
            <param name="instance">A reference to the instance that is being created.</param>
        </member>
        <member name="M:Ninject.Core.Activation.IActivator.Destroy(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Destroys an instance by executing the chain of activation strategies.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">A reference to the instance that is being destroyed.</param>
        </member>
        <member name="P:Ninject.Core.Activation.IActivator.Strategies">
            <summary>
            The chain of activation strategies.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.ActivatorBase.OnConnected(System.EventArgs)">
            <summary>
            Called when the component is connected to its environment.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Ninject.Core.Activation.ActivatorBase.OnDisconnected(System.EventArgs)">
            <summary>
            Called when the component is disconnected from its environment.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Ninject.Core.Activation.ActivatorBase.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Activation.ActivatorBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Activation.ActivatorBase"/> class.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.ActivatorBase.Create(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Creates an instance by executing the chain of creation strategies.
            </summary>
            <param name="context">The context in which the instance is being activated.</param>
            <param name="instance">A reference to the instance that is being created.</param>
        </member>
        <member name="M:Ninject.Core.Activation.ActivatorBase.Destroy(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Destroys an instance by executing the chain of destruction strategies.
            </summary>
            <param name="context">The context in which the instance was requested.</param>
            <param name="instance">A reference to the instance that is being destroyed.</param>
        </member>
        <member name="P:Ninject.Core.Activation.ActivatorBase.Strategies">
            <summary>
            The chain of activation strategies.
            </summary>
        </member>
        <member name="T:Ninject.Core.Activation.StandardActivator">
            <summary>
            The stock implementation of an activator.
            </summary>
        </member>
        <member name="M:Ninject.Core.Activation.StandardActivator.OnConnected(System.EventArgs)">
            <summary>
            Called when the component is connected to its environment.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="T:Ninject.Core.CustomBehaviorAttribute">
            <summary>
            Specifies that the type has a custom instantiation behavior.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.BehaviorAttribute">
            <summary>
            A baseline definition of an attribute that dictates instantiation behavior.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.BehaviorAttribute.CreateBehavior">
            <summary>
            Creates an instance of the behavior associated with the attribute.
            </summary>
            <returns>The instance of the behavior that will manage the decorated type.</returns>
        </member>
        <member name="M:Ninject.Core.CustomBehaviorAttribute.#ctor(System.Type)">
            <summary>
            Creates a new CustomBehaviorAttribute.
            </summary>
            <param name="type">The custom behavior type.</param>
        </member>
        <member name="M:Ninject.Core.CustomBehaviorAttribute.CreateBehavior">
            <summary>
            Creates an instance of the behavior associated with the attribute.
            </summary>
            <returns>The instance of the behavior that will manage the decorated type.</returns>
        </member>
        <member name="P:Ninject.Core.CustomBehaviorAttribute.Type">
            <summary>
            Gets the custom behavior type.
            </summary>
        </member>
        <member name="T:Ninject.Core.OnePerRequestAttribute">
            <summary>
            Specifies that only one instance of the decorated type should be created per thread.
            </summary>
        </member>
        <member name="M:Ninject.Core.OnePerRequestAttribute.CreateBehavior">
            <summary>
            Creates an instance of the behavior associated with the attribute.
            </summary>
            <returns>The instance of the behavior that will manage the decorated type.</returns>
        </member>
        <member name="T:Ninject.Core.OnePerThreadAttribute">
            <summary>
            Specifies that only one instance of the decorated type should be created per thread.
            </summary>
        </member>
        <member name="M:Ninject.Core.OnePerThreadAttribute.CreateBehavior">
            <summary>
            Creates an instance of the behavior associated with the attribute.
            </summary>
            <returns>The instance of the behavior that will manage the decorated type.</returns>
        </member>
        <member name="T:Ninject.Core.SingletonAttribute">
            <summary>
            Specifies that only a single instance of the type should exist throughout the application.
            </summary>
        </member>
        <member name="M:Ninject.Core.SingletonAttribute.CreateBehavior">
            <summary>
            Creates an instance of the behavior associated with the attribute.
            </summary>
            <returns>The instance of the behavior that will manage the decorated type.</returns>
        </member>
        <member name="T:Ninject.Core.TransientAttribute">
            <summary>
            Specifies that a new instance of the type should be created each time one is requested.
            </summary>
        </member>
        <member name="M:Ninject.Core.TransientAttribute.CreateBehavior">
            <summary>
            Creates an instance of the behavior associated with the attribute.
            </summary>
            <returns>The instance of the behavior that will manage the decorated type.</returns>
        </member>
        <member name="T:Ninject.Core.DoNotInterceptAttribute">
            <summary>
            Indicates that the decorated method should not be intercepted by interceptors defined
            at the class level.
            </summary>
        </member>
        <member name="T:Ninject.Core.InjectAttribute">
            <summary>
            Indicates that a value should be resolved and injected into the decorated member.
            </summary>
        </member>
        <member name="T:Ninject.Core.InterceptWithAttribute">
            <summary>
            Indicates that the decorated type or method should be intercepted with the specified
            interceptor type.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.InterceptAttribute">
            <summary>
            A baseline definition of an attribute that indicates one or more methods should be intercepted.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.InterceptAttribute.CreateInterceptor(Ninject.Core.Interception.IRequest)">
            <summary>
            Creates the interceptor associated with the attribute.
            </summary>
            <param name="request">The request that is being intercepted.</param>
            <returns>The interceptor.</returns>
        </member>
        <member name="P:Ninject.Core.Infrastructure.InterceptAttribute.Order">
            <summary>
            Gets or sets the interceptor's order number. Interceptors are invoked in ascending order.
            </summary>
        </member>
        <member name="M:Ninject.Core.InterceptWithAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.InterceptWithAttribute"/> class.
            </summary>
            <param name="interceptorType">The type of interceptor that should intercept method calls.</param>
        </member>
        <member name="M:Ninject.Core.InterceptWithAttribute.CreateInterceptor(Ninject.Core.Interception.IRequest)">
            <summary>
            Creates the interceptor associated with the attribute.
            </summary>
            <param name="request">The request that is being intercepted.</param>
            <returns>The interceptor.</returns>
        </member>
        <member name="P:Ninject.Core.InterceptWithAttribute.InterceptorType">
            <summary>
            Gets or sets the type of interceptor that should intercept method calls.
            </summary>
        </member>
        <member name="T:Ninject.Core.OptionalAttribute">
            <summary>
            Indicates that the value that is resolved for the decorated injection point is optional.
            When the kernel attempts to resolve an optional dependency for a service that has no bindings,
            and it cannot create a binding automatically, it will inject a <see langword="null"/> value instead.
            </summary>
        </member>
        <member name="T:Ninject.Core.ServiceAttribute">
            <summary>
            Indicates that the decoarated type should be registered as a service.
            </summary>
        </member>
        <member name="M:Ninject.Core.ServiceAttribute.#ctor">
            <summary>
            Indicates that a self-binding should be registered for the decorated type.
            </summary>
        </member>
        <member name="M:Ninject.Core.ServiceAttribute.#ctor(System.Type)">
            <summary>
            Indicates that a service binding should be registered for the decorated type, with
            the specified service type.
            </summary>
            <param name="registerAs">Type of the service.</param>
        </member>
        <member name="P:Ninject.Core.ServiceAttribute.RegisterAs">
            <summary>
            Gets or sets the service type for the registration.
            </summary>
        </member>
        <member name="P:Ninject.Core.ServiceAttribute.Provider">
            <summary>
            Gets or sets the provider type for the registration.
            </summary>
        </member>
        <member name="T:Ninject.Core.TagAttribute">
            <summary>
            Specifies a textual tag for the decorated member or parameter. This value can be used
            in conditions to resolve bindings in different contexts.
            </summary>
        </member>
        <member name="M:Ninject.Core.TagAttribute.#ctor(System.String)">
            <summary>
            Creates a new TagAttribute.
            </summary>
            <param name="tag">The tag to associate with the decorated member or parameter.</param>
        </member>
        <member name="M:Ninject.Core.TagAttribute.GetTag(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Retrieves the tag that decorates the specified artifact.
            </summary>
            <param name="source">The artifact (member or parameter) to retrieve the tag from.</param>
            <returns>The artifact's tag, or <see langword="null"/> if it does not have a <see cref="T:Ninject.Core.TagAttribute"/>.</returns>
        </member>
        <member name="P:Ninject.Core.TagAttribute.Tag">
            <summary>
            Gets the tag for the decorated member or parameter.
            </summary>
        </member>
        <member name="T:Ninject.Core.Behavior.BehaviorBase">
            <summary>
            A baseline implementation of a behavior. Custom behaviors should extend this class.
            </summary>
        </member>
        <member name="T:Ninject.Core.Behavior.IBehavior">
            <summary>
            Defines the instantiation behavior for a type.
            </summary>
        </member>
        <member name="M:Ninject.Core.Behavior.IBehavior.Resolve(Ninject.Core.Activation.IContext)">
            <summary>
            Resolves an instance of the type based on the rules of the behavior.
            </summary>
            <param name="context">The context in which the instance is being activated.</param>
            <returns>An instance of the type associated with the behavior.</returns>
        </member>
        <member name="M:Ninject.Core.Behavior.IBehavior.Release(Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Releases an instance of the type based on the rules of the behavior.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance to release.</param>
        </member>
        <member name="P:Ninject.Core.Behavior.IBehavior.Kernel">
            <summary>
            Gets or sets the kernel related to the behavior.
            </summary>
        </member>
        <member name="P:Ninject.Core.Behavior.IBehavior.SupportsEagerActivation">
            <summary>
            Gets a value indicating whether the behavior supports eager activation.
            </summary>
            <remarks>
            If <see langword="true"/>, instances of the associated type will be automatically
            activated if the <c>UseEagerActivation</c> option is set for the kernel. If
            <see langword="false"/>, all instances of the type will be lazily activated.
            </remarks>
        </member>
        <member name="P:Ninject.Core.Behavior.IBehavior.ShouldTrackInstances">
            <summary>
            Gets a value indicating whether the kernel should track instances created by the
            behavior for deterministic disposal.
            </summary>
            <remarks>
            If <see langword="true"/>, the kernel will keep a reference to each instance of
            the associated type that is activated. When the kernel is disposed, the instances
            will be released.
            </remarks>
        </member>
        <member name="M:Ninject.Core.Behavior.BehaviorBase.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Behavior.BehaviorBase.Resolve(Ninject.Core.Activation.IContext)">
            <summary>
            Resolves an instance of the type based on the rules of the behavior.
            </summary>
            <param name="context">The context in which the instance is being activated.</param>
            <returns>An instance of the type associated with the behavior.</returns>
        </member>
        <member name="M:Ninject.Core.Behavior.BehaviorBase.Release(Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Releases an instance of the type based on the rules of the behavior.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance to release.</param>
        </member>
        <member name="M:Ninject.Core.Behavior.BehaviorBase.CreateInstance(Ninject.Core.Activation.IContext,System.Object@)">
            <summary>
            Creates a new instance of the type via the kernel's <see cref="T:Ninject.Core.Activation.IActivator"/>.
            </summary>
            <param name="context">The context in which the instance should be created.</param>
            <param name="instance">The existing instance, if applicable.</param>
        </member>
        <member name="M:Ninject.Core.Behavior.BehaviorBase.DestroyInstance(Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Destroys an instance of the type via the kernel's <see cref="T:Ninject.Core.Activation.IActivator"/>.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance to destroy.</param>
        </member>
        <member name="M:Ninject.Core.Behavior.BehaviorBase.DestroyInstance(Ninject.Core.Infrastructure.InstanceWithContext)">
            <summary>
            Destroys an instance of the type via the kernel's <see cref="T:Ninject.Core.Activation.IActivator"/>.
            </summary>
            <param name="contextualized">The contextualized instance to destroy.</param>
        </member>
        <member name="P:Ninject.Core.Behavior.BehaviorBase.Kernel">
            <summary>
            Gets or sets the kernel related to the behavior.
            </summary>
        </member>
        <member name="P:Ninject.Core.Behavior.BehaviorBase.SupportsEagerActivation">
            <summary>
            Gets a value indicating whether the behavior supports eager activation.
            </summary>
            <remarks>
            If <see langword="true"/>, instances of the associated type will be automatically
            activated if the <c>UseEagerActivation</c> option is set for the kernel. If
            <see langword="false"/>, all instances of the type will be lazily activated.
            </remarks>
        </member>
        <member name="P:Ninject.Core.Behavior.BehaviorBase.ShouldTrackInstances">
            <summary>
            Gets a value indicating whether the kernel should track instances created by the
            behavior for deterministic disposal.
            </summary>
            <remarks>
            If <see langword="true"/>, the kernel will keep a reference to each instance of
            the associated type that is activated. When the kernel is disposed, the instances
            will be released.
            </remarks>
        </member>
        <member name="T:Ninject.Core.Behavior.OnePerRequestBehavior">
            <summary>
            A behavior that causes only a single instance of the type to exist per web request.
            If the type is activated outside of a web request (that is, if <see cref="P:System.Web.HttpContext.Current"/>
            is <see langword="null"/>), it will act as though it was registered with a <see cref="T:Ninject.Core.Behavior.SingletonBehavior"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Behavior.OnePerRequestBehavior.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Behavior.OnePerRequestBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Behavior.OnePerRequestBehavior"/> class.
            </summary>
        </member>
        <member name="M:Ninject.Core.Behavior.OnePerRequestBehavior.Resolve(Ninject.Core.Activation.IContext)">
            <summary>
            Resolves an instance of the type based on the rules of the behavior.
            </summary>
            <param name="context">The context in which the instance is being activated.</param>
            <returns>An instance of the type associated with the behavior.</returns>
        </member>
        <member name="M:Ninject.Core.Behavior.OnePerRequestBehavior.Release(Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Does nothing; the instance will be released when the behavior is disposed.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance to release.</param>
        </member>
        <member name="P:Ninject.Core.Behavior.OnePerRequestBehavior.Instance">
            <summary>
            Gets or sets the instance associated with the behavior.
            </summary>
        </member>
        <member name="T:Ninject.Core.Behavior.OnePerThreadBehavior">
            <summary>
            A behavior that causes only one instance of the type to exist per thread.
            </summary>
        </member>
        <member name="M:Ninject.Core.Behavior.OnePerThreadBehavior.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Behavior.OnePerThreadBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Behavior.OnePerThreadBehavior"/> class.
            </summary>
        </member>
        <member name="M:Ninject.Core.Behavior.OnePerThreadBehavior.Resolve(Ninject.Core.Activation.IContext)">
            <summary>
            Resolves an instance of the type based on the rules of the behavior.
            </summary>
            <param name="context">The context in which the instance is being activated.</param>
            <returns>An instance of the type associated with the behavior.</returns>
        </member>
        <member name="M:Ninject.Core.Behavior.OnePerThreadBehavior.Release(Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Does nothing; the instances will be released when the behavior is disposed.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance to release.</param>
        </member>
        <member name="T:Ninject.Core.Behavior.SingletonBehavior">
            <summary>
            A behavior that causes only a single instance of the type to exist throughout the application.
            </summary>
        </member>
        <member name="M:Ninject.Core.Behavior.SingletonBehavior.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Behavior.SingletonBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Behavior.SingletonBehavior"/> class.
            </summary>
        </member>
        <member name="M:Ninject.Core.Behavior.SingletonBehavior.Resolve(Ninject.Core.Activation.IContext)">
            <summary>
            Resolves an instance of the type based on the rules of the behavior.
            </summary>
            <param name="context">The context in which the instance is being activated.</param>
            <returns>An instance of the type associated with the behavior.</returns>
        </member>
        <member name="M:Ninject.Core.Behavior.SingletonBehavior.Release(Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Does nothing; the instance will be released when the behavior is disposed.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance to release.</param>
        </member>
        <member name="P:Ninject.Core.Behavior.SingletonBehavior.Instance">
            <summary>
            Gets or sets the instance associated with the behavior.
            </summary>
        </member>
        <member name="T:Ninject.Core.Behavior.TransientBehavior">
            <summary>
            A behavior that causes a new instance of the type to be created each time one is requested.
            </summary>
        </member>
        <member name="M:Ninject.Core.Behavior.TransientBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Behavior.TransientBehavior"/> class.
            </summary>
        </member>
        <member name="M:Ninject.Core.Behavior.TransientBehavior.Resolve(Ninject.Core.Activation.IContext)">
            <summary>
            Resolves an instance of the type based on the rules of the behavior.
            </summary>
            <param name="context">The context in which the instance is being activated.</param>
            <returns>An instance of the type associated with the behavior.</returns>
        </member>
        <member name="M:Ninject.Core.Behavior.TransientBehavior.Release(Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Releases an instance of the type based on the rules of the behavior.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance to release.</param>
        </member>
        <member name="T:Ninject.Core.Binding.BinderBase">
            <summary>
            The baseline definition of a binder, which builds up information about a binding.
            </summary>
        </member>
        <member name="T:Ninject.Core.Binding.IBinder">
            <summary>
            Configures type bindings.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.IBinder.Binding">
            <summary>
            Gets the binding that the binder should manipulate.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.BinderBase.#ctor(Ninject.Core.Binding.IBinding)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Binding.BinderBase"/> class.
            </summary>
            <param name="binding">The binding that the binder should manipulate.</param>
        </member>
        <member name="P:Ninject.Core.Binding.BinderBase.Binding">
            <summary>
            Gets the binding that the binder should manipulate.
            </summary>
        </member>
        <member name="T:Ninject.Core.Binding.StandardBinder">
            <summary>
            The stock definition of a binder.
            </summary>
        </member>
        <member name="T:Ninject.Core.Binding.Syntax.IBindingTargetSyntax">
            <summary>
            Describes a fluent syntax for modifying the target of a binding.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingTargetSyntax.ToSelf">
            <summary>
            Indicates that the service should be bound to itself.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingTargetSyntax.To``1">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <typeparam name="T">The type to bind to.</typeparam>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingTargetSyntax.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <param name="type">The type to bind to.</param>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingTargetSyntax.ToProvider``1">
            <summary>
            Indicates that the service should be bound to a provider of the specified type.
            The provider will be requested from the kernel, meaning it will be activated as normal.
            </summary>
            <typeparam name="T">The provider type to use.</typeparam>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingTargetSyntax.ToProvider(System.Type)">
            <summary>
            Indicates that the service should be bound to a provider of the specified type.
            The provider will be requested from the kernel, meaning it will be activated as normal.
            </summary>
            <param name="providerType">The provider type to use.</param>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingTargetSyntax.ToProvider(Ninject.Core.Creation.IProvider)">
            <summary>
            Indicates that the service should be bound to the specified provider.
            </summary>
            <param name="provider">The provider to use.</param>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingTargetSyntax.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The constant value.</param>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingTargetSyntax.ToRemotingChannel(System.String)">
            <summary>
            Indicates that the service should be bound to the remoting channel at the specified URI.
            </summary>
            <param name="uri">The URI to bind the service to.</param>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingTargetSyntax.ToFactoryMethod``1(Ninject.Core.Infrastructure.Func{``0})">
            <summary>
            Indicates that the service should be bound to the specified factory method.
            </summary>
            <typeparam name="R">The return value of the factory method.</typeparam>
            <param name="method">The factory method.</param>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingTargetSyntax.ToFactoryMethod``2(Ninject.Core.Infrastructure.Func{``0,``1},``0)">
            <summary>
            Indicates that the service should be bound to the specified factory method.
            </summary>
            <typeparam name="A1">The type of the factory method's first argument.</typeparam>
            <typeparam name="R">The return value of the factory method.</typeparam>
            <param name="method">The factory method.</param>
            <param name="arg1">The factory method's first argument.</param>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingTargetSyntax.ToFactoryMethod``3(Ninject.Core.Infrastructure.Func{``0,``1,``2},``0,``1)">
            <summary>
            Indicates that the service should be bound to the specified factory method.
            </summary>
            <typeparam name="A1">The type of the factory method's first argument.</typeparam>
            <typeparam name="A2">The type of the factory method's second argument.</typeparam>
            <typeparam name="R">The return value of the factory method.</typeparam>
            <param name="method">The factory method.</param>
            <param name="arg1">The factory method's first argument.</param>
            <param name="arg2">The factory method's second argument.</param>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingTargetSyntax.ToFactoryMethod``4(Ninject.Core.Infrastructure.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Indicates that the service should be bound to the specified factory method.
            </summary>
            <typeparam name="A1">The type of the factory method's first argument.</typeparam>
            <typeparam name="A2">The type of the factory method's second argument.</typeparam>
            <typeparam name="A3">The type of the factory method's third argument.</typeparam>
            <typeparam name="R">The return value of the factory method.</typeparam>
            <param name="method">The factory method.</param>
            <param name="arg1">The factory method's first argument.</param>
            <param name="arg2">The factory method's second argument.</param>
            <param name="arg3">The factory method's third argument.</param>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingTargetSyntax.ToFactoryMethod``5(Ninject.Core.Infrastructure.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Indicates that the service should be bound to the specified factory method.
            </summary>
            <typeparam name="A1">The type of the factory method's first argument.</typeparam>
            <typeparam name="A2">The type of the factory method's second argument.</typeparam>
            <typeparam name="A3">The type of the factory method's third argument.</typeparam>
            <typeparam name="A4">The type of the factory method's fourth argument.</typeparam>
            <typeparam name="R">The return value of the factory method.</typeparam>
            <param name="method">The factory method.</param>
            <param name="arg1">The factory method's first argument.</param>
            <param name="arg2">The factory method's second argument.</param>
            <param name="arg3">The factory method's third argument.</param>
            <param name="arg4">The factory method's fourth argument.</param>
        </member>
        <member name="T:Ninject.Core.Binding.Syntax.IBindingConditionBehaviorOrArgumentSyntax">
            <summary>
            Describes a fluent syntax for modifying the condition or behavior of a binding.
            </summary>
        </member>
        <member name="T:Ninject.Core.Binding.Syntax.IBindingConditionSyntax">
            <summary>
            Describes a fluent syntax for modifying the condition of a binding.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingConditionSyntax.Always">
            <summary>
            Indicates that the binding should be used by default.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingConditionSyntax.Only(Ninject.Core.ICondition{Ninject.Core.Activation.IContext})">
            <summary>
            Indicates that the binding should only be used if the specified condition is true
            in the context in which the service is activated.
            </summary>
            <param name="condition">The condition to test.</param>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingConditionSyntax.OnlyIf(System.Predicate{Ninject.Core.Activation.IContext})">
            <summary>
            Indicates that the binding should only be used if the specified predicate evalutes to
            true when the component is being activated.
            </summary>
            <param name="predicate">The predicate to invoke.</param>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingConditionSyntax.ForMembersOf``1">
            <summary>
            Indicates that the binding should only be used for members declared by the specified type.
            </summary>
            <typeparam name="T">The type in question.</typeparam>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingConditionSyntax.ForMembersOf(System.Type)">
            <summary>
            Indicates that the binding should only be used for members declared by the specified type.
            </summary>
            <param name="type">The type in question.</param>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingConditionSyntax.WhereMemberHas``1">
            <summary>
            Indicates that the binding should only be used when the member being injected is decorated
            with the specified attribute.
            </summary>
            <typeparam name="T">The attribute to look for.</typeparam>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingConditionSyntax.WhereMemberHas(System.Type)">
            <summary>
            Indicates that the binding should only be used when the member being injected is decorated
            with the specified attribute.
            </summary>
            <param name="attribute">The attribute to look for.</param>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingConditionSyntax.WhereTargetHas``1">
            <summary>
            Indicates that the binding should only be used when the injection target is decorated
            with the specified attribute.
            </summary>
            <typeparam name="T">The attribute to look for.</typeparam>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingConditionSyntax.WhereTargetHas(System.Type)">
            <summary>
            Indicates that the binding should only be used when the injection target is decorated
            with the specified attribute.
            </summary>
            <param name="attribute">The attribute to look for.</param>
        </member>
        <member name="T:Ninject.Core.Binding.Syntax.IBindingBehaviorSyntax">
            <summary>
            Describes a fluent syntax for modifying the behavior of a binding.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingBehaviorSyntax.Using``1">
            <summary>
            Indicates that the service's instantiation should be controlled by a new instance of
            the specified behavior type. The default constructor on the behavior type will be called.
            </summary>
            <typeparam name="T">The behavior type to use.</typeparam>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingBehaviorSyntax.Using(Ninject.Core.Behavior.IBehavior)">
            <summary>
            Indicates that the service's instantiation should be controlled by the specified behavior.
            </summary>
            <param name="behavior">The behavior to use.</param>
        </member>
        <member name="T:Ninject.Core.Binding.Syntax.IBindingInlineArgumentSyntax">
            <summary>
            Describes a fluent syntax for adding inline arguments to the constructor of a service.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingInlineArgumentSyntax.WithArgument``1(System.String,``0)">
            <summary>
            Indicates that the specified parameter on the service's constructor should be injected
            with the specified value. These inline arguments will override any value that would
            otherwise be injected.
            </summary>
            <typeparam name="T">The type of value to inject.</typeparam>
            <param name="name">The name of the parameter to inject the value into.</param>
            <param name="value">The value to inject.</param>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingInlineArgumentSyntax.WithArguments(System.Collections.IDictionary)">
            <summary>
            Indicates that arguments on the service's constructor matching the keys of the
            dictionary will be overridden by their associated values.
            </summary>
            <param name="arguments">The arguments to override.</param>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingInlineArgumentSyntax.WithArguments(System.Object)">
            <summary>
            Indicates that arguments matching the properties defined on the object will be overridden
            by the properties' values.
            </summary>
            <param name="values">An object defining the values for the arguments.</param>
        </member>
        <member name="T:Ninject.Core.Binding.Syntax.IBindingBehaviorOrArgumentSyntax">
            <summary>
            Describes a fluent syntax for modifying the behavior of a binding or adding arguments.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBinder.#ctor(Ninject.Core.Binding.IBinding)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Binding.StandardBinder"/> class.
            </summary>
            <param name="binding">The binding that the binder should manipulate.</param>
        </member>
        <member name="T:Ninject.Core.Binding.IBindingRegistry">
            <summary>
            Collects bindings for use by the kernel.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.IBindingRegistry.Add(Ninject.Core.Binding.IBinding)">
            <summary>
            Registers a new binding.
            </summary>
            <param name="binding">The binding to register.</param>
        </member>
        <member name="M:Ninject.Core.Binding.IBindingRegistry.Release(Ninject.Core.Binding.IBinding)">
            <summary>
            Releases the specified binding.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:Ninject.Core.Binding.IBindingRegistry.ReleaseAll(System.Type)">
            <summary>
            Releases all bindings registered for the specified service.
            </summary>
            <param name="service">The service in question.</param>
        </member>
        <member name="M:Ninject.Core.Binding.IBindingRegistry.ReleaseAll">
            <summary>
            Releases all registered bindings for all services.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.IBindingRegistry.HasBinding(System.Type)">
            <summary>
            Returns a value indicating whether one or more bindings are registered for the specified service.
            </summary>
            <param name="service">The service in question.</param>
            <returns><see langword="True"/> if the service has one or more bindings, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Binding.IBindingRegistry.GetBindings(System.Type)">
            <summary>
            Returns a collection of all bindings registered for the specified service.
            </summary>
            <param name="service">The service in question.</param>
            <returns>The collection of bindings, or <see langword="null"/> if none have been registered.</returns>
        </member>
        <member name="M:Ninject.Core.Binding.IBindingRegistry.GetServices">
            <summary>
            Returns a collection of services for which bindings have been registered.
            </summary>
            <returns>The collection of services.</returns>
        </member>
        <member name="M:Ninject.Core.Binding.IBindingRegistry.ValidateBindings">
            <summary>
            Validates the registered bindings. This is called after modules are loaded into the kernel.
            </summary>
        </member>
        <member name="T:Ninject.Core.Binding.StandardBindingRegistry">
            <summary>
            The stock definition of a <see cref="T:Ninject.Core.Binding.IBindingRegistry"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBindingRegistry.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBindingRegistry.Add(Ninject.Core.Binding.IBinding)">
            <summary>
            Registers a new binding.
            </summary>
            <param name="binding">The binding to register.</param>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBindingRegistry.Release(Ninject.Core.Binding.IBinding)">
            <summary>
            Releases the specified binding.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBindingRegistry.ReleaseAll(System.Type)">
            <summary>
            Releases all bindings registered for the specified service.
            </summary>
            <param name="service">The service in question.</param>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBindingRegistry.ReleaseAll">
            <summary>
            Releases all registered bindings for all services.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBindingRegistry.HasBinding(System.Type)">
            <summary>
            Returns a value indicating whether one or more bindings are registered for the specified service.
            </summary>
            <param name="service">The service in question.</param>
            <returns><see langword="True"/> if the service has one or more bindings, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBindingRegistry.GetBindings(System.Type)">
            <summary>
            Returns a collection of all bindings registered for the specified service.
            </summary>
            <param name="service">The service in question.</param>
            <returns>The collection of bindings, or <see langword="null"/> if none have been registered.</returns>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBindingRegistry.GetServices">
            <summary>
            Returns a collection of services for which bindings have been registered.
            </summary>
            <returns>The collection of services.</returns>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBindingRegistry.ValidateBindings">
            <summary>
            Validates all bindings to ensure that there are no incomplete or competing ones.
            </summary>
        </member>
        <member name="T:Ninject.Core.Binding.BindingMatchCollection">
            <summary>
            A collection of potential bindings for a service, within a specific context.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.BindingMatchCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Binding.BindingMatchCollection"/> class.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.BindingMatchCollection.DefaultBinding">
            <summary>
            Gets or sets the default binding.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.BindingMatchCollection.ConditionalBindings">
            <summary>
            Gets the conditional bindings.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.BindingMatchCollection.HasDefaultBinding">
            <summary>
            Gets a value indicating whether the collection has a default binding.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.BindingMatchCollection.HasConditionalBindings">
            <summary>
            Gets a value indicating whether the collection has one or more conditional bindings.
            </summary>
        </member>
        <member name="T:Ninject.Core.Binding.IBindingSelector">
            <summary>
            Selects bindings to use in response to activation requests.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.IBindingSelector.SelectBinding(System.Type,Ninject.Core.Activation.IContext)">
            <summary>
            Determines which binding should be used for the specified service in the specified context.
            </summary>
            <param name="service">The service type that is being activated.</param>
            <param name="context">The context in which the binding is being resolved.</param>
            <returns>The selected binding.</returns>
        </member>
        <member name="T:Ninject.Core.Binding.StandardBindingSelector">
            <summary>
            The stock implementation of a <see cref="T:Ninject.Core.Binding.IBindingSelector"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBindingSelector.SelectBinding(System.Type,Ninject.Core.Activation.IContext)">
            <summary>
            Determines which binding should be used for the specified service in the specified context.
            </summary>
            <param name="service">The service type that is being activated.</param>
            <param name="context">The context in which the binding is being resolved.</param>
            <returns>The selected binding.</returns>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBindingSelector.GetMatchingBindings(Ninject.Core.Activation.IContext,System.Collections.Generic.IEnumerable{Ninject.Core.Binding.IBinding})">
            <summary>
            Searches through the list of candidate bindings to find the default binding and one or
            more conditional bindings that match the current context.
            </summary>
            <param name="context">The context in which the binding is being resolved.</param>
            <param name="candidates">The available candidate bindings.</param>
            <returns>A structure containing the matching bindings.</returns>
        </member>
        <member name="T:Ninject.Core.Binding.IBinding">
            <summary>
            An object containing information that is used to activate instances of a type.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.IBinding.Matches(Ninject.Core.Activation.IContext)">
            <summary>
            Determines whether the specified context matches this binding.
            </summary>
            <param name="context">The context in question.</param>
            <returns><see langword="True"/> if the binding matches, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Ninject.Core.Binding.IBinding.Kernel">
            <summary>
            Gets the kernel that created the binding.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.IBinding.Service">
            <summary>
            Gets the service type that the binding is associated with.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.IBinding.Provider">
            <summary>
            Gets or sets the provider that can create instances of the type.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.IBinding.Behavior">
            <summary>
            Gets or sets the behavior that applies to the binding, if one was defined.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.IBinding.Condition">
            <summary>
            Gets or sets the condition under which this binding should be used.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.IBinding.InlineArguments">
            <summary>
            Gets additional arguments that should be passed to the type's constructor.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.IBinding.IsImplicit">
            <summary>
            Gets or sets a value indicating whether the binding was implicitly created by the kernel.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.IBinding.IsConditional">
            <summary>
            Gets a value indicating whether the binding is conditional (that is, whether it has
            a condition associated with it.)
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.IBinding.IsDefault">
            <summary>
            Gets a value indicating whether the binding is the default binding for the type.
            (If a binding has no condition associated with it, it is the default binding.)
            </summary>
        </member>
        <member name="T:Ninject.Core.Binding.IBindingFactory">
            <summary>
            Creates <see cref="T:Ninject.Core.Binding.IBinding"/>s for use by the kernel.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.IBindingFactory.Create(System.Type)">
            <summary>
            Creates a binding for the specified service. The created binding is incomplete, in that
            it has no provider associated with it.
            </summary>
            <param name="service">The service to create a binding for.</param>
            <returns>The created binding.</returns>
        </member>
        <member name="T:Ninject.Core.Binding.StandardBinding">
            <summary>
            The stock implementation of a binding.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBinding.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBinding.#ctor(Ninject.Core.IKernel,System.Type)">
            <summary>
            Creates a new StandardBinding.
            </summary>
            <param name="kernel">The kernel that is creating the binding.</param>
            <param name="service">The service type to bind from.</param>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBinding.Matches(Ninject.Core.Activation.IContext)">
            <summary>
            Determines whether the specified context matches this binding.
            </summary>
            <param name="context">The context in question.</param>
        </member>
        <member name="P:Ninject.Core.Binding.StandardBinding.Kernel">
            <summary>
            Gets the kernel that created the binding.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.StandardBinding.Service">
            <summary>
            Gets the service type that the binding is associated with.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.StandardBinding.Provider">
            <summary>
            Gets or sets the provider that can create instances of the type.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.StandardBinding.Behavior">
            <summary>
            Gets or sets the behavior that decides whether to re-use existing instances or create new ones.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.StandardBinding.Condition">
            <summary>
            Gets or sets the condition under which this binding should be used.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.StandardBinding.InlineArguments">
            <summary>
            Gets additional arguments that should be passed to the type's constructor.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.StandardBinding.IsImplicit">
            <summary>
            Gets a value indicating whether the binding was implicitly created by the kernel.
            </summary>
        </member>
        <member name="P:Ninject.Core.Binding.StandardBinding.IsConditional">
            <summary>
            Gets a value indicating whether the binding is conditional (that is, whether it has
            a condition associated with it.)
            </summary>
            <value></value>
        </member>
        <member name="P:Ninject.Core.Binding.StandardBinding.IsDefault">
            <summary>
            Gets a value indicating whether the binding is the default binding for the type.
            (If a binding has no condition associated with it, it is the default binding.)
            </summary>
        </member>
        <member name="T:Ninject.Core.Binding.StandardBindingFactory">
            <summary>
            The stock implementation of a <see cref="T:Ninject.Core.Binding.IBindingFactory"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.StandardBindingFactory.Create(System.Type)">
            <summary>
            Creates a binding for the specified service. The created binding is incomplete, in that
            it has no provider associated with it.
            </summary>
            <param name="service">The service to create a binding for.</param>
            <returns>The created binding.</returns>
        </member>
        <member name="T:Ninject.Core.Creation.Plugins.GenericProviderPlugin">
            <summary>
            A <see cref="T:Ninject.Core.Creation.IProviderFactoryPlugin"/> that creates <see cref="T:Ninject.Core.Creation.Providers.GenericProvider"/>s if
            the type has generic parameters.
            </summary>
        </member>
        <member name="T:Ninject.Core.Creation.IProviderFactoryPlugin">
            <summary>
            A plugin for a <see cref="T:Ninject.Core.Creation.IProviderFactory"/> that can create <see cref="T:Ninject.Core.Creation.IProvider"/>s.
            </summary>
        </member>
        <member name="T:Ninject.Core.ICondition`1">
            <summary>
            Examines another object in order to determine if it satisfies some parameters.
            </summary>
            <typeparam name="T">The type of object that this condition examines.</typeparam>
        </member>
        <member name="M:Ninject.Core.ICondition`1.Matches(`0)">
            <summary>
            Determines whether the specified object matches the condition.
            </summary>
            <param name="value">The object to test.</param>
            <returns><see langword="True"/> if the object matches, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.IProviderFactoryPlugin.Create(System.Type)">
            <summary>
            Creates a provider for the specified type.
            </summary>
            <param name="type">The type to create a provider for.</param>
            <returns>The provider.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.Plugins.GenericProviderPlugin.Matches(System.Type)">
            <summary>
            Returns a value indicating whether the plugin can create a provider for the specified type.
            </summary>
            <param name="type">The type in question.</param>
            <returns><see langword="True"/> if the plugin can create a provider for the type, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.Plugins.GenericProviderPlugin.Create(System.Type)">
            <summary>
            Creates a provider for the specified type.
            </summary>
            <param name="type">The type to create a provider for.</param>
            <returns>The provider.</returns>
        </member>
        <member name="T:Ninject.Core.Creation.Plugins.StandardProviderPlugin">
            <summary>
            A <see cref="T:Ninject.Core.Creation.IProviderFactoryPlugin"/> that creates <see cref="T:Ninject.Core.Creation.Providers.StandardProvider"/>s.
            </summary>
        </member>
        <member name="M:Ninject.Core.Creation.Plugins.StandardProviderPlugin.Matches(System.Type)">
            <summary>
            Returns a value indicating whether the plugin can create a provider for the specified type.
            </summary>
            <param name="type">The type in question.</param>
            <returns><see langword="True"/> if the plugin can create a provider for the type, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.Plugins.StandardProviderPlugin.Create(System.Type)">
            <summary>
            Creates a provider for the specified type.
            </summary>
            <param name="type">The type to create a provider for.</param>
            <returns>The provider.</returns>
        </member>
        <member name="T:Ninject.Core.Creation.Providers.ConstantProvider">
            <summary>
            A provider that always returns a constant value.
            </summary>
        </member>
        <member name="T:Ninject.Core.Creation.Providers.InjectionProviderBase">
            <summary>
            A baseline definition of a provider that calls an injection constructor to create instances.
            </summary>
        </member>
        <member name="T:Ninject.Core.Creation.Providers.ProviderBase">
            <summary>
            A baseline definition of a provider.
            </summary>
        </member>
        <member name="T:Ninject.Core.Creation.IProvider">
            <summary>
            An object that creates instances of a type.
            </summary>
        </member>
        <member name="M:Ninject.Core.Creation.IProvider.IsCompatibleWith(Ninject.Core.Activation.IContext)">
            <summary>
            Determines whether the provider is compatible with the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns><see langword="True"/> if the provider is compatible, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.IProvider.GetImplementationType(Ninject.Core.Activation.IContext)">
            <summary>
            Gets the actual concrete type that will be instantiated for the provided context.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The concrete type that will be instantiated.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.IProvider.Create(Ninject.Core.Activation.IContext)">
            <summary>
            Creates a new instance of the type.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The instance of the type.</returns>
        </member>
        <member name="P:Ninject.Core.Creation.IProvider.Prototype">
            <summary>
            Gets the prototype of the provider. This is almost always the actual type that is returned,
            except in certain cases, such as generic argument inference.
            </summary>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.ProviderBase.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Creation.Providers.ProviderBase"/> class.
            </summary>
            <param name="prototype">The prototype that the provider will use to create instances.</param>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.ProviderBase.IsCompatibleWith(Ninject.Core.Activation.IContext)">
            <summary>
            Determines whether the provider is compatible with the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns><see langword="True"/> if the provider is compatible, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.ProviderBase.GetImplementationType(Ninject.Core.Activation.IContext)">
            <summary>
            Gets the concrete implementation type that will be instantiated for the provided context.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The concrete type that will be instantiated.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.ProviderBase.Create(Ninject.Core.Activation.IContext)">
            <summary>
            Creates instances of types by calling a constructor via a lightweight dynamic method,
            resolving and injecting constructor arguments as necessary.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The instance of the type.</returns>
        </member>
        <member name="P:Ninject.Core.Creation.Providers.ProviderBase.Prototype">
            <summary>
            Gets the prototype of the provider. This is almost always the type that is returned,
            except in the case of generic argument inference.
            </summary>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.InjectionProviderBase.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Creation.Providers.InjectionProviderBase"/> class.
            </summary>
            <param name="prototype">The prototype that the provider will use to create instances.</param>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.InjectionProviderBase.Create(Ninject.Core.Activation.IContext)">
            <summary>
            Creates instances of types by calling a constructor via a lightweight dynamic method,
            resolving and injecting constructor arguments as necessary.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The instance of the type.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.InjectionProviderBase.CallInjectionConstructor(Ninject.Core.Activation.IContext)">
            <summary>
            Calls the injection constructor defined in the context's activation plan, and returns
            the resulting object.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The instance of the type.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.InjectionProviderBase.ResolveConstructorArguments(Ninject.Core.Activation.IContext,Ninject.Core.Planning.Directives.ConstructorInjectionDirective)">
            <summary>
            Resolves the arguments for the constructor defined by the specified constructor injection
            directive.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <param name="directive">The directive describing the injection constructor.</param>
            <returns>An array of arguments that can be passed to the constructor.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.ConstantProvider.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.ConstantProvider.#ctor(System.Object)">
            <summary>
            Creates a new ConstantProvider.
            </summary>
            <param name="value">The value that is returned by the provider.</param>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.ConstantProvider.#ctor(System.Object,System.IFormatProvider)">
            <summary>
            Creates a new ConstantProvider.
            </summary>
            <param name="value">The value that is returned by the provider.</param>
            <param name="formatProvider">The format provider that will be used when converting the constant value.</param>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.ConstantProvider.GetImplementationType(Ninject.Core.Activation.IContext)">
            <summary>
            Gets the concrete implementation type that will be instantiated for the provided context.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The concrete type that will be instantiated.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.ConstantProvider.Create(Ninject.Core.Activation.IContext)">
            <summary>
            Returns the constant value associated with the provider.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The instance of the type.</returns>
        </member>
        <member name="P:Ninject.Core.Creation.Providers.ConstantProvider.Value">
            <summary>
            Gets the value that is returned by the provider.
            </summary>
        </member>
        <member name="P:Ninject.Core.Creation.Providers.ConstantProvider.FormatProvider">
            <summary>
            Gets or sets the format provider that will be used when converting the constant value,
            if a conversion is necessary.
            </summary>
        </member>
        <member name="T:Ninject.Core.Creation.Providers.FactoryMethodProvider`1">
            <summary>
            A provider that calls a factory method to retrieve instances.
            </summary>
            <typeparam name="R">The type of object that is returned from the method.</typeparam>
        </member>
        <member name="T:Ninject.Core.Creation.SimpleProvider`1">
            <summary>
            A simple version of a provider that manually creates instances of types. This can be
            used in cases where injection is not desired.
            </summary>
            <typeparam name="T">The type of instance that will be created by the provider.</typeparam>
        </member>
        <member name="M:Ninject.Core.Creation.SimpleProvider`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Creation.SimpleProvider`1"/> class.
            </summary>
        </member>
        <member name="M:Ninject.Core.Creation.SimpleProvider`1.GetImplementationType(Ninject.Core.Activation.IContext)">
            <summary>
            Gets the concrete implementation type that will be instantiated for the provided context.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The concrete type that will be instantiated.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.SimpleProvider`1.Create(Ninject.Core.Activation.IContext)">
            <summary>
            Creates a new instance of the type.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The instance of the type.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.SimpleProvider`1.CreateInstance(Ninject.Core.Activation.IContext)">
            <summary>
            Creates a new instance of the type.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The instance of the type.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.FactoryMethodProvider`1.#ctor(Ninject.Core.Infrastructure.Func{`0})">
            <summary>
            Creates a new FactoryMethodProvider{R}.
            </summary>
            <param name="factoryMethod">The method that will be called.</param>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.FactoryMethodProvider`1.CreateInstance(Ninject.Core.Activation.IContext)">
            <summary>
            Calls the factory method associated with the provider.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The return value of the factory method.</returns>
        </member>
        <member name="T:Ninject.Core.Creation.Providers.FactoryMethodProvider`2">
            <summary>
            A provider that calls a factory method to retrieve instances.
            </summary>
            <typeparam name="A1">The type of the first argument.</typeparam>
            <typeparam name="R">The type of object that is returned from the method.</typeparam>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.FactoryMethodProvider`2.#ctor(Ninject.Core.Infrastructure.Func{`0,`1},`0)">
            <summary>
            Creates a new FactoryMethodProvider{A1, R}.
            </summary>
            <param name="factoryMethod">The method that will be called.</param>
            <param name="arg1">The first argument to pass to the method.</param>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.FactoryMethodProvider`2.CreateInstance(Ninject.Core.Activation.IContext)">
            <summary>
            Calls the factory method associated with the provider.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The return value of the factory method.</returns>
        </member>
        <member name="T:Ninject.Core.Creation.Providers.FactoryMethodProvider`3">
            <summary>
            A provider that calls a factory method to retrieve instances.
            </summary>
            <typeparam name="A1">The type of the first argument.</typeparam>
            <typeparam name="A2">The type of the second argument.</typeparam>
            <typeparam name="R">The type of object that is returned from the method.</typeparam>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.FactoryMethodProvider`3.#ctor(Ninject.Core.Infrastructure.Func{`0,`1,`2},`0,`1)">
            <summary>
            Creates a new FactoryMethodProvider{A1, A2, R}.
            </summary>
            <param name="factoryMethod">The method that will be called.</param>
            <param name="arg1">The first argument to pass to the method.</param>
            <param name="arg2">The second argument to pass to the method.</param>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.FactoryMethodProvider`3.CreateInstance(Ninject.Core.Activation.IContext)">
            <summary>
            Calls the factory method associated with the provider.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The return value of the factory method.</returns>
        </member>
        <member name="T:Ninject.Core.Creation.Providers.FactoryMethodProvider`4">
            <summary>
            A provider that calls a factory method to retrieve instances.
            </summary>
            <typeparam name="A1">The type of the first argument.</typeparam>
            <typeparam name="A2">The type of the second argument.</typeparam>
            <typeparam name="A3">The type of the third argument.</typeparam>
            <typeparam name="R">The type of object that is returned from the method.</typeparam>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.FactoryMethodProvider`4.#ctor(Ninject.Core.Infrastructure.Func{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Creates a new FactoryMethodProvider{A1, A2, A3, R}.
            </summary>
            <param name="factoryMethod">The method that will be called.</param>
            <param name="arg1">The first argument to pass to the method.</param>
            <param name="arg2">The second argument to pass to the method.</param>
            <param name="arg3">The third argument to pass to the method.</param>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.FactoryMethodProvider`4.CreateInstance(Ninject.Core.Activation.IContext)">
            <summary>
            Calls the factory method associated with the provider.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The return value of the factory method.</returns>
        </member>
        <member name="T:Ninject.Core.Creation.Providers.FactoryMethodProvider`5">
            <summary>
            A provider that calls a factory method to retrieve instances.
            </summary>
            <typeparam name="A1">The type of the first argument.</typeparam>
            <typeparam name="A2">The type of the second argument.</typeparam>
            <typeparam name="A3">The type of the third argument.</typeparam>
            <typeparam name="A4">The type of the fourth argument.</typeparam>
            <typeparam name="R">The type of object that is returned from the method.</typeparam>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.FactoryMethodProvider`5.#ctor(Ninject.Core.Infrastructure.Func{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Creates a new FactoryMethodProvider{A1, A2, A3, A4, R}.
            </summary>
            <param name="factoryMethod">The method that will be called.</param>
            <param name="arg1">The first argument to pass to the method.</param>
            <param name="arg2">The second argument to pass to the method.</param>
            <param name="arg3">The third argument to pass to the method.</param>
            <param name="arg4">The fourth argument to pass to the method.</param>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.FactoryMethodProvider`5.CreateInstance(Ninject.Core.Activation.IContext)">
            <summary>
            Calls the factory method associated with the provider.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The return value of the factory method.</returns>
        </member>
        <member name="T:Ninject.Core.Creation.Providers.GenericProvider">
            <summary>
            A provider that allows for generic type inference. When provided with a generic type
            definition, it can synthesize instances of closed generic types using the generic type
            arguments of the context.
            </summary>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.GenericProvider.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Creation.Providers.GenericProvider"/> class.
            </summary>
            <param name="prototype">A generic type definition that the provider should use.</param>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.GenericProvider.IsCompatibleWith(Ninject.Core.Activation.IContext)">
            <summary>
            Determines whether the provider is compatible with the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns><see langword="True"/> if the provider is compatible, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.GenericProvider.GetImplementationType(Ninject.Core.Activation.IContext)">
            <summary>
            Gets the concrete implementation type that will be instantiated for the provided context.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The concrete type that will be instantiated.</returns>
        </member>
        <member name="T:Ninject.Core.Creation.Providers.RemotingProvider">
            <summary>
            A provider that binds a service to a remoting channel.
            </summary>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.RemotingProvider.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Creation.Providers.RemotingProvider"/> class.
            </summary>
            <param name="prototype">The type of instances that the provider will create.</param>
            <param name="uri">The URI of the remoting channel to bind to.</param>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.RemotingProvider.GetImplementationType(Ninject.Core.Activation.IContext)">
            <summary>
            Gets the concrete implementation type that will be instantiated for the provided context.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The concrete type that will be instantiated.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.RemotingProvider.Create(Ninject.Core.Activation.IContext)">
            <summary>
            Creates instances of types by calling a constructor via a lightweight dynamic method,
            resolving and injecting constructor arguments as necessary.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The instance of the type.</returns>
        </member>
        <member name="T:Ninject.Core.Creation.Providers.StandardProvider">
            <summary>
            The default provider for the kernel. Creates instances of types by calling a constructor
            via a constructor injector created by the kernel injection system, resolving and injecting
            constructor arguments as necessary.
            </summary>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.StandardProvider.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Creation.Providers.StandardProvider"/> class.
            </summary>
            <param name="prototype">The type of instances that the provider should create.</param>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.StandardProvider.GetImplementationType(Ninject.Core.Activation.IContext)">
            <summary>
            Gets the concrete implementation type that will be instantiated for the provided context.
            </summary>
            <param name="context">The context in which the activation is occurring.</param>
            <returns>The concrete type that will be instantiated.</returns>
        </member>
        <member name="M:Ninject.Core.Creation.Providers.StandardProvider.CanSupportType(System.Type)">
            <summary>
            Determines whether the provider can create instances of the specified type.
            </summary>
            <param name="type">The type in question.</param>
            <returns><see langword="True"/> if instances can be created, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Ninject.Core.Creation.IProviderFactory">
            <summary>
            Creates <see cref="T:Ninject.Core.Creation.IProvider"/>s that can in turn create types for the kernel.
            </summary>
        </member>
        <member name="M:Ninject.Core.Creation.IProviderFactory.Create(System.Type)">
            <summary>
            Creates a provider for the specified type.
            </summary>
            <param name="type">The type to create a provider for.</param>
            <returns>The provider.</returns>
        </member>
        <member name="T:Ninject.Core.Creation.ProviderFactoryBase">
            <summary>
            A baseline definition of a <see cref="T:Ninject.Core.Creation.IProviderFactory"/>.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.PluggableFactoryComponentBase`2">
            <summary>
            A kernel component that acts as a factory by delegating to one or more plugins.
            </summary>
            <typeparam name="TSubject">The type of input that determines which plugin will be used.</typeparam>
            <typeparam name="TPlugin">The type plugin that the factory supports.</typeparam>
        </member>
        <member name="M:Ninject.Core.Infrastructure.PluggableFactoryComponentBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Infrastructure.PluggableFactoryComponentBase`2"/> class.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.PluggableFactoryComponentBase`2.Validate">
            <summary>
            Validates the component and throws an exception if it is not configured properly.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.PluggableFactoryComponentBase`2.FindPlugin(`0)">
            <summary>
            Finds the first plugin that matches the specified subject.
            </summary>
            <param name="subject">The item to match.</param>
            <returns>The matching plugin, or <see langword="null"/> if none matches.</returns>
        </member>
        <member name="P:Ninject.Core.Infrastructure.PluggableFactoryComponentBase`2.DefaultPlugin">
            <summary>
            Gets or sets the default plugin, which will be used if no conditional plugins match.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.PluggableFactoryComponentBase`2.Plugins">
            <summary>
            Gets a collection of plug-in factories that can contribute to the creation of specialized items.
            </summary>
        </member>
        <member name="M:Ninject.Core.Creation.ProviderFactoryBase.Create(System.Type)">
            <summary>
            Creates a provider for the specified type.
            </summary>
            <param name="type">The type to create a provider for.</param>
            <returns>The provider.</returns>
        </member>
        <member name="T:Ninject.Core.Creation.StandardProviderFactory">
            <summary>
            A stock implementation of a <see cref="T:Ninject.Core.Creation.IProviderFactory"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Creation.StandardProviderFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Creation.StandardProviderFactory"/> class.
            </summary>
        </member>
        <member name="T:Ninject.Core.ActivationException">
            <summary>
            Represents errors that occur during the activation of an instance.
            </summary>
        </member>
        <member name="M:Ninject.Core.ActivationException.#ctor">
            <summary>
            Creates a new ActivationException.
            </summary>
        </member>
        <member name="M:Ninject.Core.ActivationException.#ctor(System.String)">
            <summary>
            Creates a new ActivationException.
            </summary>
            <param name="message">An error message that describes the reason for the exception.</param>
        </member>
        <member name="M:Ninject.Core.ActivationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new ActivationException.
            </summary>
            <param name="message">An error message that describes the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Ninject.Core.ActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new ActivationException.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ninject.Core.Infrastructure.IComponentContainer">
            <summary>
            A container that manages components for an <see cref="T:Ninject.Core.IKernel"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IComponentContainer.Connect``1(``0)">
            <summary>
            Connects a component to the kernel. If a component with the specified service is
            already connected, it will be disconnected first.
            </summary>
            <typeparam name="T">The service that the component provides.</typeparam>
            <param name="component">The instance of the component.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IComponentContainer.Connect(System.Type,Ninject.Core.Infrastructure.IKernelComponent)">
            <summary>
            Connects a component to the kernel. If a component with the specified service is
            already connected, it will be disconnected first.
            </summary>
            <param name="type">The service that the component provides.</param>
            <param name="component">The instance of the component.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IComponentContainer.Disconnect``1">
            <summary>
            Disconnects a component from the kernel.
            </summary>
            <typeparam name="T">The service that the component provides.</typeparam>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IComponentContainer.Disconnect(System.Type)">
            <summary>
            Disconnects a component from the kernel.
            </summary>
            <param name="type">The service that the component provides.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IComponentContainer.Get``1">
            <summary>
            Retrieves a component from the kernel.
            </summary>
            <typeparam name="T">The service that the component provides.</typeparam>
            <returns>The instance of the component.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IComponentContainer.Get(System.Type)">
            <summary>
            Retrieves a component from the kernel.
            </summary>
            <param name="type">The service that the component provides.</param>
            <returns>The instance of the component.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IComponentContainer.Has``1">
            <summary>
            Determines whether a component with the specified service type has been added to the kernel.
            </summary>
            <typeparam name="T">The service that the component provides.</typeparam>
            <returns><see langword="true"/> if the component has been added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IComponentContainer.Has(System.Type)">
            <summary>
            Determines whether a component with the specified service type has been added to the kernel.
            </summary>
            <param name="type">The service that the component provides.</param>
            <returns><see langword="true"/> if the component has been added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IComponentContainer.ValidateAll">
            <summary>
            Validates the components in the container to ensure they have been configured properly.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.IComponentContainer.Kernel">
            <summary>
            Gets the kernel whose components are managed by the container.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.StandardComponentContainer">
            <summary>
            The stock implementation of a component container.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.#ctor(Ninject.Core.IKernel)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Infrastructure.StandardComponentContainer"/> class.
            </summary>
            <param name="kernel">The kernel whose components the container will manage.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.Connect``1(``0)">
            <summary>
            Connects a component to the kernel. If a component with the specified service is
            already connected, it will be disconnected first.
            </summary>
            <typeparam name="T">The service that the component provides.</typeparam>
            <param name="component">The instance of the component.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.Connect(System.Type,Ninject.Core.Infrastructure.IKernelComponent)">
            <summary>
            Connects a component to the kernel. If a component with the specified service is
            already connected, it will be disconnected first.
            </summary>
            <param name="type">The service that the component provides.</param>
            <param name="component">The instance of the component.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.Disconnect``1">
            <summary>
            Disconnects a component from the kernel.
            </summary>
            <typeparam name="T">The service that the component provides.</typeparam>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.Disconnect(System.Type)">
            <summary>
            Disconnects a component from the kernel.
            </summary>
            <param name="type">The service that the component provides.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.Get``1">
            <summary>
            Retrieves a component from the kernel.
            </summary>
            <typeparam name="T">The service that the component provides.</typeparam>
            <returns>The instance of the component.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.Get(System.Type)">
            <summary>
            Retrieves a component from the kernel.
            </summary>
            <param name="type">The service that the component provides.</param>
            <returns>The instance of the component.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.Has``1">
            <summary>
            Determines whether a component with the specified service type has been added to the kernel.
            </summary>
            <typeparam name="T">The service that the component provides.</typeparam>
            <returns><see langword="true"/> if the component has been added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.Has(System.Type)">
            <summary>
            Determines whether a component with the specified service type has been added to the kernel.
            </summary>
            <param name="type">The service that the component provides.</param>
            <returns><see langword="true"/> if the component has been added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.ValidateAll">
            <summary>
            Validates the components in the container to ensure they have been configured properly.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.DoConnect(System.Type,Ninject.Core.Infrastructure.IKernelComponent)">
            <summary>
            Connects a component to the kernel.
            </summary>
            <param name="type">The service that the component provides.</param>
            <param name="component">The instance of the component.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.DoDisconnect(System.Type)">
            <summary>
            Disconnects a component from the kernel.
            </summary>
            <param name="type">The service that the component provides.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.DoGet(System.Type)">
            <summary>
            Retrieves a component from the kernel.
            </summary>
            <param name="type">The service that the component provides.</param>
            <returns>The instance of the component.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.DoHas(System.Type)">
            <summary>
            Determines whether a component with the specified service type has been added to the kernel.
            </summary>
            <param name="type">The service that the component provides.</param>
            <returns><see langword="true"/> if the component has been added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StandardComponentContainer.DoValidateAll">
            <summary>
            Validates the components in the container to ensure they have been configured properly.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.StandardComponentContainer.Kernel">
            <summary>
            Gets the kernel whose components are managed by the container.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.DebugInfo">
            <summary>
            An object containing debugging information used in error messages.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DebugInfo.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DebugInfo.ToString">
            <summary>
            Retrieves a string representation of the object.
            </summary>
            <returns>A string representation of the object.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DebugInfo.FromStackTrace">
            <summary>
            Creates a new <see cref="T:Ninject.Core.Infrastructure.DebugInfo"/> object by seeking through the current
            <see cref="T:System.Diagnostics.StackTrace"/> for the first method outside the provided type(s).
            </summary>
            <returns>The new <see cref="T:Ninject.Core.Infrastructure.DebugInfo"/> object.</returns>
        </member>
        <member name="P:Ninject.Core.Infrastructure.DebugInfo.Type">
            <summary>
            Gets or sets the calling type.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.DebugInfo.Method">
            <summary>
            Gets or sets the calling method.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.DebugInfo.FileName">
            <summary>
            Gets or sets the name of the file where the call occurred.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.DebugInfo.FilePath">
            <summary>
            Gets or sets the full path to the file where the call occurred.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.DebugInfo.LineNumber">
            <summary>
            Gets or sets the line number of the file where the call occurred.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.DebugInfo.HasFileInfo">
            <summary>
            Gets a value indicating whether the debug info contains file and line information.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.Action`1">
            <summary>
            A procedure that accepts one arguments.
            </summary>
            <typeparam name="A0">The type of the first argument.</typeparam>
            <param name="arg0">The first argument.</param>
        </member>
        <member name="T:Ninject.Core.Infrastructure.Action`2">
            <summary>
            A procedure that accepts one arguments.
            </summary>
            <typeparam name="A0">The type of the first argument.</typeparam>
            <typeparam name="A1">The type of the second argument.</typeparam>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
        </member>
        <member name="T:Ninject.Core.Infrastructure.Action`3">
            <summary>
            A procedure that accepts one arguments.
            </summary>
            <typeparam name="A0">The type of the first argument.</typeparam>
            <typeparam name="A1">The type of the second argument.</typeparam>
            <typeparam name="A2">The type of the third argument.</typeparam>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
        </member>
        <member name="T:Ninject.Core.Infrastructure.Action`4">
            <summary>
            A procedure that accepts one arguments.
            </summary>
            <typeparam name="A0">The type of the first argument.</typeparam>
            <typeparam name="A1">The type of the second argument.</typeparam>
            <typeparam name="A2">The type of the third argument.</typeparam>
            <typeparam name="A3">The type of the fourth argument.</typeparam>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
            <param name="arg3">The fourth argument.</param>
        </member>
        <member name="T:Ninject.Core.Infrastructure.FactoryMethod">
            <summary>
            Represents a method that creates instances of a type.
            </summary>
            <param name="arguments">A collection of arguments to pass to the constructor.</param>
            <returns>An instance of the associated type.</returns>
        </member>
        <member name="T:Ninject.Core.Infrastructure.Func`1">
            <summary>
            A function that accepts no arguments.
            </summary>
            <typeparam name="R">The return type of the function.</typeparam>
        </member>
        <member name="T:Ninject.Core.Infrastructure.Func`2">
            <summary>
            A function that accepts one argument.
            </summary>
            <typeparam name="A1">The type of the first argument.</typeparam>
            <typeparam name="R">The return type of the function.</typeparam>
        </member>
        <member name="T:Ninject.Core.Infrastructure.Func`3">
            <summary>
            A function that accepts two arguments.
            </summary>
            <typeparam name="A1">The type of the first argument.</typeparam>
            <typeparam name="A2">The type of the second argument.</typeparam>
            <typeparam name="R">The return type of the function.</typeparam>
        </member>
        <member name="T:Ninject.Core.Infrastructure.Func`4">
            <summary>
            A function that accepts three arguments.
            </summary>
            <typeparam name="A1">The type of the first argument.</typeparam>
            <typeparam name="A2">The type of the second argument.</typeparam>
            <typeparam name="A3">The type of the third argument.</typeparam>
            <typeparam name="R">The return type of the function.</typeparam>
        </member>
        <member name="T:Ninject.Core.Infrastructure.Func`5">
            <summary>
            A function that accepts four arguments.
            </summary>
            <typeparam name="A1">The type of the first argument.</typeparam>
            <typeparam name="A2">The type of the second argument.</typeparam>
            <typeparam name="A3">The type of the third argument.</typeparam>
            <typeparam name="A4">The type of the fourth argument.</typeparam>
            <typeparam name="R">The return type of the function.</typeparam>
        </member>
        <member name="T:Ninject.Core.Infrastructure.Getter">
            <summary>
            Represents a method that gets the value stored in a field or property on
            the specified object.
            </summary>
            <param name="target">The object to get the value from.</param>
            <returns>The value stored in the associated field or property.</returns>
        </member>
        <member name="T:Ninject.Core.Infrastructure.Invoker">
            <summary>
            Represents a method that calls another method.
            </summary>
            <param name="target">The object on which to call the associated method.</param>
            <param name="arguments">A collection of arguments to pass to the associated method.</param>
            <returns>The return value of the method.</returns>
        </member>
        <member name="T:Ninject.Core.Infrastructure.Setter">
            <summary>
            Represents a method that sets the value stored in a field or property on
            the specified object.
            </summary>
            <param name="target">The object to get the value from.</param>
            <param name="value">The value to store in the associated field or property.</param>
        </member>
        <member name="T:Ninject.Core.Infrastructure.ExtensionsForICustomAttributeProvider">
            <summary>
            Extension methods that enhance <see cref="T:System.Reflection.ICustomAttributeProvider"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.ExtensionsForICustomAttributeProvider.GetOneAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Gets the first attribute of a specified type that decorates the member.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="member">The member to examine.</param>
            <returns>The first attribute matching the specified type.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.ExtensionsForICustomAttributeProvider.GetOneAttribute(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            Gets the first attribute of a specified type that decorates the member.
            </summary>
            <param name="member">The member to examine.</param>
            <param name="type">The type of attribute to search for.</param>
            <returns>The first attribute matching the specified type.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.ExtensionsForICustomAttributeProvider.GetAllAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Gets an array of attributes matching the specified type that decorate the member.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="member">The member to examine.</param>
            <returns>An array of attributes matching the specified type.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.ExtensionsForICustomAttributeProvider.GetAllAttributes(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            Gets an array of attributes matching the specified type that decorate the member.
            </summary>
            <param name="member">The member to examine.</param>
            <param name="type">The type of attribute to search for.</param>
            <returns>An array of attributes matching the specified type.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.ExtensionsForICustomAttributeProvider.HasAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Determines whether the member is decorated with one or more attributes of the specified type.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="member">The member to examine.</param>
            <returns><see langword="True"/> if the member is decorated with one or more attributes of the type, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.ExtensionsForICustomAttributeProvider.HasAttribute(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            Determines whether the member is decorated with one or more attributes of the specified type.
            </summary>
            <param name="member">The member to examine.</param>
            <param name="type">The type of attribute to search for.</param>
            <returns><see langword="True"/> if the member is decorated with one or more attributes of the type, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.ExtensionsForICustomAttributeProvider.HasMatchingAttribute``1(System.Reflection.ICustomAttributeProvider,``0)">
            <summary>
            Determines whether the member is decorated with an attribute that matches the one provided.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="member">The member to examine.</param>
            <param name="attributeToMatch">The attribute to match against.</param>
            <returns><see langword="True"/> if the member is decorated with a matching attribute, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Ninject.Core.Infrastructure.ExtensionsForMethodBase">
            <summary>
            Contains extension methods for <see cref="T:System.Reflection.MethodBase"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.ExtensionsForMethodBase.GetParameterTypes(System.Reflection.MethodBase)">
            <summary>
            Gets the types of the parameters of the method.
            </summary>
            <param name="method">The method in question.</param>
            <returns>An array containing the types of the method's parameters.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
            <summary>
            Indicates that the decorated method is an extension method. This is here so we can avoid
            a dependency on System.Core, and continue to target .NET 2.0.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.IStrategyChain`2">
            <summary>
            A chain of strategies, owned by the same object, that will be executed in order to
            satisfy the implementation of a procedure.
            </summary>
            <typeparam name="TOwner">The type of object that owns the strategies.</typeparam>
            <typeparam name="TStrategy">The type of strategy stored in the collection.</typeparam>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IStrategyChain`2.Prepend(`1)">
            <summary>
            Adds a strategy to the beginning of the chain.
            </summary>
            <param name="item">The strategy to add.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IStrategyChain`2.Append(`1)">
            <summary>
            Adds a strategy to the end of the chain.
            </summary>
            <param name="item">The strategy to add.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IStrategyChain`2.RemoveAll``1">
            <summary>
            Removes all strategies of a specified type.
            </summary>
            <typeparam name="T">The type of strategies to remove.</typeparam>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IStrategyChain`2.Clear">
            <summary>
            Removes all strategies from the chain.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IStrategyChain`2.Contains(`1)">
            <summary>
            Determines whether the specified strategy exists in the chain.
            </summary>
            <param name="item">The strategy in question.</param>
            <returns><see langword="True"/> if the strategy exists in the chain, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.IStrategyChain`2.Remove(`1)">
            <summary>
            Removes the specified strategy from the chain.
            </summary>
            <param name="item">The strategy to remove.</param>
            <returns><see langword="True"/> if the strategy was removed successfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Ninject.Core.Infrastructure.IStrategyChain`2.Kernel">
            <summary>
            Gets or sets the kernel associated with the collection.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.IStrategyChain`2.Owner">
            <summary>
            Gets or sets the owner of the collection's strategies.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.IStrategyChain`2.Count">
            <summary>
            Gets the count of strategies stored in the collection.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.StrategyChain`2">
            <summary>
            A chain of strategies, owned by the same object, that will be executed in order to
            satisfy the implementation of a procedure.
            </summary>
            <typeparam name="TOwner">The type of object that owns the strategies.</typeparam>
            <typeparam name="TStrategy">The type of strategy stored in the collection.</typeparam>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyChain`2.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyChain`2.#ctor(`0)">
            <summary>
            Creates a new StrategyChain.
            </summary>
            <param name="owner">The owner of the collection's strategies.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyChain`2.Prepend(`1)">
            <summary>
            Adds a strategy to the beginning of the chain.
            </summary>
            <param name="item">The strategy to add.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyChain`2.Append(`1)">
            <summary>
            Adds a strategy to the end of the chain.
            </summary>
            <param name="item">The strategy to add.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyChain`2.RemoveAll``1">
            <summary>
            Removes all strategies of a specified type.
            </summary>
            <typeparam name="T">The type of strategies to remove.</typeparam>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyChain`2.Clear">
            <summary>
            Removes all strategies from the chain.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyChain`2.Contains(`1)">
            <summary>
            Determines whether the specified strategy exists in the chain.
            </summary>
            <param name="item">The strategy in question.</param>
            <returns><see langword="True"/> if the strategy exists in the chain, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyChain`2.Remove(`1)">
            <summary>
            Removes the specified strategy from the chain.
            </summary>
            <param name="item">The strategy to remove.</param>
            <returns><see langword="True"/> if the strategy was removed successfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyChain`2.ConnectItem(`1)">
            <summary>
            Connects a strategy to its environment.
            </summary>
            <param name="item">The strategy to connect.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyChain`2.DisconnectItem(`1)">
            <summary>
            Disconnects a strategy from its environment.
            </summary>
            <param name="item">The strategy to disconnect.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.StrategyChain`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the StrategyChain.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.StrategyChain`2.Kernel">
            <summary>
            Gets or sets the kernel associated with the collection.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.StrategyChain`2.Owner">
            <summary>
            Gets or sets the owner of the collection's strategies.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.StrategyChain`2.Count">
            <summary>
            Gets the count of strategies stored in the collection.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.Multimap`2">
            <summary>
            A data structure that relates multiple values to each key.
            </summary>
            <typeparam name="K">The key type.</typeparam>
            <typeparam name="V">The value type.</typeparam>
        </member>
        <member name="M:Ninject.Core.Infrastructure.Multimap`2.Add(`0,`1)">
            <summary>
            Adds an item.
            </summary>
            <param name="key">The key to store the value under.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.Multimap`2.Remove(`0,`1)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="key">The key the item is stored under.</param>
            <param name="value">The value to remove.</param>
            <returns><see langword="True"/> if the item was removed successfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.Multimap`2.RemoveAll(`0)">
            <summary>
            Removes all items stored under the specified key.
            </summary>
            <param name="key">The key whose items should be removed.</param>
            <returns><see langword="True"/> if the item was removed successfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.Multimap`2.Clear">
            <summary>
            Removes all items stored in the collection.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.Multimap`2.ContainsKey(`0)">
            <summary>
            Determines if any items are stored under the specified key.
            </summary>
            <param name="key">The key in question.</param>
            <returns><see langword="True"/> if there are items stored under the specified key, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.Multimap`2.ContainsValue(`0,`1)">
            <summary>
            Determines if the specified value is stored in the collection.
            </summary>
            <param name="key">The key the value should be stored under.</param>
            <param name="value">The value in question.</param>
            <returns><see langword="True"/> if the item exists in the collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.Multimap`2.ForEach(Ninject.Core.Infrastructure.Action{`0,System.Collections.Generic.List{`1}})">
            <summary>
            Applies the specified action to each key/value pair of the multimap.
            </summary>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.Multimap`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Multimap.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.Multimap`2.Item(`0)">
            <summary>
            Gets the values associated with the specified key.
            </summary>
            <param name="key">The requested key.</param>
            <returns>A list of values associated with the key.</returns>
        </member>
        <member name="P:Ninject.Core.Infrastructure.Multimap`2.Keys">
            <summary>
            Gets a collection containing the keys in the Multimap.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.Multimap`2.Values">
            <summary>
            Gets a collection containing the lists of values in the Multimap.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.Ensure">
            <summary>
            A utility class to help define preconditions for methods.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.Ensure.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified value is <see langword="null"/>.
            </summary>
            <param name="value">The value to test.</param>
            <param name="name">The name of the parameter, which will appear in the exception message.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.Ensure.ArgumentNotNullOrEmptyString(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the specified value is <see langword="null"/>
            or an empty string.
            </summary>
            <param name="value">The value to test.</param>
            <param name="name">The name of the parameter, which will appear in the exception message.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.Ensure.ArgumentNotNullOrEmptyCollection(System.Collections.ICollection,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the specified value is <see langword="null"/>
            or an empty collection.
            </summary>
            <param name="value">The value to test.</param>
            <param name="name">The name of the parameter, which will appear in the exception message.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.Ensure.NotDisposed(Ninject.Core.Infrastructure.IDisposableEx)">
            <summary>
            Throws an exception if the specified object has been disposed.
            </summary>
            <param name="obj">The object in question.</param>
        </member>
        <member name="T:Ninject.Core.Infrastructure.ExceptionThrower">
            <summary>
            Provides utility functions for throwing exceptions.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.ExceptionThrower.RethrowPreservingStackTrace(System.Exception)">
            <summary>
            Re-throws the specified exception, preserving its internal stack trace.
            </summary>
            <param name="ex">The exception to re-throw.</param>
        </member>
        <member name="T:Ninject.Core.Infrastructure.ReflectionDictionaryBuilder">
            <summary>
            Provides a shortcut to creating dictionaries from the properties of anonymous types.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.ReflectionDictionaryBuilder.Create(System.Object)">
            <summary>
            Creates a dictionary from the properties of the specified object. The keys of the dictionary
            will be the names of the object's public 
            </summary>
            <param name="obj">The object to create the dictionary from.</param>
            <returns>The created dictionary.</returns>
        </member>
        <member name="T:Ninject.Core.Infrastructure.Argument">
            <summary>
            Describes a dependency that should be resolved to inject a value into a created instance.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.Argument.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.Argument.#ctor(Ninject.Core.Planning.Targets.ITarget,Ninject.Core.Resolution.IResolver,System.Boolean)">
            <summary>
            Creates a new Argument.
            </summary>
            <param name="target">The argument's injection point.</param>
            <param name="resolver">The argument's dependency marker.</param>
            <param name="optional">A value indicating whether the argument is optional.</param>
        </member>
        <member name="P:Ninject.Core.Infrastructure.Argument.Target">
            <summary>
            Gets or sets the argument's injection point.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.Argument.Resolver">
            <summary>
            Gets or sets the argument's dependency marker.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.Argument.Optional">
            <summary>
            Gets or sets a value indicating whether the argument is optional.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.DynamicMethodFactory">
            <summary>
            A helper class that uses lightweight code generation to create dynamic methods.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DynamicMethodFactory.CreateInvoker(System.Reflection.MethodInfo)">
            <summary>
            Creates a new <see cref="T:Ninject.Core.Infrastructure.Invoker"/> that calls the specified method in a
            late-bound manner.
            </summary>
            <param name="method">The method that the invoker should call.</param>
            <returns>A dynamic invoker that can call the specified method.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DynamicMethodFactory.CreateFactoryMethod(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new <see cref="T:Ninject.Core.Infrastructure.FactoryMethod"/> that calls the specified constructor in a
            late-bound manner.
            </summary>
            <param name="constructor">The constructor that the factory method should call.</param>
            <returns>A dynamic factory method that can call the specified constructor.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DynamicMethodFactory.CreateGetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a new <see cref="T:Ninject.Core.Infrastructure.Getter"/> that gets the value of the specified field in a
            late-bound manner.
            </summary>
            <param name="field">The field that the getter should read from.</param>
            <returns>A dynamic getter that can read from the specified field.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DynamicMethodFactory.CreateGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new <see cref="T:Ninject.Core.Infrastructure.Getter"/> that gets the value of the specified property in a
            late-bound manner.
            </summary>
            <param name="property">The property that the getter should read from.</param>
            <returns>A dynamic getter that can read from the specified property.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DynamicMethodFactory.CreateSetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a new <see cref="T:Ninject.Core.Infrastructure.Setter"/> that sets the value of the specified field in a
            late-bound manner.
            </summary>
            <param name="field">The field that the setter should write to.</param>
            <returns>A dynamic setter that can write to the specified field.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.DynamicMethodFactory.CreateSetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new <see cref="T:Ninject.Core.Infrastructure.Setter"/> that sets the value of the specified property in a
            late-bound manner.
            </summary>
            <param name="property">The property that the setter should write to.</param>
            <returns>A dynamic setter that can write to the specified property.</returns>
        </member>
        <member name="T:Ninject.Core.Infrastructure.InstanceWithContext">
            <summary>
            An activated instance of a service, with the context it was activated in. Used to properly
            release instances for services with non-transient behaviors.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.InstanceWithContext.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.InstanceWithContext.#ctor(System.Object,Ninject.Core.Activation.IContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Infrastructure.InstanceWithContext"/> class.
            </summary>
            <param name="instance">The instance.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Ninject.Core.Infrastructure.InstanceWithContext.Instance">
            <summary>
            The contextualized instance.
            </summary>
        </member>
        <member name="P:Ninject.Core.Infrastructure.InstanceWithContext.Context">
            <summary>
            The context in which the instance was activated.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.PredicateCondition`1">
            <summary>
            A condition that invokes an <see cref="T:System.Predicate`1"/> to determine if the condition matches.
            </summary>
            <typeparam name="T">The type of object the condition evaluates.</typeparam>
        </member>
        <member name="M:Ninject.Core.Infrastructure.PredicateCondition`1.#ctor(System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Infrastructure.PredicateCondition`1"/> class.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Ninject.Core.Infrastructure.PredicateCondition`1.Matches(`0)">
            <summary>
            Determines whether the specified object matches the condition.
            </summary>
            <param name="value">The object to test.</param>
            <returns><see langword="True"/> if the object matches, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Ninject.Core.Infrastructure.StrategyResult">
            <summary>
            Indicates whether the execution of a chain of strategies should continue or stop.
            </summary>
        </member>
        <member name="F:Ninject.Core.Infrastructure.StrategyResult.Proceed">
            <summary>
            Indicates that execution should continue.
            </summary>
        </member>
        <member name="F:Ninject.Core.Infrastructure.StrategyResult.Stop">
            <summary>
            Indicates that execution should stop immediately.
            </summary>
        </member>
        <member name="T:Ninject.Core.Infrastructure.WeakReferenceComparer">
            <summary>
            Compares the targets of two WeakReferences to see if they are the same.
            </summary>
        </member>
        <member name="M:Ninject.Core.Infrastructure.WeakReferenceComparer.Equals(System.WeakReference,System.WeakReference)">
            <summary>
            Determines whether the specified references refer to the same instance.
            </summary>
            <param name="x">The first reference to compare.</param>
            <param name="y">The second reference to compare.</param>
            <returns><see langword="True"/> if the references refer to the same object, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Infrastructure.WeakReferenceComparer.GetHashCode(System.WeakReference)">
            <summary>
            Gets a hash code for the reference.
            </summary>
            <param name="reference">The reference.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Ninject.Core.Injection.DynamicConstructorInjector">
            <summary>
            A constructor injector that uses a dynamically-generated <see cref="T:Ninject.Core.Infrastructure.FactoryMethod"/>
            for invocation.
            </summary>
        </member>
        <member name="T:Ninject.Core.Injection.InjectorBase`1">
            <summary>
            A baseline definition of an injector. This type can be extended to create custom injectors.
            </summary>
            <typeparam name="TMember"></typeparam>
        </member>
        <member name="T:Ninject.Core.Injection.IInjector`1">
            <summary>
            An object that can inject one or more values into the specified member.
            </summary>
            <typeparam name="TMember">The type of member that the injector can inject.</typeparam>
        </member>
        <member name="P:Ninject.Core.Injection.IInjector`1.Member">
            <summary>
            Gets the member associated with the injector.
            </summary>
        </member>
        <member name="M:Ninject.Core.Injection.InjectorBase`1.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Injection.InjectorBase`1.#ctor(`0)">
            <summary>
            Creates a new InjectorBase.
            </summary>
            <param name="member">The member associated with the injector.</param>
        </member>
        <member name="P:Ninject.Core.Injection.InjectorBase`1.Member">
            <summary>
            Gets the member associated with the injector.
            </summary>
        </member>
        <member name="T:Ninject.Core.Injection.IConstructorInjector">
            <summary>
            An injector that can inject constructors.
            </summary>
        </member>
        <member name="M:Ninject.Core.Injection.IConstructorInjector.Invoke(System.Object[])">
            <summary>
            Creates a new instance of a type by calling the injector's constructor.
            </summary>
            <param name="arguments">The arguments to pass to the constructor.</param>
            <returns>A new instance of the type associated with the injector.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.DynamicConstructorInjector.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new DynamicConstructorInjector.
            </summary>
            <param name="member">The constructor that will be injected.</param>
        </member>
        <member name="M:Ninject.Core.Injection.DynamicConstructorInjector.Invoke(System.Object[])">
            <summary>
            Creates a new instance of a type by calling the injector's constructor.
            </summary>
            <param name="arguments">The arguments to pass to the constructor.</param>
            <returns>A new instance of the type associated with the injector.</returns>
        </member>
        <member name="T:Ninject.Core.Injection.DynamicFieldInjector">
            <summary>
            A field injector that uses dynamically-generated <see cref="T:Ninject.Core.Infrastructure.Getter"/> and <see cref="T:Ninject.Core.Infrastructure.Setter"/>
            methods for invocation.
            </summary>
        </member>
        <member name="T:Ninject.Core.Injection.IFieldInjector">
            <summary>
            An injector that can read from and write to fields.
            </summary>
        </member>
        <member name="M:Ninject.Core.Injection.IFieldInjector.Get(System.Object)">
            <summary>
            Gets the value of the field associated with the injector.
            </summary>
            <param name="target">The instance on which the field should be read.</param>
            <returns>The value stored in the field.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.IFieldInjector.Set(System.Object,System.Object)">
            <summary>
            Sets the value of the field associated with the injector.
            </summary>
            <param name="target">The instance on which the field should be written.</param>
            <param name="value">The value to store in the field.</param>
        </member>
        <member name="M:Ninject.Core.Injection.DynamicFieldInjector.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Creates a new DynamicFieldInjector.
            </summary>
            <param name="member">The field that will be read and written.</param>
        </member>
        <member name="M:Ninject.Core.Injection.DynamicFieldInjector.Get(System.Object)">
            <summary>
            Gets the value of the field associated with the injector.
            </summary>
            <param name="target">The instance on which the field should be read.</param>
            <returns>The value stored in the field.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.DynamicFieldInjector.Set(System.Object,System.Object)">
            <summary>
            Sets the value of the field associated with the injector.
            </summary>
            <param name="target">The instance on which the field should be written.</param>
            <param name="value">The value to store in the field.</param>
        </member>
        <member name="T:Ninject.Core.Injection.DynamicInjectorFactory">
            <summary>
            Creates instances of injectors that use generated <see cref="T:System.Reflection.Emit.DynamicMethod"/> objects
            for invocation.
            </summary>
        </member>
        <member name="T:Ninject.Core.Injection.InjectorFactoryBase">
            <summary>
            Creates instances of injectors.
            </summary>
        </member>
        <member name="T:Ninject.Core.Injection.IInjectorFactory">
            <summary>
            Creates instances of injectors.
            </summary>
        </member>
        <member name="M:Ninject.Core.Injection.IInjectorFactory.GetInjector(System.Reflection.ConstructorInfo)">
            <summary>
            Gets an injector for the specified constructor.
            </summary>
            <param name="constructor">The constructor that the injector will invoke.</param>
            <returns>A new injector for the constructor.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.IInjectorFactory.GetInjector(System.Reflection.MethodInfo)">
            <summary>
            Gets an injector for the specified method.
            </summary>
            <param name="method">The method that the injector will invoke.</param>
            <returns>A new injector for the method.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.IInjectorFactory.GetInjector(System.Reflection.PropertyInfo)">
            <summary>
            Gets an injector for the specified property.
            </summary>
            <param name="property">The property that the injector will read and write.</param>
            <returns>A new injector for the property.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.IInjectorFactory.GetInjector(System.Reflection.FieldInfo)">
            <summary>
            Gets an injector for the specified field.
            </summary>
            <param name="field">The field that the injector will read and write.</param>
            <returns>A new injector for the field.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.InjectorFactoryBase.GetInjector(System.Reflection.ConstructorInfo)">
            <summary>
            Gets an injector for the specified constructor.
            </summary>
            <param name="constructor">The constructor that the injector will invoke.</param>
            <returns>A new injector for the constructor.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.InjectorFactoryBase.GetInjector(System.Reflection.MethodInfo)">
            <summary>
            Gets an injector for the specified method.
            </summary>
            <param name="method">The method that the injector will invoke.</param>
            <returns>A new injector for the method.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.InjectorFactoryBase.GetInjector(System.Reflection.PropertyInfo)">
            <summary>
            Gets an injector for the specified property.
            </summary>
            <param name="property">The property that the injector will read and write.</param>
            <returns>A new injector for the property.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.InjectorFactoryBase.GetInjector(System.Reflection.FieldInfo)">
            <summary>
            Gets an injector for the specified field.
            </summary>
            <param name="field">The field that the injector will read and write.</param>
            <returns>A new injector for the field.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.InjectorFactoryBase.CreateInjector(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new constructor injector.
            </summary>
            <param name="constructor">The constructor that the injector will invoke.</param>
            <returns>A new injector for the constructor.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.InjectorFactoryBase.CreateInjector(System.Reflection.MethodInfo)">
            <summary>
            Creates a new method injector.
            </summary>
            <param name="method">The method that the injector will invoke.</param>
            <returns>A new injector for the method.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.InjectorFactoryBase.CreateInjector(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new property injector.
            </summary>
            <param name="property">The property that the injector will read and write.</param>
            <returns>A new injector for the property.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.InjectorFactoryBase.CreateInjector(System.Reflection.FieldInfo)">
            <summary>
            Creates a new field injector.
            </summary>
            <param name="field">The field that the injector will read and write.</param>
            <returns>A new injector for the field.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.DynamicInjectorFactory.CreateInjector(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new constructor injector.
            </summary>
            <param name="constructor">The constructor that the injector will invoke.</param>
            <returns>A new injector for the constructor.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.DynamicInjectorFactory.CreateInjector(System.Reflection.MethodInfo)">
            <summary>
            Creates a new method injector.
            </summary>
            <param name="method">The method that the injector will invoke.</param>
            <returns>A new injector for the method.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.DynamicInjectorFactory.CreateInjector(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new property injector.
            </summary>
            <param name="property">The property that the injector will read and write.</param>
            <returns>A new injector for the property.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.DynamicInjectorFactory.CreateInjector(System.Reflection.FieldInfo)">
            <summary>
            Creates a new field injector.
            </summary>
            <param name="field">The field that the injector will read and write.</param>
            <returns>A new injector for the field.</returns>
        </member>
        <member name="T:Ninject.Core.Injection.DynamicMethodInjector">
            <summary>
            A method injector that uses a dynamically-generated <see cref="T:Ninject.Core.Infrastructure.Invoker"/> for invocation.
            </summary>
        </member>
        <member name="T:Ninject.Core.Injection.IMethodInjector">
            <summary>
            An injector that can inject methods.
            </summary>
        </member>
        <member name="M:Ninject.Core.Injection.IMethodInjector.Invoke(System.Object,System.Object[])">
            <summary>
            Calls the method associated with the injector.
            </summary>
            <param name="target">The instance on which to call the method.</param>
            <param name="arguments">The arguments to pass to the method.</param>
            <returns>The return value of the method.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.DynamicMethodInjector.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a new DynamicMethodInjector.
            </summary>
            <param name="member">The method that will be injected.</param>
        </member>
        <member name="M:Ninject.Core.Injection.DynamicMethodInjector.Invoke(System.Object,System.Object[])">
            <summary>
            Calls the method associated with the injector.
            </summary>
            <param name="target">The instance on which to call the method.</param>
            <param name="arguments">The arguments to pass to the method.</param>
            <returns>The return value of the method.</returns>
        </member>
        <member name="T:Ninject.Core.Injection.DynamicPropertyInjector">
            <summary>
            A property injector that uses dynamically-generated <see cref="T:Ninject.Core.Infrastructure.Getter"/> and <see cref="T:Ninject.Core.Infrastructure.Setter"/>
            methods for invocation.
            </summary>
        </member>
        <member name="T:Ninject.Core.Injection.IPropertyInjector">
            <summary>
            An injector that can read from and write to properties.
            </summary>
        </member>
        <member name="M:Ninject.Core.Injection.IPropertyInjector.Get(System.Object)">
            <summary>
            Gets the value of the property associated with the injector.
            </summary>
            <param name="target">The instance on which the property should be read.</param>
            <returns>The value stored in the property.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.IPropertyInjector.Set(System.Object,System.Object)">
            <summary>
            Sets the value of the property associated with the injector.
            </summary>
            <param name="target">The instance on which the property should be written.</param>
            <param name="value">The value to store in the property.</param>
        </member>
        <member name="M:Ninject.Core.Injection.DynamicPropertyInjector.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new DynamicPropertyInjector.
            </summary>
            <param name="member">The property that will be read and written.</param>
        </member>
        <member name="M:Ninject.Core.Injection.DynamicPropertyInjector.Get(System.Object)">
            <summary>
            Gets the value of the property associated with the injector.
            </summary>
            <param name="target">The instance on which the property should be read.</param>
            <returns>The value stored in the property.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.DynamicPropertyInjector.Set(System.Object,System.Object)">
            <summary>
            Sets the value of the property associated with the injector.
            </summary>
            <param name="target">The instance on which the property should be written.</param>
            <param name="value">The value to store in the property.</param>
        </member>
        <member name="T:Ninject.Core.Injection.ReflectionConstructorInjector">
            <summary>
            A constructor injector that uses reflection for invocation.
            </summary>
        </member>
        <member name="M:Ninject.Core.Injection.ReflectionConstructorInjector.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new DynamicConstructorInjector.
            </summary>
            <param name="member">The constructor that will be injected.</param>
        </member>
        <member name="M:Ninject.Core.Injection.ReflectionConstructorInjector.Invoke(System.Object[])">
            <summary>
            Creates a new instance of a type by calling the injector's constructor.
            </summary>
            <param name="arguments">The arguments to pass to the constructor.</param>
            <returns>A new instance of the type associated with the injector.</returns>
        </member>
        <member name="T:Ninject.Core.Injection.ReflectionFieldInjector">
            <summary>
            A field injector that uses reflection for invocation.
            </summary>
        </member>
        <member name="M:Ninject.Core.Injection.ReflectionFieldInjector.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Creates a new ReflectionFieldInjector.
            </summary>
            <param name="member">The field that will be read and written.</param>
        </member>
        <member name="M:Ninject.Core.Injection.ReflectionFieldInjector.Get(System.Object)">
            <summary>
            Gets the value of the field associated with the injector.
            </summary>
            <param name="target">The instance on which the field should be read.</param>
            <returns>The value stored in the field.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.ReflectionFieldInjector.Set(System.Object,System.Object)">
            <summary>
            Sets the value of the field associated with the injector.
            </summary>
            <param name="target">The instance on which the field should be written.</param>
            <param name="value">The value to store in the field.</param>
        </member>
        <member name="T:Ninject.Core.Injection.ReflectionInjectorFactory">
            <summary>
            Creates instances of injectors that use reflection for invocation.
            </summary>
        </member>
        <member name="M:Ninject.Core.Injection.ReflectionInjectorFactory.CreateInjector(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new constructor injector.
            </summary>
            <param name="constructor">The constructor that the injector will invoke.</param>
            <returns>A new injector for the constructor.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.ReflectionInjectorFactory.CreateInjector(System.Reflection.MethodInfo)">
            <summary>
            Creates a new method injector.
            </summary>
            <param name="method">The method that the injector will invoke.</param>
            <returns>A new injector for the method.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.ReflectionInjectorFactory.CreateInjector(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new property injector.
            </summary>
            <param name="property">The property that the injector will read and write.</param>
            <returns>A new injector for the property.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.ReflectionInjectorFactory.CreateInjector(System.Reflection.FieldInfo)">
            <summary>
            Creates a new field injector.
            </summary>
            <param name="field">The field that the injector will read and write.</param>
            <returns>A new injector for the field.</returns>
        </member>
        <member name="T:Ninject.Core.Injection.ReflectionMethodInjector">
            <summary>
            A method injector that uses reflection for invocation.
            </summary>
        </member>
        <member name="M:Ninject.Core.Injection.ReflectionMethodInjector.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a new ReflectionMethodInjector.
            </summary>
            <param name="member">The method that will be injected.</param>
        </member>
        <member name="M:Ninject.Core.Injection.ReflectionMethodInjector.Invoke(System.Object,System.Object[])">
            <summary>
            Calls the method associated with the injector.
            </summary>
            <param name="target">The instance on which to call the method.</param>
            <param name="arguments">The arguments to pass to the method.</param>
            <returns>The return value of the method.</returns>
        </member>
        <member name="T:Ninject.Core.Injection.ReflectionPropertyInjector">
            <summary>
            A property injector that uses reflection for invocation.
            </summary>
        </member>
        <member name="M:Ninject.Core.Injection.ReflectionPropertyInjector.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new ReflectionPropertyInjector.
            </summary>
            <param name="member">The property that will be read and written.</param>
        </member>
        <member name="M:Ninject.Core.Injection.ReflectionPropertyInjector.Get(System.Object)">
            <summary>
            Gets the value of the property associated with the injector.
            </summary>
            <param name="target">The instance on which the property should be read.</param>
            <returns>The value stored in the property.</returns>
        </member>
        <member name="M:Ninject.Core.Injection.ReflectionPropertyInjector.Set(System.Object,System.Object)">
            <summary>
            Sets the value of the property associated with the injector.
            </summary>
            <param name="target">The instance on which the property should be written.</param>
            <param name="value">The value to store in the property.</param>
        </member>
        <member name="T:Ninject.Core.Interception.InvocationBase">
            <summary>
            A baseline definition of an invocation.
            </summary>
        </member>
        <member name="T:Ninject.Core.Interception.IInvocation">
            <summary>
            Describes an executable invocation.
            </summary>
        </member>
        <member name="M:Ninject.Core.Interception.IInvocation.Proceed">
            <summary>
            Continues the invocation, either by invoking the next interceptor in the chain, or
            if there are no more interceptors, calling the target method.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.IInvocation.Request">
            <summary>
            Gets the request, which describes the method call.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.IInvocation.Interceptors">
            <summary>
            Gets the chain of interceptors that will be executed before the target method is called.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.IInvocation.ReturnValue">
            <summary>
            Gets or sets the return value for the method.
            </summary>
        </member>
        <member name="M:Ninject.Core.Interception.InvocationBase.#ctor(Ninject.Core.Interception.IRequest,System.Collections.Generic.IEnumerable{Ninject.Core.IInterceptor})">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Interception.InvocationBase"/> class.
            </summary>
            <param name="request">The request, which describes the method call.</param>
            <param name="interceptors">The chain of interceptors that will be executed before the target method is called.</param>
        </member>
        <member name="M:Ninject.Core.Interception.InvocationBase.Proceed">
            <summary>
            Continues the invocation, either by invoking the next interceptor in the chain, or
            if there are no more interceptors, calling the target method.
            </summary>
        </member>
        <member name="M:Ninject.Core.Interception.InvocationBase.CallTargetMethod">
            <summary>
            Calls the target method described by the request.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.InvocationBase.Request">
            <summary>
            Gets the request, which describes the method call.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.InvocationBase.Interceptors">
            <summary>
            Gets the chain of interceptors that will be executed before the target method is called.
            </summary>
            <value></value>
        </member>
        <member name="P:Ninject.Core.Interception.InvocationBase.ReturnValue">
            <summary>
            Gets or sets the return value for the method.
            </summary>
        </member>
        <member name="T:Ninject.Core.Interception.StandardInvocation">
            <summary>
            An implementation of an invocation which uses an <see cref="T:Ninject.Core.Injection.IMethodInjector"/> to call
            the target method.
            </summary>
        </member>
        <member name="M:Ninject.Core.Interception.StandardInvocation.#ctor(Ninject.Core.Interception.IRequest,Ninject.Core.Injection.IMethodInjector,System.Collections.Generic.IEnumerable{Ninject.Core.IInterceptor})">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Interception.StandardInvocation"/> class.
            </summary>
            <param name="request">The request, which describes the method call.</param>
            <param name="injector">The injector that will be used to call the target method.</param>
            <param name="interceptors">The chain of interceptors that will be executed before the target method is called.</param>
        </member>
        <member name="M:Ninject.Core.Interception.StandardInvocation.CallTargetMethod">
            <summary>
            Calls the target method described by the request.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.StandardInvocation.Injector">
            <summary>
            Gets the injector that will be used to call the target method.
            </summary>
        </member>
        <member name="T:Ninject.Core.Interception.IProxyFactory">
            <summary>
            Creates proxies for activated instances to allow method calls on them to be intercepted.
            </summary>
        </member>
        <member name="M:Ninject.Core.Interception.IProxyFactory.Wrap(Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Wraps the specified instance in a proxy.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance to wrap.</param>
            <returns>A proxy that wraps the instance.</returns>
        </member>
        <member name="M:Ninject.Core.Interception.IProxyFactory.Unwrap(Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Unwraps the specified proxied instance.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="proxy">The proxied instance to unwrap.</param>
            <returns>The unwrapped instance.</returns>
        </member>
        <member name="T:Ninject.Core.Interception.ProxyFactoryBase">
            <summary>
            A baseline definition of a proxy factory.
            </summary>
        </member>
        <member name="M:Ninject.Core.Interception.ProxyFactoryBase.Wrap(Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Wraps the specified instance in a proxy.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance to wrap.</param>
            <returns>A proxy that wraps the instance.</returns>
        </member>
        <member name="M:Ninject.Core.Interception.ProxyFactoryBase.Unwrap(Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Unwraps the specified proxied instance.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="proxy">The proxied instance to unwrap.</param>
            <returns>The unwrapped instance.</returns>
        </member>
        <member name="T:Ninject.Core.Interception.IInterceptorRegistry">
            <summary>
            Collects interceptors defined for methods.
            </summary>
        </member>
        <member name="M:Ninject.Core.Interception.IInterceptorRegistry.RegisterStatic(System.Type,System.Int32,System.Reflection.MethodInfo)">
            <summary>
            Registers a static interceptor, which affects only a single method.
            </summary>
            <param name="type">The type of interceptor that will be created.</param>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="method">The method that should be intercepted.</param>
        </member>
        <member name="M:Ninject.Core.Interception.IInterceptorRegistry.RegisterStatic(Ninject.Core.Interception.InterceptorFactoryMethod,System.Int32,System.Reflection.MethodInfo)">
            <summary>
            Registers a static interceptor, which affects only a single method.
            </summary>
            <param name="factoryMethod">The method that should be called to create the interceptor.</param>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="method">The method that should be intercepted.</param>
        </member>
        <member name="M:Ninject.Core.Interception.IInterceptorRegistry.RegisterDynamic(System.Type,System.Int32,Ninject.Core.ICondition{Ninject.Core.Interception.IRequest})">
            <summary>
            Registers a dynamic interceptor, whose conditions are tested when a request is
            received, to determine whether they affect the current request.
            </summary>
            <param name="type">The type of interceptor that will be created.</param>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="condition">The condition that will be evaluated.</param>
        </member>
        <member name="M:Ninject.Core.Interception.IInterceptorRegistry.RegisterDynamic(Ninject.Core.Interception.InterceptorFactoryMethod,System.Int32,Ninject.Core.ICondition{Ninject.Core.Interception.IRequest})">
            <summary>
            Registers a dynamic interceptor, whose conditions are tested when a request is
            received, to determine whether they affect the current request.
            </summary>
            <param name="factoryMethod">The method that should be called to create the interceptor.</param>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="condition">The condition that will be evaluated.</param>
        </member>
        <member name="M:Ninject.Core.Interception.IInterceptorRegistry.GetInterceptors(Ninject.Core.Interception.IRequest)">
            <summary>
            Gets the interceptors that should be invoked for the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns>A collection of interceptors, ordered by the priority in which they should be invoked.</returns>
        </member>
        <member name="P:Ninject.Core.Interception.IInterceptorRegistry.HasDynamicInterceptors">
            <summary>
            Gets a value indicating whether one or more dynamic interceptors have been registered.
            </summary>
        </member>
        <member name="T:Ninject.Core.Interception.InterceptorRegistration">
            <summary>
            An interceptor registration.
            </summary>
        </member>
        <member name="M:Ninject.Core.Interception.InterceptorRegistration.#ctor(Ninject.Core.Interception.InterceptorFactoryMethod,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Interception.InterceptorRegistration"/> class.
            </summary>
            <param name="factoryMethod">The method that should be called to create the interceptor.</param>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
        </member>
        <member name="M:Ninject.Core.Interception.InterceptorRegistration.#ctor(Ninject.Core.Interception.InterceptorFactoryMethod,System.Int32,Ninject.Core.ICondition{Ninject.Core.Interception.IRequest})">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Interception.InterceptorRegistration"/> class.
            </summary>
            <param name="factoryMethod">The method that should be called to create the interceptor..</param>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="condition">The condition that should be evaluated.</param>
        </member>
        <member name="P:Ninject.Core.Interception.InterceptorRegistration.FactoryMethod">
            <summary>
            Gets the method that should be called to create the interceptor.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.InterceptorRegistration.Condition">
            <summary>
            Gets the condition that should be evaluated, if this registration is dynamic.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:Ninject.Core.Interception.InterceptorRegistration.Order">
            <summary>
            Gets the order of precedence that the interceptor should be called in.
            </summary>
        </member>
        <member name="T:Ninject.Core.Interception.StandardInterceptorRegistry">
            <summary>
            The stock definition of an interceptor registry.
            </summary>
        </member>
        <member name="M:Ninject.Core.Interception.StandardInterceptorRegistry.RegisterStatic(System.Type,System.Int32,System.Reflection.MethodInfo)">
            <summary>
            Registers a static interceptor, which affects only a single method.
            </summary>
            <param name="type">The type of interceptor that will be created.</param>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="method">The method that should be intercepted.</param>
        </member>
        <member name="M:Ninject.Core.Interception.StandardInterceptorRegistry.RegisterStatic(Ninject.Core.Interception.InterceptorFactoryMethod,System.Int32,System.Reflection.MethodInfo)">
            <summary>
            Registers a static interceptor, which affects only a single method.
            </summary>
            <param name="factoryMethod">The method that should be called to create the interceptor.</param>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="method">The method that should be intercepted.</param>
        </member>
        <member name="M:Ninject.Core.Interception.StandardInterceptorRegistry.RegisterDynamic(System.Type,System.Int32,Ninject.Core.ICondition{Ninject.Core.Interception.IRequest})">
            <summary>
            Registers a dynamic interceptor, whose conditions are tested when a request is
            received, to determine whether they affect the current request.
            </summary>
            <param name="type">The type of interceptor that will be created.</param>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="condition">The condition that will be evaluated.</param>
        </member>
        <member name="M:Ninject.Core.Interception.StandardInterceptorRegistry.RegisterDynamic(Ninject.Core.Interception.InterceptorFactoryMethod,System.Int32,Ninject.Core.ICondition{Ninject.Core.Interception.IRequest})">
            <summary>
            Registers a dynamic interceptor, whose conditions are tested when a request is
            received, to determine whether they affect the current request.
            </summary>
            <param name="factoryMethod">The method that should be called to create the interceptor.</param>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="condition">The condition that will be evaluated.</param>
        </member>
        <member name="M:Ninject.Core.Interception.StandardInterceptorRegistry.GetInterceptors(Ninject.Core.Interception.IRequest)">
            <summary>
            Gets the interceptors that should be invoked for the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns>A collection of interceptors, ordered by the priority in which they should be invoked.</returns>
        </member>
        <member name="P:Ninject.Core.Interception.StandardInterceptorRegistry.HasDynamicInterceptors">
            <summary>
            Gets a value indicating whether one or more dynamic interceptors have been registered.
            </summary>
        </member>
        <member name="T:Ninject.Core.Interception.IRequest">
            <summary>
            Describes a method call on a proxied contextualized instance.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.IRequest.Kernel">
            <summary>
            Gets the kernel that created the target instance.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.IRequest.Context">
            <summary>
            Gets the context in which the target instance was activated.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.IRequest.Target">
            <summary>
            Gets the target instance.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.IRequest.Method">
            <summary>
            Gets the method that will be called on the target instance.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.IRequest.Arguments">
            <summary>
            Gets the arguments to the method.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.IRequest.GenericArguments">
            <summary>
            Gets the generic type arguments for the method.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.IRequest.HasGenericArguments">
            <summary>
            Gets a value indicating whether the request has generic arguments.
            </summary>
        </member>
        <member name="T:Ninject.Core.Interception.IRequestFactory">
            <summary>
            Creates <see cref="T:Ninject.Core.Interception.IRequest"/>s, which describe method calls.
            </summary>
        </member>
        <member name="M:Ninject.Core.Interception.IRequestFactory.Create(Ninject.Core.Activation.IContext,System.Object,System.Reflection.MethodInfo,System.Object[],System.Type[])">
            <summary>
            Creates a request representing the specified method call.
            </summary>
            <param name="context">The context in which the target instance was activated.</param>
            <param name="target">The target instance.</param>
            <param name="method">The method that will be called on the target instance.</param>
            <param name="arguments">The arguments to the method.</param>
            <param name="genericArguments">The generic type arguments for the method.</param>
            <returns>The newly-created request.</returns>
        </member>
        <member name="T:Ninject.Core.Interception.StandardRequest">
            <summary>
            The stock implementation of a request.
            </summary>
        </member>
        <member name="M:Ninject.Core.Interception.StandardRequest.#ctor(Ninject.Core.Activation.IContext,System.Object,System.Reflection.MethodInfo,System.Object[],System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Interception.StandardRequest"/> class.
            </summary>
            <param name="context">The context in which the target instance was activated.</param>
            <param name="target">The target instance.</param>
            <param name="method">The method that will be called on the target instance.</param>
            <param name="arguments">The arguments to the method.</param>
            <param name="genericArguments">The generic type arguments for the method.</param>
        </member>
        <member name="P:Ninject.Core.Interception.StandardRequest.Kernel">
            <summary>
            Gets the kernel that created the target instance.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.StandardRequest.Context">
            <summary>
            Gets the context in which the target instance was activated.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.StandardRequest.Target">
            <summary>
            Gets the target instance.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.StandardRequest.Method">
            <summary>
            Gets the method that will be called on the target instance.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.StandardRequest.Arguments">
            <summary>
            Gets the arguments to the method.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.StandardRequest.GenericArguments">
            <summary>
            Gets the generic type arguments for the method.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.StandardRequest.HasGenericArguments">
            <summary>
            Gets a value indicating whether the request has generic arguments.
            </summary>
        </member>
        <member name="T:Ninject.Core.Interception.StandardRequestFactory">
            <summary>
            The stock definition of a <see cref="T:Ninject.Core.Interception.IRequestFactory"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Interception.StandardRequestFactory.Create(Ninject.Core.Activation.IContext,System.Object,System.Reflection.MethodInfo,System.Object[],System.Type[])">
            <summary>
            Creates a request representing the specified method call.
            </summary>
            <param name="context">The context in which the target instance was activated.</param>
            <param name="target">The target instance.</param>
            <param name="method">The method that will be called on the target instance.</param>
            <param name="arguments">The arguments to the method.</param>
            <param name="genericArguments">The generic type arguments for the method.</param>
            <returns>The newly-created request.</returns>
        </member>
        <member name="T:Ninject.Core.Interception.IWrapper">
            <summary>
            Contains a contextualized instance and can be used to create executable invocations.
            </summary>
        </member>
        <member name="M:Ninject.Core.Interception.IWrapper.CreateInvocation(Ninject.Core.Interception.IRequest)">
            <summary>
            Creates an executable invocation for the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns>An executable invocation representing the specified request.</returns>
        </member>
        <member name="P:Ninject.Core.Interception.IWrapper.Kernel">
            <summary>
            Gets the kernel associated with the wrapper.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.IWrapper.Context">
            <summary>
            Gets the context in which the wrapper was created.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.IWrapper.Instance">
            <summary>
            Gets or sets the wrapped instance.
            </summary>
        </member>
        <member name="T:Ninject.Core.Interception.StandardWrapper">
            <summary>
            Defines an interception wrapper, which contains a contextualized instance and can be
            used to create executable invocations.
            </summary>
        </member>
        <member name="M:Ninject.Core.Interception.StandardWrapper.#ctor(Ninject.Core.IKernel,Ninject.Core.Activation.IContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Interception.StandardWrapper"/> class.
            </summary>
            <param name="kernel">The kernel associated with the wrapper.</param>
            <param name="context">The context in which the instance was activated.</param>
        </member>
        <member name="M:Ninject.Core.Interception.StandardWrapper.#ctor(Ninject.Core.IKernel,Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Interception.StandardWrapper"/> class.
            </summary>
            <param name="kernel">The kernel associated with the wrapper.</param>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The wrapped instance.</param>
        </member>
        <member name="M:Ninject.Core.Interception.StandardWrapper.CreateInvocation(Ninject.Core.Interception.IRequest)">
            <summary>
            Creates an executable invocation for the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns>An executable invocation representing the specified request.</returns>
        </member>
        <member name="P:Ninject.Core.Interception.StandardWrapper.Kernel">
            <summary>
            Gets the kernel associated with the wrapper.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.StandardWrapper.Context">
            <summary>
            Gets the context in which the wrapper was created.
            </summary>
        </member>
        <member name="P:Ninject.Core.Interception.StandardWrapper.Instance">
            <summary>
            Gets or sets the wrapped instance.
            </summary>
        </member>
        <member name="T:Ninject.Core.IInterceptor">
            <summary>
            Intercepts a method call on an activated instance.
            </summary>
        </member>
        <member name="M:Ninject.Core.IInterceptor.Intercept(Ninject.Core.Interception.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="invocation">The invocation to intercept.</param>
        </member>
        <member name="T:Ninject.Core.Interception.InterceptorFactoryMethod">
            <summary>
            A callback that creates an interceptor.
            </summary>
        </member>
        <member name="T:Ninject.Core.SimpleInterceptor">
            <summary>
            A simple definition of an interceptor, which can take action both before and after
            the invocation proceeds.
            </summary>
        </member>
        <member name="M:Ninject.Core.SimpleInterceptor.Intercept(Ninject.Core.Interception.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="invocation">The invocation to intercept.</param>
        </member>
        <member name="M:Ninject.Core.SimpleInterceptor.BeforeInvoke(Ninject.Core.Interception.IInvocation)">
            <summary>
            Takes some action before the invocation proceeds.
            </summary>
            <param name="invocation">The invocation that is being intercepted.</param>
        </member>
        <member name="M:Ninject.Core.SimpleInterceptor.AfterInvoke(Ninject.Core.Interception.IInvocation)">
            <summary>
            Takes some action after the invocation proceeds.
            </summary>
            <param name="invocation">The invocation that is being intercepted.</param>
        </member>
        <member name="T:Ninject.Core.IContextAware">
            <summary>
            Defines a type that wants to be informed of the context in which it is activated.
            </summary>
        </member>
        <member name="M:Ninject.Core.IContextAware.Initialize(Ninject.Core.Activation.IContext)">
            <summary>
            Initializes the instance. This method is called after the activation chain is complete.
            </summary>
            <param name="context">The context in which the instance is being activated.</param>
        </member>
        <member name="T:Ninject.Core.IInitializable">
            <summary>
            Defines a type that expects further initialization after its instances are activated.
            </summary>
        </member>
        <member name="M:Ninject.Core.IInitializable.Initialize">
            <summary>
            Initializes the instance. This method is called after the activation chain is complete.
            </summary>
        </member>
        <member name="T:Ninject.Core.IStartable">
            <summary>
            Defines a type that can be started and stopped.
            </summary>
        </member>
        <member name="M:Ninject.Core.IStartable.Start">
            <summary>
            Starts the instance.
            </summary>
        </member>
        <member name="M:Ninject.Core.IStartable.Stop">
            <summary>
            Stops the instance.
            </summary>
        </member>
        <member name="T:Ninject.Core.Logging.Formatters.IMessageFormatter">
            <summary>
            Formats textual log messages.
            </summary>
        </member>
        <member name="M:Ninject.Core.Logging.Formatters.IMessageFormatter.Format(Ninject.Core.Logging.ILogger,Ninject.Core.Logging.LogSeverity,System.String)">
            <summary>
            Formats the specified message.
            </summary>
            <param name="logger">The logger that is logging the message.</param>
            <param name="severity">The message's severity.</param>
            <param name="message">The message to log.</param>
            <returns>The formatted message.</returns>
        </member>
        <member name="M:Ninject.Core.Logging.Formatters.IMessageFormatter.Format(Ninject.Core.Logging.ILogger,Ninject.Core.Logging.LogSeverity,System.String,System.Exception)">
            <summary>
            Formats the specified message.
            </summary>
            <param name="logger">The logger that is logging the message.</param>
            <param name="severity">The message's severity.</param>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to log.</param>
            <returns>The formatted message.</returns>
        </member>
        <member name="T:Ninject.Core.Logging.Formatters.StandardMessageFormatter">
            <summary>
            Formats textual log messages in the default manner.
            </summary>
        </member>
        <member name="M:Ninject.Core.Logging.Formatters.StandardMessageFormatter.Format(Ninject.Core.Logging.ILogger,Ninject.Core.Logging.LogSeverity,System.String)">
            <summary>
            Formats the specified message.
            </summary>
            <param name="logger">The logger that is logging the message.</param>
            <param name="severity">The message's severity.</param>
            <param name="message">The message to log.</param>
            <returns>The formatted message.</returns>
        </member>
        <member name="M:Ninject.Core.Logging.Formatters.StandardMessageFormatter.Format(Ninject.Core.Logging.ILogger,Ninject.Core.Logging.LogSeverity,System.String,System.Exception)">
            <summary>
            Formats the specified message.
            </summary>
            <param name="logger">The logger that is logging the message.</param>
            <param name="severity">The message's severity.</param>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to log.</param>
            <returns>The formatted message.</returns>
        </member>
        <member name="T:Ninject.Core.Logging.NullLogger">
            <summary>
            A null implementation of a logger, which sends messages to the bit bucket. :)
            </summary>
        </member>
        <member name="T:Ninject.Core.Logging.ILogger">
            <summary>
            Logs messages to a customizable sink.
            </summary>
        </member>
        <member name="M:Ninject.Core.Logging.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified message with Debug severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.ILogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Debug severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.ILogger.Info(System.String,System.Object[])">
            <summary>
            Logs the specified message with Info severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.ILogger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Info severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.ILogger.Warn(System.String,System.Object[])">
            <summary>
            Logs the specified message with Warn severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.ILogger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Warn severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.ILogger.Error(System.String,System.Object[])">
            <summary>
            Logs the specified message with Error severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.ILogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Error severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Logs the specified message with Fatal severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.ILogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Fatal severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="P:Ninject.Core.Logging.ILogger.Type">
            <summary>
            Gets the type associated with the logger.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.ILogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether messages with Debug severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.ILogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether messages with Info severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.ILogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether messages with Warn severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.ILogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether messages with Error severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.ILogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether messages with Fatal severity should be logged.
            </summary>
        </member>
        <member name="F:Ninject.Core.Logging.NullLogger.Instance">
            <summary>
            The singleton instance of <see cref="T:Ninject.Core.Logging.NullLogger"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Logging.NullLogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified message with Debug severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.NullLogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Debug severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.NullLogger.Info(System.String,System.Object[])">
            <summary>
            Logs the specified message with Info severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.NullLogger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Info severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.NullLogger.Warn(System.String,System.Object[])">
            <summary>
            Logs the specified message with Warn severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.NullLogger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Warn severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.NullLogger.Error(System.String,System.Object[])">
            <summary>
            Logs the specified message with Error severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.NullLogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Error severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.NullLogger.Fatal(System.String,System.Object[])">
            <summary>
            Logs the specified message with Fatal severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.NullLogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Fatal severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="P:Ninject.Core.Logging.NullLogger.Type">
            <summary>
            Gets the type associated with the logger.
            </summary>
            <value></value>
        </member>
        <member name="P:Ninject.Core.Logging.NullLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether messages with Debug severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.NullLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether messages with Info severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.NullLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether messages with Warn severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.NullLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether messages with Error severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.NullLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether messages with Fatal severity should be logged.
            </summary>
        </member>
        <member name="T:Ninject.Core.Logging.NullLoggerFactory">
            <summary>
            An implementation of <see cref="T:Ninject.Core.Logging.ILoggerFactory"/> that just returns the singleton instance
            of <see cref="T:Ninject.Core.Logging.NullLogger"/>.
            </summary>
        </member>
        <member name="T:Ninject.Core.Logging.ILoggerFactory">
            <summary>
            Creates and manages <see cref="T:Ninject.Core.Logging.ILogger"/> instances.
            </summary>
        </member>
        <member name="M:Ninject.Core.Logging.ILoggerFactory.GetLogger(System.Type)">
            <summary>
            Gets the logger for the specified type, creating it if necessary.
            </summary>
            <param name="type">The type to create the logger for.</param>
            <returns>The newly-created logger.</returns>
        </member>
        <member name="M:Ninject.Core.Logging.NullLoggerFactory.GetLogger(System.Type)">
            <summary>
            Creates a logger for the specified type.
            </summary>
            <param name="type">The type to create the logger for.</param>
            <returns>The newly-created logger.</returns>
        </member>
        <member name="T:Ninject.Core.Logging.ConsoleLoggerFactory">
            <summary>
            A logger factory that creates <see cref="T:Ninject.Core.Logging.TextWriterLogger"/> that write to <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="T:Ninject.Core.Logging.LoggerFactoryBase">
            <summary>
            A baseline definition of a logger factory, which tracks loggers as flyweights by type.
            Custom logger factories should generally extend this type.
            </summary>
        </member>
        <member name="M:Ninject.Core.Logging.LoggerFactoryBase.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Logging.LoggerFactoryBase.GetLogger(System.Type)">
            <summary>
            Gets the logger for the specified type, creating it if necessary.
            </summary>
            <param name="type">The type to create the logger for.</param>
            <returns>The newly-created logger.</returns>
        </member>
        <member name="M:Ninject.Core.Logging.LoggerFactoryBase.CreateLogger(System.Type)">
            <summary>
            Creates a logger for the specified type.
            </summary>
            <param name="type">The type to create the logger for.</param>
            <returns>The newly-created logger.</returns>
        </member>
        <member name="M:Ninject.Core.Logging.ConsoleLoggerFactory.CreateLogger(System.Type)">
            <summary>
            Creates a logger for the specified type.
            </summary>
            <param name="type">The type to create the logger for.</param>
            <returns>The newly-created logger.</returns>
        </member>
        <member name="T:Ninject.Core.Logging.TextWriterLogger">
            <summary>
            Writes log messages to a text writer.
            </summary>
        </member>
        <member name="T:Ninject.Core.Logging.LoggerBase">
            <summary>
            A baseline definition of a logger.
            </summary>
        </member>
        <member name="M:Ninject.Core.Logging.LoggerBase.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Logging.LoggerBase"/> class.
            </summary>
            <param name="type">The type to associate with the logger.</param>
        </member>
        <member name="M:Ninject.Core.Logging.LoggerBase.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified message with Debug severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.LoggerBase.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Debug severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.LoggerBase.Info(System.String,System.Object[])">
            <summary>
            Logs the specified message with Info severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.LoggerBase.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Info severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.LoggerBase.Warn(System.String,System.Object[])">
            <summary>
            Logs the specified message with Warn severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.LoggerBase.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Warn severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.LoggerBase.Error(System.String,System.Object[])">
            <summary>
            Logs the specified message with Error severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.LoggerBase.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Error severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.LoggerBase.Fatal(System.String,System.Object[])">
            <summary>
            Logs the specified message with Fatal severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.LoggerBase.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Fatal severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="P:Ninject.Core.Logging.LoggerBase.Type">
            <summary>
            Gets the type associated with the logger.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.LoggerBase.IsDebugEnabled">
            <summary>
            Gets a value indicating whether messages with Debug severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.LoggerBase.IsInfoEnabled">
            <summary>
            Gets a value indicating whether messages with Info severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.LoggerBase.IsWarnEnabled">
            <summary>
            Gets a value indicating whether messages with Warn severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.LoggerBase.IsErrorEnabled">
            <summary>
            Gets a value indicating whether messages with Error severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.LoggerBase.IsFatalEnabled">
            <summary>
            Gets a value indicating whether messages with Fatal severity should be logged.
            </summary>
        </member>
        <member name="M:Ninject.Core.Logging.TextWriterLogger.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Logging.TextWriterLogger.#ctor(System.Type,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Logging.TextWriterLogger"/> class.
            </summary>
            <param name="type">The type associated with the logger.</param>
            <param name="writer">The writer to write to.</param>
        </member>
        <member name="M:Ninject.Core.Logging.TextWriterLogger.#ctor(System.Type,System.IO.TextWriter,Ninject.Core.Logging.Formatters.IMessageFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Logging.TextWriterLogger"/> class.
            </summary>
            <param name="type">The type associated with the logger.</param>
            <param name="writer">The writer to write to.</param>
            <param name="formatter">The formatter to use to format log messages.</param>
        </member>
        <member name="M:Ninject.Core.Logging.TextWriterLogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified message with Debug severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.TextWriterLogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Debug severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.TextWriterLogger.Info(System.String,System.Object[])">
            <summary>
            Logs the specified message with Info severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.TextWriterLogger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Info severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.TextWriterLogger.Warn(System.String,System.Object[])">
            <summary>
            Logs the specified message with Warn severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.TextWriterLogger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Warn severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.TextWriterLogger.Error(System.String,System.Object[])">
            <summary>
            Logs the specified message with Error severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.TextWriterLogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Error severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.TextWriterLogger.Fatal(System.String,System.Object[])">
            <summary>
            Logs the specified message with Fatal severity.
            </summary>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.TextWriterLogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified exception with Fatal severity.
            </summary>
            <param name="exception">The exception to log.</param>
            <param name="format">The message or format template.</param>
            <param name="args">Any arguments required for the format template.</param>
        </member>
        <member name="M:Ninject.Core.Logging.TextWriterLogger.WriteMessage(Ninject.Core.Logging.LogSeverity,System.String,System.Object[])">
            <summary>
            Writes the specified message to the stream.
            </summary>
            <param name="severity">The severity of the message.</param>
            <param name="format">The message format.</param>
            <param name="args">Arguments to the message format.</param>
        </member>
        <member name="M:Ninject.Core.Logging.TextWriterLogger.WriteMessage(Ninject.Core.Logging.LogSeverity,System.Exception,System.String,System.Object[])">
            <summary>
            Writes the specified message to the stream.
            </summary>
            <param name="severity">The severity of the message.</param>
            <param name="exception">The exception to log.</param>
            <param name="format">The message format.</param>
            <param name="args">Arguments to the message format.</param>
        </member>
        <member name="P:Ninject.Core.Logging.TextWriterLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether messages with Debug severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.TextWriterLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether messages with Info severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.TextWriterLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether messages with Warn severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.TextWriterLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether messages with Error severity should be logged.
            </summary>
        </member>
        <member name="P:Ninject.Core.Logging.TextWriterLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether messages with Fatal severity should be logged.
            </summary>
        </member>
        <member name="T:Ninject.Core.Logging.LogSeverity">
            <summary>
            Represents the severity of a log message.
            </summary>
        </member>
        <member name="F:Ninject.Core.Logging.LogSeverity.Debug">
            <summary>
            Indicates that the log message is for debugging purposes only.
            </summary>
        </member>
        <member name="F:Ninject.Core.Logging.LogSeverity.Info">
            <summary>
            Indicates that the log message is informational.
            </summary>
        </member>
        <member name="F:Ninject.Core.Logging.LogSeverity.Warn">
            <summary>
            Indicates that the log message is a warning.
            </summary>
        </member>
        <member name="F:Ninject.Core.Logging.LogSeverity.Error">
            <summary>
            Indicates that the log message is a recoverable error.
            </summary>
        </member>
        <member name="F:Ninject.Core.Logging.LogSeverity.Fatal">
            <summary>
            Indicates that the log message is a fatal error.
            </summary>
        </member>
        <member name="T:Ninject.Core.AutoModule">
            <summary>
            A module that scans an assembly for types decorated with <see cref="T:Ninject.Core.ServiceAttribute"/>s,
            and registers bindings for them.
            </summary>
        </member>
        <member name="T:Ninject.Core.StandardModule">
            <summary>
            The standard definition of a module. Most application modules should extend this type.
            </summary>
        </member>
        <member name="T:Ninject.Core.ModuleBase`1">
            <summary>
            The baseline definition of a kernel module. This type should not generally be used directly
            by application modules; instead, they should extend the <see cref="T:Ninject.Core.StandardModule"/> type.
            </summary>
            <typeparam name="TBinder">The type of binder to use in the module.</typeparam>
        </member>
        <member name="T:Ninject.Core.IModule">
            <summary>
            A kernel module, which represents a collection of bindings that make up a unit of the
            application. Application modules should generally extend <see cref="T:Ninject.Core.StandardModule"/>
            to benefit from a binding EDSL, but they may also opt to implement this interface instead.
            </summary>
        </member>
        <member name="M:Ninject.Core.IModule.BeforeLoad">
            <summary>
            Executes before the module is loaded into the kernel. Can be used to connect component
            dependencies.
            </summary>
        </member>
        <member name="M:Ninject.Core.IModule.Load">
            <summary>
            Loads the module into the kernel.
            </summary>
        </member>
        <member name="M:Ninject.Core.IModule.AfterLoad">
            <summary>
            Executes after the module has been loaded into the kernel.
            </summary>
        </member>
        <member name="P:Ninject.Core.IModule.Kernel">
            <summary>
            Gets or sets the kernel associated with the module.
            </summary>
        </member>
        <member name="P:Ninject.Core.IModule.Name">
            <summary>
            Gets the name of the module.
            </summary>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.BeforeLoad">
            <summary>
            Prepares the module for being loaded. Can be used to connect component dependencies.
            </summary>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Load">
            <summary>
            Loads the module into the kernel.
            </summary>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.AfterLoad">
            <summary>
            Executes any tasks after the module has been loaded into the kernel.
            </summary>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Bind``1">
            <summary>
            Begins a binding definition.
            </summary>
            <typeparam name="T">The service type to bind from.</typeparam>
            <returns>A binder that can be used to build the binding definition.</returns>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Bind(System.Type)">
            <summary>
            Begins a binding definition.
            </summary>
            <param name="type">The service type to bind from.</param>
            <returns>A binder that can be used to build the binding definition.</returns>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Intercept``1(Ninject.Core.ICondition{Ninject.Core.Interception.IRequest})">
            <summary>
            Declares a dynamic interception definition.
            </summary>
            <typeparam name="T">The type of interceptor to attach.</typeparam>
            <param name="condition">The condition that defines whether a method call will be intercepted.</param>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Intercept``1(System.Predicate{Ninject.Core.Interception.IRequest})">
            <summary>
            Declares a dynamic interception definition.
            </summary>
            <typeparam name="T">The type of interceptor to attach.</typeparam>
            <param name="predicate">A predicate that determine where a request should be intercepted.</param>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Intercept``1(System.Int32,Ninject.Core.ICondition{Ninject.Core.Interception.IRequest})">
            <summary>
            Declares a dynamic interception definition.
            </summary>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="condition">The condition that defines whether a method call will be intercepted.</param>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Intercept``1(System.Int32,System.Predicate{Ninject.Core.Interception.IRequest})">
            <summary>
            Declares a dynamic interception definition.
            </summary>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="predicate">A predicate that determine where a request should be intercepted.</param>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Intercept(System.Type,Ninject.Core.ICondition{Ninject.Core.Interception.IRequest})">
            <summary>
            Declares a dynamic interception definition.
            </summary>
            <param name="type">The type of interceptor to attach.</param>
            <param name="condition">The condition that defines whether a method call will be intercepted.</param>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Intercept(System.Type,System.Predicate{Ninject.Core.Interception.IRequest})">
            <summary>
            Declares a dynamic interception definition.
            </summary>
            <param name="type">The type of interceptor to attach.</param>
            <param name="predicate">A predicate that determine where a request should be intercepted.</param>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Intercept(System.Type,System.Int32,Ninject.Core.ICondition{Ninject.Core.Interception.IRequest})">
            <summary>
            Declares a dynamic interception definition.
            </summary>
            <param name="type">The type of interceptor to attach.</param>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="condition">The condition that defines whether a method call will be intercepted.</param>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Intercept(System.Type,System.Int32,System.Predicate{Ninject.Core.Interception.IRequest})">
            <summary>
            Declares a dynamic interception definition.
            </summary>
            <param name="type">The type of interceptor to attach.</param>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="predicate">A predicate that determine where a request should be intercepted.</param>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Intercept(Ninject.Core.ICondition{Ninject.Core.Interception.IRequest},Ninject.Core.Interception.InterceptorFactoryMethod)">
            <summary>
            Declares a dynamic interception definition.
            </summary>
            <param name="condition">The condition that defines whether a method call will be intercepted.</param>
            <param name="factoryMethod">The method that should be called to create the interceptor.</param>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Intercept(System.Predicate{Ninject.Core.Interception.IRequest},Ninject.Core.Interception.InterceptorFactoryMethod)">
            <summary>
            Declares a dynamic interception definition.
            </summary>
            <param name="predicate">A predicate that determine where a request should be intercepted.</param>
            <param name="factoryMethod">The method that should be called to create the interceptor.</param>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Intercept(System.Int32,Ninject.Core.ICondition{Ninject.Core.Interception.IRequest},Ninject.Core.Interception.InterceptorFactoryMethod)">
            <summary>
            Declares a dynamic interception definition.
            </summary>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="condition">The condition that defines whether a method call will be intercepted.</param>
            <param name="factoryMethod">The method that should be called to create the interceptor.</param>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.Intercept(System.Int32,System.Predicate{Ninject.Core.Interception.IRequest},Ninject.Core.Interception.InterceptorFactoryMethod)">
            <summary>
            Declares a dynamic interception definition.
            </summary>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="predicate">A predicate that determine where a request should be intercepted.</param>
            <param name="factoryMethod">The method that should be called to create the interceptor.</param>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.DoBind(System.Type)">
            <summary>
            Begins a binding definition.
            </summary>
            <param name="type">The service type to bind from.</param>
            <returns>A binder that can be used to build the binding definition.</returns>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.RegisterInterceptor(System.Type,System.Int32,Ninject.Core.ICondition{Ninject.Core.Interception.IRequest})">
            <summary>
            Registers a dynamic interceptor.
            </summary>
            <param name="type">The type of interceptor to attach.</param>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="condition">The condition that defines whether a method call will be intercepted.</param>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.RegisterInterceptor(Ninject.Core.Interception.InterceptorFactoryMethod,System.Int32,Ninject.Core.ICondition{Ninject.Core.Interception.IRequest})">
            <summary>
            Registers a dynamic interceptor.
            </summary>
            <param name="factoryMethod">The method that should be called to create the interceptor.</param>
            <param name="order">The order of precedence that the interceptor should be called in.</param>
            <param name="condition">The condition that defines whether a method call will be intercepted.</param>
        </member>
        <member name="M:Ninject.Core.ModuleBase`1.CreateBinder(Ninject.Core.Binding.IBinding)">
            <summary>
            Creates a binder that will be used to build the specified binding.
            </summary>
            <param name="binding">The binding that will be built.</param>
            <returns>The created binder.</returns>
        </member>
        <member name="P:Ninject.Core.ModuleBase`1.Kernel">
            <summary>
            Gets or sets the kernel associated with the module.
            </summary>
            <value></value>
        </member>
        <member name="P:Ninject.Core.ModuleBase`1.Name">
            <summary>
            Gets the name of the module.
            </summary>
        </member>
        <member name="P:Ninject.Core.ModuleBase`1.Logger">
            <summary>
            Gets the logger associated with the module.
            </summary>
        </member>
        <member name="M:Ninject.Core.StandardModule.CreateBinder(Ninject.Core.Binding.IBinding)">
            <summary>
            Creates a binder that will be used to build the specified binding.
            </summary>
            <param name="binding">The binding that will be built.</param>
            <returns>The created binder.</returns>
        </member>
        <member name="M:Ninject.Core.AutoModule.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.AutoModule"/> class that will scan the
            specified assembly for types to register.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Ninject.Core.AutoModule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.AutoModule"/> class that will scan the
            assembly with the specified name for types to register.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Ninject.Core.AutoModule.Load">
            <summary>
            Loads the module into the kernel.
            </summary>
        </member>
        <member name="P:Ninject.Core.AutoModule.ModuleAssembly">
            <summary>
            Gets the assembly the module will scan for types.
            </summary>
        </member>
        <member name="T:Ninject.Core.InlineModule">
            <summary>
            A module that uses a callback for its Load() implementation. Useful for creating simple
            modules, especially for testing.
            </summary>
        </member>
        <member name="M:Ninject.Core.InlineModule.#ctor(System.Action{Ninject.Core.InlineModule}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.InlineModule"/> class.
            </summary>
            <param name="loadCallbacks">One or more methods to call when the module is loaded.</param>
        </member>
        <member name="M:Ninject.Core.InlineModule.Load">
            <summary>
            Loads the module into the kernel.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.Directives.DirectiveBase">
            <summary>
            Represents a baseline definition of a directive. This type can be extended to create
            custom directives.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.Directives.IDirective">
            <summary>
            Represents a step in the activation process.
            </summary>
        </member>
        <member name="P:Ninject.Core.Planning.Directives.IDirective.DirectiveKey">
            <summary>
            Gets a value that uniquely identifies the directive.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.DirectiveBase.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.DirectiveBase.BuildKey">
            <summary>
            Builds the value that uniquely identifies the directive. This is called the first time
            the key is accessed, and then cached in the directive.
            </summary>
            <remarks>
            This exists because most directives' keys are based on reading member information,
            especially parameters. Since it's a relatively expensive procedure, it shouldn't be
            done each time the key is accessed.
            </remarks>
            <returns>The directive's unique key.</returns>
        </member>
        <member name="P:Ninject.Core.Planning.Directives.DirectiveBase.DirectiveKey">
            <summary>
            Gets a value that uniquely identifies the directive.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.Directives.InjectionDirectiveBase`1">
            <summary>
            A baseline definition of an injection directive.
            </summary>
            <typeparam name="TMember">The type of member that will be injected.</typeparam>
            <seealso cref="T:Ninject.Core.Planning.Directives.MultipleInjectionDirective`1"/>
            <seealso cref="T:Ninject.Core.Planning.Directives.SingleInjectionDirective`1"/>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.InjectionDirectiveBase`1.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.InjectionDirectiveBase`1.#ctor(`0)">
            <summary>
            Creates a new MultipleInjectionDirective.
            </summary>
            <param name="member">The member that will be injected.</param>
        </member>
        <member name="P:Ninject.Core.Planning.Directives.InjectionDirectiveBase`1.Member">
            <summary>
            Gets the member that will be injected.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.Directives.MultipleInjectionDirective`1">
            <summary>
            A baseline definition of an injection directive that injects more than one injection point.
            (For example, this is used for methods and constructors.)
            </summary>
            <typeparam name="TMember">The type of member that will be injected.</typeparam>
            <seealso cref="T:Ninject.Core.Planning.Directives.SingleInjectionDirective`1"/>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.MultipleInjectionDirective`1.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.MultipleInjectionDirective`1.#ctor(`0)">
            <summary>
            Creates a new MultipleInjectionDirective.
            </summary>
            <param name="member">The member that will be injected.</param>
        </member>
        <member name="P:Ninject.Core.Planning.Directives.MultipleInjectionDirective`1.Arguments">
            <summary>
            Gets a collection of mappings between injection points and dependencies.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.Directives.SingleInjectionDirective`1">
            <summary>
            A baseline definition of an injection directive that only injects a single injection point.
            (For example, this is used for fields and properties.)
            </summary>
            <typeparam name="TMember">The type of member that will be injected.</typeparam>
            <seealso cref="T:Ninject.Core.Planning.Directives.MultipleInjectionDirective`1"/>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.SingleInjectionDirective`1.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.SingleInjectionDirective`1.#ctor(`0,Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Creates a new MultipleInjectionDirective.
            </summary>
            <param name="member">The member that will be injected.</param>
            <param name="target">The injection point that will be injected.</param>
        </member>
        <member name="P:Ninject.Core.Planning.Directives.SingleInjectionDirective`1.Target">
            <summary>
            Gets the injection point that will be injected.
            </summary>
        </member>
        <member name="P:Ninject.Core.Planning.Directives.SingleInjectionDirective`1.Argument">
            <summary>
            Gets or sets an argument describing the dependency that will be resolved and injected.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.DirectiveCollection">
            <summary>
            A collection of binding directives, stored in an activation plan.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.IDirectiveCollection">
            <summary>
            A collection of binding directives, stored in an activation plan.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.IDirectiveCollection.Add``1(``0)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <typeparam name="T">The type to organize the item under.</typeparam>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Ninject.Core.Planning.IDirectiveCollection.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified items to the collection.
            </summary>
            <typeparam name="T">The type to organize the items under.</typeparam>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:Ninject.Core.Planning.IDirectiveCollection.Has``1(System.Object)">
            <summary>
            Gets a value indicating whether an item with the specified key has been organized under
            the specified type.
            </summary>
            <typeparam name="T">The type the item is organized under.</typeparam>
            <param name="key">The item's key.</param>
            <returns><see langword="True"/> if the item has been defined, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.IDirectiveCollection.HasOneOrMore``1">
            <summary>
            Gets a value indicating whether one or more items organized under the specified type.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <returns><see langword="True"/> if there are such items, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.IDirectiveCollection.GetOne``1">
            <summary>
            Gets the first item in the collection that is organized under the specified type.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <returns>The item, or <see langword="null"/> if none has been defined.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.IDirectiveCollection.GetOne``1(System.Object)">
            <summary>
            Gets the item with the specified key, organized under the specified type, if one has been defined.
            </summary>
            <typeparam name="T">The type the item is organized under.</typeparam>
            <param name="key">The item's key.</param>
            <returns>The item, or <see langword="null"/> if none has been defined.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.IDirectiveCollection.GetAll``1">
            <summary>
            Gets all items organized under the specified type.
            </summary>
            <typeparam name="T">The type the items are organized under.</typeparam>
            <returns>A collection of items organized under the specified type.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.DirectiveCollection.GetKeyForItem(Ninject.Core.Planning.Directives.IDirective)">
            <summary>
            Gets the key for the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The key for the item.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.DirectiveCollection.OnKeyCollision(System.Type,System.Object,Ninject.Core.Planning.Directives.IDirective,Ninject.Core.Planning.Directives.IDirective)">
            <summary>
            Called when an item is added to the collection when an item with the same key already
            exists in the collection, organized under the same type.
            </summary>
            <param name="type">The type the items are organized under.</param>
            <param name="key">The key the items share.</param>
            <param name="newItem">The new item that was added.</param>
            <param name="existingItem">The item that already existed in the collection.</param>
        </member>
        <member name="T:Ninject.Core.Planning.Directives.ConstructorInjectionDirective">
            <summary>
            A directive that describes a constructor call.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.ConstructorInjectionDirective.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new ConstructorInjectionDirective.
            </summary>
            <param name="member">The member that the directive relates to.</param>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.ConstructorInjectionDirective.BuildKey">
            <summary>
            Builds the value that uniquely identifies the directive. This is called the first time
            the key is accessed, and then cached in the directive.
            </summary>
            <returns>The directive's unique key.</returns>
        </member>
        <member name="T:Ninject.Core.Planning.Directives.FieldInjectionDirective">
            <summary>
            A directive that describes a field injection.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.FieldInjectionDirective.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Creates a new FieldInjectionDirective.
            </summary>
            <param name="member">The member that the directive relates to.</param>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.FieldInjectionDirective.BuildKey">
            <summary>
            Builds the value that uniquely identifies the directive. This is called the first time
            the key is accessed, and then cached in the directive.
            </summary>
            <returns>The directive's unique key.</returns>
        </member>
        <member name="T:Ninject.Core.Planning.Directives.MethodInjectionDirective">
            <summary>
            A directive that describes a method injection.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.MethodInjectionDirective.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a new MethodInjectionDirective.
            </summary>
            <param name="member">The member that the directive relates to.</param>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.MethodInjectionDirective.BuildKey">
            <summary>
            Builds the value that uniquely identifies the directive. This is called the first time
            the key is accessed, and then cached in the directive.
            </summary>
            <returns>The directive's unique key.</returns>
        </member>
        <member name="T:Ninject.Core.Planning.Directives.PropertyInjectionDirective">
            <summary>
            A directive that describes a property injection.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.PropertyInjectionDirective.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new PropertyInjectionDirective.
            </summary>
            <param name="member">The member that the directive relates to.</param>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.PropertyInjectionDirective.BuildKey">
            <summary>
            Builds the value that uniquely identifies the directive. This is called the first time
            the key is accessed, and then cached in the directive.
            </summary>
            <returns>The directive's unique key.</returns>
        </member>
        <member name="T:Ninject.Core.Planning.Directives.ProxyDirective">
            <summary>
            A directive that indicates that instances of the type should be wrapped in proxies.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Directives.ProxyDirective.BuildKey">
            <summary>
            Builds the value that uniquely identifies the directive. This is called the first time
            the key is accessed, and then cached in the directive.
            </summary>
            <returns>The directive's unique key.</returns>
            <remarks>
            This exists because most directives' keys are based on reading member information,
            especially parameters. Since it's a relatively expensive procedure, it shouldn't be
            done each time the key is accessed.
            </remarks>
        </member>
        <member name="T:Ninject.Core.Planning.Heuristics.IConstructorHeuristic">
            <summary>
            Selects a constructor to call during activation.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Heuristics.IConstructorHeuristic.Select(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan,System.Collections.Generic.IList{System.Reflection.ConstructorInfo})">
            <summary>
            Selects the constructor to call.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan being manipulated.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <param name="candidates">A collection of potential constructors.</param>
            <returns>The constructor that should be injected.</returns>
        </member>
        <member name="T:Ninject.Core.Planning.Heuristics.StandardConstructorHeuristic">
            <summary>
            Selects a constructor to call during activation by looking for one marked with
            an injection attribute.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Heuristics.StandardConstructorHeuristic.Select(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan,System.Collections.Generic.IList{System.Reflection.ConstructorInfo})">
            <summary>
            Selects the member that should be injected.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan being manipulated.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <param name="candidates">A collection of potential members.</param>
            <returns>The member that should be injected.</returns>
        </member>
        <member name="T:Ninject.Core.Planning.Heuristics.IFieldHeuristic">
            <summary>
            Selects one or more fields to inject during activation.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.Heuristics.IMemberHeuristic`1">
            <summary>
            Determines if certain members should be injected during activation.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Heuristics.IMemberHeuristic`1.ShouldInject(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan,`0)">
            <summary>
            Returns a value indicating whether the specified member should be injected during activation.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan being manipulated.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <param name="candidate">The member in question.</param>
            <returns><see langword="True"/> if the member should be injected, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Ninject.Core.Planning.Heuristics.StandardFieldHeuristic">
            <summary>
            Selects one or more fields to inject during activation by looking for those decorated
            with injection attributes.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Heuristics.StandardFieldHeuristic.ShouldInject(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan,System.Reflection.FieldInfo)">
            <summary>
            Returns a value indicating whether the specified member should be injected during activation.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan being manipulated.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <param name="candidate">The member in question.</param>
            <returns><see langword="True"/> if the member should be injected, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Ninject.Core.Planning.Heuristics.IMethodHeuristic">
            <summary>
            Selects one or more methods to inject during activation.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.Heuristics.StandardMethodHeuristic">
            <summary>
            Selects one or more methods to inject during activation by looking for those decorated
            with injection attributes.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Heuristics.StandardMethodHeuristic.ShouldInject(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan,System.Reflection.MethodInfo)">
            <summary>
            Returns a value indicating whether the specified member should be injected during activation.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan being manipulated.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <param name="candidate">The member in question.</param>
            <returns><see langword="True"/> if the member should be injected, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Ninject.Core.Planning.Heuristics.IPropertyHeuristic">
            <summary>
            Selects one or more properties to inject during activation.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.Heuristics.StandardPropertyHeuristic">
            <summary>
            Selects one or more methods to inject during activation by looking for those decorated
            with injection attributes.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Heuristics.StandardPropertyHeuristic.ShouldInject(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan,System.Reflection.PropertyInfo)">
            <summary>
            Returns a value indicating whether the specified member should be injected during activation.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan being manipulated.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <param name="candidate">The member in question.</param>
            <returns><see langword="True"/> if the member should be injected, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Ninject.Core.Planning.IActivationPlan">
            <summary>
            Describes the means by which an object should be created and injected.
            </summary>
        </member>
        <member name="P:Ninject.Core.Planning.IActivationPlan.Type">
            <summary>
            Gets or sets the type that the plan describes.
            </summary>
        </member>
        <member name="P:Ninject.Core.Planning.IActivationPlan.Behavior">
            <summary>
            Gets or sets the behavior that decides whether to re-use existing instances or create new ones.
            </summary>
        </member>
        <member name="P:Ninject.Core.Planning.IActivationPlan.Directives">
            <summary>
            Gets the collection of directives associated with the plan.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.StandardActivationPlan">
            <summary>
            The stock implementation of an activation plan.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.StandardActivationPlan.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Planning.StandardActivationPlan.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Planning.StandardActivationPlan"/> class.
            </summary>
            <param name="type">The type that the plan will describe.</param>
        </member>
        <member name="P:Ninject.Core.Planning.StandardActivationPlan.Type">
            <summary>
            Gets or sets the type that the plan describes.
            </summary>
        </member>
        <member name="P:Ninject.Core.Planning.StandardActivationPlan.Behavior">
            <summary>
            Gets or sets the behavior that decides whether to re-use existing instances or create new ones.
            </summary>
        </member>
        <member name="P:Ninject.Core.Planning.StandardActivationPlan.Directives">
            <summary>
            Gets the collection of directives associated with the plan.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.Strategies.IPlanningStrategy">
            <summary>
            A strategy that contributes to the construction or destruction of an activation plan.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.IPlanningStrategy.BeforeBuild(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed before the activation plan is built.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>A value indicating whether to proceed or interrupt the strategy chain.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.IPlanningStrategy.Build(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed to build the activation plan.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>A value indicating whether to proceed or interrupt the strategy chain.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.IPlanningStrategy.AfterBuild(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed after the activation plan is built.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>A value indicating whether to proceed or interrupt the strategy chain.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.IPlanningStrategy.BeforeRelease(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed before the activation plan is released.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>A value indicating whether to proceed or interrupt the strategy chain.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.IPlanningStrategy.Release(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed to release the activation plan.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>A value indicating whether to proceed or interrupt the strategy chain.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.IPlanningStrategy.AfterRelease(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed before the activation plan is released.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>A value indicating whether to proceed or interrupt the strategy chain.</returns>
        </member>
        <member name="T:Ninject.Core.Planning.Strategies.PlanningStrategyBase">
            <summary>
            A strategy that contributes to the construction or destruction of an activation plan.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.PlanningStrategyBase.BeforeBuild(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed before the activation plan is built.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>A value indicating whether to proceed or interrupt the strategy chain.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.PlanningStrategyBase.Build(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed to build the activation plan.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>A value indicating whether to proceed or interrupt the strategy chain.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.PlanningStrategyBase.AfterBuild(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed after the activation plan is built.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>A value indicating whether to proceed or interrupt the strategy chain.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.PlanningStrategyBase.BeforeRelease(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed before the activation plan is released.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>A value indicating whether to proceed or interrupt the strategy chain.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.PlanningStrategyBase.Release(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed to release the activation plan.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>A value indicating whether to proceed or interrupt the strategy chain.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.PlanningStrategyBase.AfterRelease(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed before the activation plan is released.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>A value indicating whether to proceed or interrupt the strategy chain.</returns>
        </member>
        <member name="T:Ninject.Core.Planning.Strategies.ReflectionStrategyBase`2">
            <summary>
            Examines the implementation type via reflection to determine if a specific type of
            member requests injection.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.ReflectionStrategyBase`2.Build(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed to build the activation plan.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>
            A value indicating whether to proceed or interrupt the strategy chain.
            </returns>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.ReflectionStrategyBase`2.GetCandidates(Ninject.Core.Binding.IBinding,System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets an array of members that the strategy should examine.
            </summary>
            <param name="binding">The binding that points at the type being inspected.</param>
            <param name="type">The type to collect the members from.</param>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> that describe the scope of the search.</param>
            <returns>A collection of members.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.ReflectionStrategyBase`2.AddInjectionDirective(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan,`0)">
            <summary>
            Adds an injection directive related to the specified member to the specified activation plan.
            </summary>
            <param name="binding">The binding that points at the type being inspected.</param>
            <param name="type">The type that is being inspected.</param>
            <param name="plan">The activation plan to add the directive to.</param>
            <param name="member">The member to create a directive for.</param>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.ReflectionStrategyBase`2.GetCandidatesRecursive(Ninject.Core.Binding.IBinding,System.Type)">
            <summary>
            Walks the type hierarchy starting with the specified type, returning all members from
            the type and all of its ancestors.
            </summary>
            <param name="binding">The binding that points at the type being inspected.</param>
            <param name="type">The lowest type in the hierarchy to collect the members from.</param>
            <returns>A collection of members.</returns>
        </member>
        <member name="T:Ninject.Core.Planning.Strategies.BehaviorReflectionStrategy">
            <summary>
            Examines the implementation type via reflection to determine which behavior to use.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.BehaviorReflectionStrategy.Build(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed to build the activation plan.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>
            A value indicating whether to proceed or interrupt the strategy chain.
            </returns>
        </member>
        <member name="T:Ninject.Core.Planning.Strategies.ConstructorReflectionStrategy">
            <summary>
            Examines the implementation type via reflection to determine which constructor should be called.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.ConstructorReflectionStrategy.Build(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed to build the activation plan.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>
            A value indicating whether to proceed or interrupt the strategy chain.
            </returns>
        </member>
        <member name="T:Ninject.Core.Planning.Strategies.FieldReflectionStrategy">
            <summary>
            Examines the implementation type via reflection to determine if any fields request injection.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.FieldReflectionStrategy.GetCandidates(Ninject.Core.Binding.IBinding,System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets an array of members that the strategy should examine.
            </summary>
            <param name="binding">The binding that points at the type being inspected.</param>
            <param name="type">The type to collect the members from.</param>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> that describe the scope of the search.</param>
            <returns>An array of members that the strategy should examine.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.FieldReflectionStrategy.AddInjectionDirective(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan,System.Reflection.FieldInfo)">
            <summary>
            Adds an injection directive related to the specified member to the specified binding.
            </summary>
            <param name="binding">The binding to add the directive to.</param>
            <param name="type">The type that is being inspected.</param>
            <param name="plan">The activation plan to add the directive to.</param>
            <param name="member">The member to create a directive for.</param>
        </member>
        <member name="T:Ninject.Core.Planning.Strategies.InterceptorRegistrationStrategy">
            <summary>
            Examines the implementation type via reflection and registers any static interceptors
            that are defined via attributes.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.InterceptorRegistrationStrategy.Build(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan)">
            <summary>
            Executed to build the activation plan.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <returns>A value indicating whether to proceed or interrupt the strategy chain.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.InterceptorRegistrationStrategy.RegisterClassInterceptors(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan,System.Collections.Generic.ICollection{System.Reflection.MethodInfo})">
            <summary>
            Registers static interceptors defined by attributes on the class for all candidate
            methods on the class, execept those decorated with a <see cref="T:Ninject.Core.DoNotInterceptAttribute"/>.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <param name="candidates">The candidate methods to intercept.</param>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.InterceptorRegistrationStrategy.RegisterMethodInterceptors(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan,System.Reflection.MethodInfo,System.Collections.Generic.ICollection{Ninject.Core.Infrastructure.InterceptAttribute})">
            <summary>
            Registers static interceptors defined by attributes on the specified method.
            </summary>
            <param name="binding">The binding that points at the type whose activation plan is being released.</param>
            <param name="type">The type whose activation plan is being manipulated.</param>
            <param name="plan">The activation plan that is being manipulated.</param>
            <param name="method">The method that may be intercepted.</param>
            <param name="attributes">The interception attributes that apply.</param>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.InterceptorRegistrationStrategy.GetCandidateMethods(System.Type)">
            <summary>
            Gets a collection of methods that may be intercepted on the specified type.
            </summary>
            <param name="type">The type to examine.</param>
            <returns>The candidate methods.</returns>
        </member>
        <member name="T:Ninject.Core.Planning.Strategies.MethodReflectionStrategy">
            <summary>
            Examines the implementation type via reflection to determine if any methods request injection.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.MethodReflectionStrategy.GetCandidates(Ninject.Core.Binding.IBinding,System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets an array of members that the strategy should examine.
            </summary>
            <param name="binding">The binding that points at the type being inspected.</param>
            <param name="type">The type to collect the members from.</param>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> that describe the scope of the search.</param>
            <returns></returns>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.MethodReflectionStrategy.AddInjectionDirective(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan,System.Reflection.MethodInfo)">
            <summary>
            Adds an injection directive related to the specified member to the specified binding.
            </summary>
            <param name="binding">The binding to add the directive to.</param>
            <param name="type">The type that is being inspected.</param>
            <param name="plan">The activation plan to add the directive to.</param>
            <param name="member">The member to create a directive for.</param>
        </member>
        <member name="T:Ninject.Core.Planning.Strategies.PropertyReflectionStrategy">
            <summary>
            Examines the implementation type via reflection to determine if any properties request injection.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.PropertyReflectionStrategy.GetCandidates(Ninject.Core.Binding.IBinding,System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets an array of members that the strategy should examine.
            </summary>
            <param name="binding">The binding that points at the type being inspected.</param>
            <param name="type">The type to collect the members from.</param>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> that describe the scope of the search.</param>
        </member>
        <member name="M:Ninject.Core.Planning.Strategies.PropertyReflectionStrategy.AddInjectionDirective(Ninject.Core.Binding.IBinding,System.Type,Ninject.Core.Planning.IActivationPlan,System.Reflection.PropertyInfo)">
            <summary>
            Adds an injection directive related to the specified member to the specified binding.
            </summary>
            <param name="binding">The binding to add the directive to.</param>
            <param name="type">The type that is being inspected.</param>
            <param name="plan">The activation plan to add the directive to.</param>
            <param name="member">The member to create a directive for.</param>
        </member>
        <member name="T:Ninject.Core.Planning.Targets.FieldTarget">
            <summary>
            An target representing a field that can receive an injection.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.Targets.TargetBase`1">
            <summary>
            The baseline definition of an injection target. Acts as an adapter to allow metadata
            reading for both <see cref="T:System.Reflection.MemberInfo"/>s and <see cref="T:System.Reflection.ParameterInfo"/>s.
            </summary>
            <typeparam name="T">The type of object associated with the target.</typeparam>
        </member>
        <member name="T:Ninject.Core.Planning.Targets.ITarget">
            <summary>
            Describes a site (property, field, or method argument) on a type that can receive
            an injected value.
            </summary>
        </member>
        <member name="P:Ninject.Core.Planning.Targets.ITarget.Name">
            <summary>
            Gets the name of the injection target.
            </summary>
        </member>
        <member name="P:Ninject.Core.Planning.Targets.ITarget.Type">
            <summary>
            Gets the type of the injection target.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Targets.TargetBase`1.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Planning.Targets.TargetBase`1.#ctor(`0)">
            <summary>
            Creates a new TargetBase.
            </summary>
            <param name="site">The actual member or parameter that will be injected.</param>
        </member>
        <member name="M:Ninject.Core.Planning.Targets.TargetBase`1.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Returns an array of custom attributes defined by the target.
            </summary>
            <param name="attributeType">The type of attributes to search for. Only attributes that are assignable to this type are returned.</param>
            <param name="inherit">Specifies whether to search the target's inheritance chain to find the attributes.</param>
            <returns>An array of matching attributes.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.Targets.TargetBase`1.GetCustomAttributes(System.Boolean)">
            <summary>
            Returns an array of custom attributes defined by the target.
            </summary>
            <param name="inherit">Specifies whether to search the target's inheritance chain to find the attributes.</param>
            <returns>An array of matching attributes.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.Targets.TargetBase`1.IsDefined(System.Type,System.Boolean)">
            <summary>
            Indicates whether one or more instances of the specified attribute type are applied
            to the target.
            </summary>
            <param name="attributeType">The type of attributes to search for.</param>
            <param name="inherit">Specifies whether to search the target's inheritance chain to find the attributes.</param>
            <returns></returns>
        </member>
        <member name="P:Ninject.Core.Planning.Targets.TargetBase`1.Site">
            <summary>
            Gets the actual member or parameter that will be injected.
            </summary>
        </member>
        <member name="P:Ninject.Core.Planning.Targets.TargetBase`1.Name">
            <summary>
            Gets the name of the target.
            </summary>
        </member>
        <member name="P:Ninject.Core.Planning.Targets.TargetBase`1.Type">
            <summary>
            Gets the type of the target.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Targets.FieldTarget.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Creates a new FieldTarget.
            </summary>
            <param name="field">The field that is to be injected.</param>
        </member>
        <member name="P:Ninject.Core.Planning.Targets.FieldTarget.Name">
            <summary>
            Gets the name of the injection point.
            </summary>
        </member>
        <member name="P:Ninject.Core.Planning.Targets.FieldTarget.Type">
            <summary>
            Gets the type of the injection point.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.Targets.ParameterTarget">
            <summary>
            A target representing a method (or constructor) parameter that can receive an injection.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Targets.ParameterTarget.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Creates a new ParameterTarget.
            </summary>
            <param name="parameter">The parameter that is to be injected.</param>
        </member>
        <member name="P:Ninject.Core.Planning.Targets.ParameterTarget.Name">
            <summary>
            Gets the name of the injection point.
            </summary>
        </member>
        <member name="P:Ninject.Core.Planning.Targets.ParameterTarget.Type">
            <summary>
            Gets the type of the injection point.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.Targets.PropertyTarget">
            <summary>
            A target representing a property that can receive an injection.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.Targets.PropertyTarget.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new PropertyTarget.
            </summary>
            <param name="property">The property that is to be injected.</param>
        </member>
        <member name="P:Ninject.Core.Planning.Targets.PropertyTarget.Name">
            <summary>
            Gets the name of the injection point.
            </summary>
        </member>
        <member name="P:Ninject.Core.Planning.Targets.PropertyTarget.Type">
            <summary>
            Gets the type of the injection point.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.IPlanner">
            <summary>
            Creates activation plans by examining types and collecting metadata.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.IPlanner.GetPlan(Ninject.Core.Binding.IBinding,System.Type)">
            <summary>
            Gets an activation plan for the specified type, building it first if necessary.
            </summary>
            <param name="binding">The binding that was used to resolve the type being activated.</param>
            <param name="type">The type to examine.</param>
            <returns>An activation plan that will be used to build instances type.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.IPlanner.ReleasePlan(Ninject.Core.Binding.IBinding,System.Type)">
            <summary>
            Releases the activation plan for the specified type, if one was created.
            </summary>
            <param name="binding">The binding which points to the type that should be released.</param>
            <param name="type">The type whose activation plan should be released.</param>
        </member>
        <member name="P:Ninject.Core.Planning.IPlanner.Strategies">
            <summary>
            The chain of strategies that contribute to the creation and destruction of activation plans.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.PlannerBase">
            <summary>
            The baseline implemenation of a planner with no strategies installed. This type can be
            extended to customize the planning process.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.PlannerBase.OnConnected(System.EventArgs)">
            <summary>
            Called when the component is connected to its environment.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Ninject.Core.Planning.PlannerBase.OnDisconnected(System.EventArgs)">
            <summary>
            Called when the component is disconnected from its environment.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Ninject.Core.Planning.PlannerBase.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Planning.PlannerBase.#ctor">
            <summary>
            Creates a new PlannerBase.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.PlannerBase.GetPlan(Ninject.Core.Binding.IBinding,System.Type)">
            <summary>
            Builds a new activation plan by inspecting the specified type.
            </summary>
            <param name="binding">The binding that was used to resolve the type being activated.</param>
            <param name="type">The type to examine.</param>
            <returns>An activation plan that will be used to build instances type.</returns>
        </member>
        <member name="M:Ninject.Core.Planning.PlannerBase.ReleasePlan(Ninject.Core.Binding.IBinding,System.Type)">
            <summary>
            Releases the activation plan for the specified type, if one was created.
            </summary>
            <param name="binding">The binding which points to the type that should be released.</param>
            <param name="type">The type whose activation plan should be released.</param>
        </member>
        <member name="M:Ninject.Core.Planning.PlannerBase.CreateEmptyPlan(System.Type)">
            <summary>
            Creates a new empty activation plan, that will subsequently be built up by the inspector.
            </summary>
            <returns>The new empty binding.</returns>
        </member>
        <member name="P:Ninject.Core.Planning.PlannerBase.Strategies">
            <summary>
            The chain of strategies that contribute to the creation and destruction of activation plans.
            </summary>
            <value></value>
        </member>
        <member name="P:Ninject.Core.Planning.PlannerBase.Plans">
            <summary>
            The collection of activation plans that have been generated.
            </summary>
        </member>
        <member name="T:Ninject.Core.Planning.StandardPlanner">
            <summary>
            The stock implementation of an inspector.
            </summary>
        </member>
        <member name="M:Ninject.Core.Planning.StandardPlanner.OnConnected(System.EventArgs)">
            <summary>
            Called when the component is connected to its environment.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="T:Ninject.Core.Resolution.Plugins.ComponentResolverPlugin">
            <summary>
            A <see cref="T:Ninject.Core.Resolution.Plugins.IResolverFactoryPlugin"/> that creates <see cref="T:Ninject.Core.Resolution.Resolvers.ComponentResolver"/>s if
            the target is an child of <see cref="T:Ninject.Core.Infrastructure.IKernelComponent"/>.
            </summary>
        </member>
        <member name="T:Ninject.Core.Resolution.Plugins.IResolverFactoryPlugin">
            <summary>
            A factory that can be plugged into a <see cref="T:Ninject.Core.Resolution.IResolverFactory"/> to conditionally
            create a specific type of <see cref="T:Ninject.Core.Resolution.IResolver"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Resolution.Plugins.IResolverFactoryPlugin.Create(Ninject.Core.Binding.IBinding,Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Creates a dependency resolver for the specified binding and target.
            </summary>
            <param name="binding">The binding requesting the injection.</param>
            <param name="target">The target whose value the resolver will resolve.</param>
            <returns>The newly-created dependency resolver.</returns>
        </member>
        <member name="M:Ninject.Core.Resolution.Plugins.ComponentResolverPlugin.Matches(Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Returns a value indicating whether the plugin can create a resolver for the specified target.
            </summary>
            <param name="target">The target in question.</param>
            <returns><see langword="True"/> if the plugin can create a resolver for the target, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Resolution.Plugins.ComponentResolverPlugin.Create(Ninject.Core.Binding.IBinding,Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Creates a dependency resolver for the specified binding and target.
            </summary>
            <param name="binding">The binding requesting the injection.</param>
            <param name="target">The target whose value the resolver will resolve.</param>
            <returns>The newly-created dependency resolver.</returns>
        </member>
        <member name="T:Ninject.Core.Resolution.Plugins.KernelResolverPlugin">
            <summary>
            A <see cref="T:Ninject.Core.Resolution.Plugins.IResolverFactoryPlugin"/> that creates <see cref="T:Ninject.Core.Resolution.Resolvers.KernelResolver"/>s if
            the target is an child of <see cref="T:Ninject.Core.IKernel"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Resolution.Plugins.KernelResolverPlugin.Matches(Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Returns a value indicating whether the plugin can create a resolver for the specified target.
            </summary>
            <param name="target">The target in question.</param>
            <returns><see langword="True"/> if the plugin can create a resolver for the target, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Resolution.Plugins.KernelResolverPlugin.Create(Ninject.Core.Binding.IBinding,Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Creates a dependency resolver for the specified binding and target.
            </summary>
            <param name="binding">The binding requesting the injection.</param>
            <param name="target">The target whose value the resolver will resolve.</param>
            <returns>The newly-created dependency resolver.</returns>
        </member>
        <member name="T:Ninject.Core.Resolution.Plugins.LoggerResolverPlugin">
            <summary>
            A <see cref="T:Ninject.Core.Resolution.Plugins.IResolverFactoryPlugin"/> that creates <see cref="T:Ninject.Core.Resolution.Resolvers.LoggerResolver"/>s if
            the target is an child of <see cref="T:Ninject.Core.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Resolution.Plugins.LoggerResolverPlugin.Matches(Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Returns a value indicating whether the plugin can create a resolver for the specified target.
            </summary>
            <param name="target">The target in question.</param>
            <returns><see langword="True"/> if the plugin can create a resolver for the target, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Resolution.Plugins.LoggerResolverPlugin.Create(Ninject.Core.Binding.IBinding,Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Creates a dependency resolver for the specified binding and target.
            </summary>
            <param name="binding">The binding requesting the injection.</param>
            <param name="target">The target whose value the resolver will resolve.</param>
            <returns>The newly-created dependency resolver.</returns>
        </member>
        <member name="T:Ninject.Core.Resolution.Plugins.ProviderResolverPlugin">
            <summary>
            A <see cref="T:Ninject.Core.Resolution.Plugins.IResolverFactoryPlugin"/> that creates <see cref="T:Ninject.Core.Resolution.Resolvers.ProviderResolver"/>s if
            the target is an child of <see cref="T:Ninject.Core.Creation.IProvider"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Resolution.Plugins.ProviderResolverPlugin.Matches(Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Returns a value indicating whether the plugin can create a resolver for the specified target.
            </summary>
            <param name="target">The target in question.</param>
            <returns><see langword="True"/> if the plugin can create a resolver for the target, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Resolution.Plugins.ProviderResolverPlugin.Create(Ninject.Core.Binding.IBinding,Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Creates a dependency resolver for the specified binding and target.
            </summary>
            <param name="binding">The binding requesting the injection.</param>
            <param name="target">The target whose value the resolver will resolve.</param>
            <returns>The newly-created dependency resolver.</returns>
        </member>
        <member name="T:Ninject.Core.Resolution.Plugins.StandardResolverPlugin">
            <summary>
            A <see cref="T:Ninject.Core.Resolution.Plugins.IResolverFactoryPlugin"/> that creates <see cref="T:Ninject.Core.Resolution.Resolvers.StandardResolver"/>s.
            </summary>
        </member>
        <member name="M:Ninject.Core.Resolution.Plugins.StandardResolverPlugin.Matches(Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Returns a value indicating whether the plugin can create a resolver for the specified target.
            </summary>
            <param name="target">The target in question.</param>
            <returns><see langword="True"/> if the plugin can create a resolver for the target, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Resolution.Plugins.StandardResolverPlugin.Create(Ninject.Core.Binding.IBinding,Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Creates a dependency resolver for the specified binding and target.
            </summary>
            <param name="binding">The binding requesting the injection.</param>
            <param name="target">The target whose value the resolver will resolve.</param>
            <returns>The newly-created dependency resolver.</returns>
        </member>
        <member name="T:Ninject.Core.Resolution.Resolvers.ComponentResolver">
            <summary>
            A dependency resolver that returns <see cref="T:Ninject.Core.Infrastructure.IKernelComponent"/>s.
            </summary>
        </member>
        <member name="T:Ninject.Core.Resolution.Resolvers.ResolverBase">
            <summary>
            A baseline definition of a dependency resolver.
            </summary>
        </member>
        <member name="T:Ninject.Core.Resolution.IResolver">
            <summary>
            Defines a means to resolve a dependency.
            </summary>
        </member>
        <member name="M:Ninject.Core.Resolution.IResolver.Resolve(Ninject.Core.Activation.IContext,Ninject.Core.Activation.IContext)">
            <summary>
            Resolves the associated dependency.
            </summary>
            <param name="outerContext">The context in which the dependency was requested.</param>
            <param name="innerContext">The context in which the dependency should be resolved.</param>
            <returns>An object that satisfies the dependency.</returns>
        </member>
        <member name="M:Ninject.Core.Resolution.Resolvers.ResolverBase.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Resolution.Resolvers.ResolverBase.#ctor(Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Creates a new ResolverBase.
            </summary>
            <param name="target">The target whose values will be resolved.</param>
        </member>
        <member name="M:Ninject.Core.Resolution.Resolvers.ResolverBase.Resolve(Ninject.Core.Activation.IContext,Ninject.Core.Activation.IContext)">
            <summary>
            Resolves the dependency.
            </summary>
            <param name="outerContext">The context in which the dependency was requested.</param>
            <param name="innerContext">The context in which the dependency should be resolved.</param>
            <returns>An object that satisfies the dependency.</returns>
        </member>
        <member name="M:Ninject.Core.Resolution.Resolvers.ResolverBase.ResolveInstance(Ninject.Core.Activation.IContext,Ninject.Core.Activation.IContext)">
            <summary>
            Resolves the dependency.
            </summary>
            <param name="outerContext">The context in which the dependency was requested.</param>
            <param name="innerContext">The context in which the dependency should be resolved.</param>
            <returns>An object that satisfies the dependency.</returns>
        </member>
        <member name="P:Ninject.Core.Resolution.Resolvers.ResolverBase.Target">
            <summary>
            Gets the target whose values will be resolved.
            </summary>
        </member>
        <member name="M:Ninject.Core.Resolution.Resolvers.ComponentResolver.#ctor(Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Creates a new ComponentResolver.
            </summary>
            <param name="target">The target whose values will be resolved.</param>
        </member>
        <member name="M:Ninject.Core.Resolution.Resolvers.ComponentResolver.ResolveInstance(Ninject.Core.Activation.IContext,Ninject.Core.Activation.IContext)">
            <summary>
            Resolves the dependency.
            </summary>
            <param name="outerContext">The context in which the dependency was requested.</param>
            <param name="innerContext">The context in which the dependency should be resolved.</param>
            <returns>An object that satisfies the dependency.</returns>
        </member>
        <member name="T:Ninject.Core.Resolution.Resolvers.KernelResolver">
            <summary>
            A dependency resolver that returns instances of the kernel itself.
            </summary>
        </member>
        <member name="M:Ninject.Core.Resolution.Resolvers.KernelResolver.#ctor(Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Creates a new KernelResolver.
            </summary>
            <param name="target">The target whose values will be resolved.</param>
        </member>
        <member name="M:Ninject.Core.Resolution.Resolvers.KernelResolver.ResolveInstance(Ninject.Core.Activation.IContext,Ninject.Core.Activation.IContext)">
            <summary>
            Resolves the dependency.
            </summary>
            <param name="outerContext">The context in which the dependency was requested.</param>
            <param name="innerContext">The context in which the dependency should be resolved.</param>
            <returns>An object that satisfies the dependency.</returns>
        </member>
        <member name="T:Ninject.Core.Resolution.Resolvers.LoggerResolver">
            <summary>
            A dependency resolver that returns <see cref="T:Ninject.Core.Logging.ILogger"/>s.
            </summary>
        </member>
        <member name="M:Ninject.Core.Resolution.Resolvers.LoggerResolver.#ctor(Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Creates a new LoggerResolver.
            </summary>
            <param name="target">The target whose values will be resolved.</param>
        </member>
        <member name="M:Ninject.Core.Resolution.Resolvers.LoggerResolver.ResolveInstance(Ninject.Core.Activation.IContext,Ninject.Core.Activation.IContext)">
            <summary>
            Resolves the dependency.
            </summary>
            <param name="outerContext">The context in which the dependency was requested.</param>
            <param name="innerContext">The context in which the dependency should be resolved.</param>
            <returns>An object that satisfies the dependency.</returns>
        </member>
        <member name="T:Ninject.Core.Resolution.Resolvers.ProviderResolver">
            <summary>
            A dependency resolver that retrieves <see cref="T:Ninject.Core.Creation.IProvider"/>s from the kernel.
            </summary>
        </member>
        <member name="M:Ninject.Core.Resolution.Resolvers.ProviderResolver.#ctor(Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Creates a new ProviderResolver.
            </summary>
            <param name="target">The target whose values will be resolved.</param>
        </member>
        <member name="M:Ninject.Core.Resolution.Resolvers.ProviderResolver.ResolveInstance(Ninject.Core.Activation.IContext,Ninject.Core.Activation.IContext)">
            <summary>
            Resolves the dependency.
            </summary>
            <param name="outerContext">The context in which the dependency was requested.</param>
            <param name="innerContext">The context in which the dependency should be resolved.</param>
            <returns>An object that satisfies the dependency.</returns>
        </member>
        <member name="T:Ninject.Core.Resolution.Resolvers.StandardResolver">
            <summary>
            A dependency resolver that calls into the kernel to resolve instances.
            </summary>
        </member>
        <member name="M:Ninject.Core.Resolution.Resolvers.StandardResolver.#ctor(Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Creates a new StandardResolver.
            </summary>
            <param name="target">The target whose values will be resolved.</param>
        </member>
        <member name="M:Ninject.Core.Resolution.Resolvers.StandardResolver.ResolveInstance(Ninject.Core.Activation.IContext,Ninject.Core.Activation.IContext)">
            <summary>
            Resolves the dependency.
            </summary>
            <param name="outerContext">The context in which the dependency was requested.</param>
            <param name="innerContext">The context in which the dependency should be resolved.</param>
            <returns>An object that satisfies the dependency.</returns>
        </member>
        <member name="T:Ninject.Core.Resolution.IResolverFactory">
            <summary>
            Creates <see cref="T:Ninject.Core.Resolution.IResolver"/>s that can resolve dependencies.
            </summary>
        </member>
        <member name="M:Ninject.Core.Resolution.IResolverFactory.Create(Ninject.Core.Binding.IBinding,Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Creates a dependency resolver for the specified binding and target.
            </summary>
            <param name="binding">The binding requesting the injection.</param>
            <param name="target">The target whose value the resolver will resolve.</param>
            <returns>The newly-created dependency resolver.</returns>
        </member>
        <member name="T:Ninject.Core.Resolution.ResolverFactoryBase">
            <summary>
            A baseline definition of a <see cref="T:Ninject.Core.Resolution.IResolverFactory"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Resolution.ResolverFactoryBase.Create(Ninject.Core.Binding.IBinding,Ninject.Core.Planning.Targets.ITarget)">
            <summary>
            Creates a dependency resolver for the specified binding and target.
            </summary>
            <param name="binding">The binding requesting the injection.</param>
            <param name="target">The target whose value the resolver will resolve.</param>
            <returns>The newly-created dependency resolver.</returns>
        </member>
        <member name="T:Ninject.Core.Resolution.StandardResolverFactory">
            <summary>
            The stock implementation of an <see cref="T:Ninject.Core.Resolution.IResolverFactory"/>.
            </summary>
        </member>
        <member name="M:Ninject.Core.Resolution.StandardResolverFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Resolution.StandardResolverFactory"/> class.
            </summary>
        </member>
        <member name="T:Ninject.Core.Tracking.IScope">
            <summary>
            An activation scope. When instances are activated once a scope is created, they are
            tracked by the scope. When it is disposed, all instances tracked therein will be released
            via the kernel.
            </summary>
        </member>
        <member name="M:Ninject.Core.Tracking.IScope.Register(System.Object)">
            <summary>
            Registers the specified instance in the scope.
            </summary>
        </member>
        <member name="P:Ninject.Core.Tracking.IScope.Kernel">
            <summary>
            Gets the kernel associated with the scope.
            </summary>
        </member>
        <member name="T:Ninject.Core.Tracking.IScopeFactory">
            <summary>
            Creates <see cref="T:Ninject.Core.Tracking.IScope"/>s which can be used for deterministic disposal.
            </summary>
        </member>
        <member name="M:Ninject.Core.Tracking.IScopeFactory.Create">
            <summary>
            Creates a new scope.
            </summary>
            <returns>The newly-created scope.</returns>
        </member>
        <member name="T:Ninject.Core.Tracking.StandardScope">
            <summary>
            A stock implementation of a scope.
            </summary>
        </member>
        <member name="M:Ninject.Core.Tracking.StandardScope.Dispose(System.Boolean)">
            <summary>
            Releases all resources currently held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Tracking.StandardScope.#ctor(Ninject.Core.IKernel)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.Tracking.StandardScope"/> class.
            </summary>
            <param name="kernel">The kernel to associate with the scope.</param>
        </member>
        <member name="M:Ninject.Core.Tracking.StandardScope.Register(System.Object)">
            <summary>
            Registers the specified instance in the scope.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:Ninject.Core.Tracking.StandardScope.Kernel">
            <summary>
            Gets the kernel associated with the scope.
            </summary>
            <value></value>
        </member>
        <member name="T:Ninject.Core.Tracking.StandardScopeFactory">
            <summary>
            The stock definition of a <see cref="T:Ninject.Core.Tracking.IScopeFactory"/>.
            </summary>
            <remarks>
            I know, this looks like overkill. :) It exists to allow users to inject custom
            implementations into the kernel for more exotic situations.
            </remarks>
        </member>
        <member name="M:Ninject.Core.Tracking.StandardScopeFactory.Create">
            <summary>
            Creates a new scope.
            </summary>
            <returns>The newly-created scope.</returns>
        </member>
        <member name="T:Ninject.Core.Tracking.InstanceTrackingMode">
            <summary>
            Describes the method by which the kernel will track instances for deterministic disposal.
            </summary>
        </member>
        <member name="F:Ninject.Core.Tracking.InstanceTrackingMode.Default">
            <summary>
            Indicates that only instances of services whose behaviors with a <c>ShouldTrackInstances</c>
            equal to <see langword="true"/> should be tracked.
            </summary>
        </member>
        <member name="F:Ninject.Core.Tracking.InstanceTrackingMode.TrackEverything">
            <summary>
            Indicates that all instances should be tracked, regardless of what their behavior says.
            </summary>
        </member>
        <member name="F:Ninject.Core.Tracking.InstanceTrackingMode.TrackNothing">
            <summary>
            Indicates that no instances should be tracked, regardless of what their behavior says.
            </summary>
        </member>
        <member name="T:Ninject.Core.Tracking.ITracker">
            <summary>
            Tracks contextualized instances so they can be properly disposed of.
            </summary>
        </member>
        <member name="M:Ninject.Core.Tracking.ITracker.Track(System.Object,Ninject.Core.Activation.IContext)">
            <summary>
            Begins tracking the specified instance.
            </summary>
            <param name="instance">The instance to track.</param>
            <param name="context">The context in which it was activated.</param>
        </member>
        <member name="M:Ninject.Core.Tracking.ITracker.Release(System.Object)">
            <summary>
            Releases the specified instance via the binding which was used to activate it, and
            stops tracking it.
            </summary>
            <param name="instance">The instance to release.</param>
            <returns><see langword="True"/> if the instance was being tracked, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Tracking.ITracker.ReleaseAll">
            <summary>
            Releases all of the instances that are currently being tracked.
            </summary>
        </member>
        <member name="P:Ninject.Core.Tracking.ITracker.ReferenceCount">
            <summary>
            Gets the number of instances currently being tracked.
            </summary>
        </member>
        <member name="T:Ninject.Core.Tracking.StandardTracker">
            <summary>
            Tracks contextualized instances so they can be properly disposed of.
            </summary>
        </member>
        <member name="M:Ninject.Core.Tracking.StandardTracker.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.Tracking.StandardTracker.Track(System.Object,Ninject.Core.Activation.IContext)">
            <summary>
            Begins tracking the specified instance.
            </summary>
            <param name="instance">The instance to track.</param>
            <param name="context">The context in which it was activated.</param>
        </member>
        <member name="M:Ninject.Core.Tracking.StandardTracker.Release(System.Object)">
            <summary>
            Releases the specified instance via the binding which was used to activate it, and
            stops tracking it.
            </summary>
            <param name="instance">The instance to release.</param>
            <returns><see langword="True"/> if the instance was being tracked, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.Tracking.StandardTracker.ReleaseAll">
            <summary>
            Releases all of the instances that are currently being tracked.
            </summary>
        </member>
        <member name="P:Ninject.Core.Tracking.StandardTracker.ReferenceCount">
            <summary>
            Gets the number of instances currently being tracked.
            </summary>
        </member>
        <member name="T:Ninject.Core.IKernel">
            <summary>
            A lightweight, flexible, general-purpose inversion-of-control container.
            </summary>
        </member>
        <member name="M:Ninject.Core.IKernel.Get``1">
            <summary>
            Retrieves an instance of the specified type from the kernel.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:Ninject.Core.IKernel.Get``1(Ninject.Core.Parameters.IParameterCollection)">
            <summary>
            Retrieves an instance of the specified type from the kernel.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <param name="parameters">A collection of transient parameters to use.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:Ninject.Core.IKernel.Get``1(Ninject.Core.Activation.IContext)">
            <summary>
            Retrieves an instance of the specified type from the kernel, within an existing context.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <param name="context">The context under which to resolve the type's binding.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:Ninject.Core.IKernel.Get(System.Type)">
            <summary>
            Retrieves an instance of the specified type from the kernel.
            </summary>
            <param name="type">The type to retrieve.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:Ninject.Core.IKernel.Get(System.Type,Ninject.Core.Parameters.IParameterCollection)">
            <summary>
            Retrieves an instance of the specified type from the kernel.
            </summary>
            <param name="type">The type to retrieve.</param>
            <param name="parameters">A collection of transient parameters to use.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:Ninject.Core.IKernel.Get(System.Type,Ninject.Core.Activation.IContext)">
            <summary>
            Retrieves an instance of the specified type from the kernel, within an existing context.
            </summary>
            <param name="type">The type to retrieve.</param>
            <param name="context">The context under which to resolve the type's binding.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:Ninject.Core.IKernel.Inject(System.Object)">
            <summary>
            Injects dependencies into an existing instance of a service. This should not be used
            for most cases; instead, see <c>Get()</c>.
            </summary>
            <param name="instance">The instance to inject.</param>
        </member>
        <member name="M:Ninject.Core.IKernel.Release(System.Object)">
            <summary>
            Releases the specfied instance. This method should be called after the instance is no
            longer needed.
            </summary>
            <param name="instance">The instance to release.</param>
            <returns><see langword="True"/> if the kernel was tracking the instance, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Core.IKernel.AddBinding(Ninject.Core.Binding.IBinding)">
            <summary>
            Registers a binding with the kernel.
            </summary>
            <param name="binding">The binding to register.</param>
        </member>
        <member name="M:Ninject.Core.IKernel.Load(Ninject.Core.IModule[])">
            <summary>
            Loads the specified modules into the kernel.
            </summary>
            <param name="modules">The modules to load.</param>
        </member>
        <member name="M:Ninject.Core.IKernel.Load(System.Collections.Generic.IEnumerable{Ninject.Core.IModule})">
            <summary>
            Loads the specified modules into the kernel.
            </summary>
            <param name="modules">The modules to load.</param>
        </member>
        <member name="M:Ninject.Core.IKernel.BeginScope">
            <summary>
            Begins a new activation scope. When the scope is disposed, all instances activated
            within it will be released.
            </summary>
            <returns>The newly-created scope.</returns>
        </member>
        <member name="M:Ninject.Core.IKernel.EndScope">
            <summary>
            Ends the previous scope.
            </summary>
        </member>
        <member name="P:Ninject.Core.IKernel.Components">
            <summary>
            Gets the kernel's component container.
            </summary>
        </member>
        <member name="P:Ninject.Core.IKernel.Configuration">
            <summary>
            Gets the name of the configuration that the kernel is currently using. This
            value can be referred to in conditions to alter bindings.
            </summary>
        </member>
        <member name="P:Ninject.Core.IKernel.Options">
            <summary>
            Gets an object containing configuration information about the kernel.
            </summary>
        </member>
        <member name="T:Ninject.Core.KernelBase">
            <summary>
            The baseline implemenation of a kernel with no components installed. This type can be
            extended to customize the kernel.
            </summary>
        </member>
        <member name="M:Ninject.Core.KernelBase.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Core.KernelBase.#ctor(Ninject.Core.KernelOptions,System.String,System.Collections.Generic.IEnumerable{Ninject.Core.IModule})">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.KernelBase"/> class.
            </summary>
            <param name="options">The options to use.</param>
            <param name="configuration">The name of the configuration to use.</param>
            <param name="modules">The modules to load into the kernel.</param>
        </member>
        <member name="M:Ninject.Core.KernelBase.AddBinding(Ninject.Core.Binding.IBinding)">
            <summary>
            Registers a new binding with the kernel.
            </summary>
            <param name="binding">The binding to register.</param>
        </member>
        <member name="M:Ninject.Core.KernelBase.Load(Ninject.Core.IModule[])">
            <summary>
            Loads the specified modules into the kernel.
            </summary>
            <param name="modules">The modules to load.</param>
        </member>
        <member name="M:Ninject.Core.KernelBase.Load(System.Collections.Generic.IEnumerable{Ninject.Core.IModule})">
            <summary>
            Loads the specified modules into the kernel.
            </summary>
            <param name="modules">The modules to load.</param>
        </member>
        <member name="M:Ninject.Core.KernelBase.BeginScope">
            <summary>
            Begins a new activation scope. When the scope is disposed, all instances activated
            within it will be released.
            </summary>
            <returns>The newly-created scope.</returns>
        </member>
        <member name="M:Ninject.Core.KernelBase.EndScope">
            <summary>
            Ends the previous scope.
            </summary>
        </member>
        <member name="M:Ninject.Core.KernelBase.Get``1">
            <summary>
            Retrieves an instance of the specified type from the kernel.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:Ninject.Core.KernelBase.Get``1(Ninject.Core.Parameters.IParameterCollection)">
            <summary>
            Retrieves an instance of the specified type from the kernel.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <param name="parameters">A collection of transient parameters to use.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:Ninject.Core.KernelBase.Get``1(Ninject.Core.Activation.IContext)">
            <summary>
            Retrieves an instance of the specified type from the kernel, within an existing context.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <param name="context">The context under which to resolve the type's binding.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:Ninject.Core.KernelBase.Get(System.Type)">
            <summary>
            Retrieves an instance of the specified type from the kernel.
            </summary>
            <param name="type">The type to retrieve.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:Ninject.Core.KernelBase.Get(System.Type,Ninject.Core.Parameters.IParameterCollection)">
            <summary>
            Retrieves an instance of the specified type from the kernel.
            </summary>
            <param name="type">The type to retrieve.</param>
            <param name="parameters">A collection of transient parameters to use.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:Ninject.Core.KernelBase.Get(System.Type,Ninject.Core.Activation.IContext)">
            <summary>
            Retrieves an instance of the specified type from the kernel, within an existing context.
            </summary>
            <param name="type">The type to retrieve.</param>
            <param name="context">The context under which to resolve the type's binding.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:Ninject.Core.KernelBase.Inject(System.Object)">
            <summary>
            Injects dependencies into an existing instance of a service. This should not be used
            for most cases; instead, see <c>Get()</c>.
            </summary>
            <param name="instance">The instance to inject.</param>
        </member>
        <member name="M:Ninject.Core.KernelBase.Release(System.Object)">
            <summary>
            Releases the provided instance. This method should be called after the instance is no
            longer needed.
            </summary>
            <param name="instance">The instance to release.</param>
        </member>
        <member name="M:Ninject.Core.KernelBase.InitializeComponents">
            <summary>
            Connects all kernel components. Called during initialization of the kernel.
            </summary>
        </member>
        <member name="M:Ninject.Core.KernelBase.ValidateComponents">
            <summary>
            Called during kernel initialization to ensure that all required components are available.
            If components are missing, an exception is thrown.
            </summary>
        </member>
        <member name="M:Ninject.Core.KernelBase.LoadModules(System.Collections.Generic.IEnumerable{Ninject.Core.IModule})">
            <summary>
            Loads the specified modules into the kernel.
            </summary>
        </member>
        <member name="M:Ninject.Core.KernelBase.ActivateEagerServices">
            <summary>
            Activates any services that should be eagerly activated.
            </summary>
        </member>
        <member name="M:Ninject.Core.KernelBase.ResolveBinding(System.Type,Ninject.Core.Activation.IContext)">
            <summary>
            Determines which binding should be used for the specified service in the specified context.
            </summary>
            <param name="service">The type whose binding is to be resolved.</param>
            <param name="context">The context in which the binding is being resolved.</param>
            <returns>The selected binding.</returns>
        </member>
        <member name="M:Ninject.Core.KernelBase.CreateImplicitSelfBinding(System.Type)">
            <summary>
            Creates a new self binding for the specified type.
            </summary>
            <param name="service">The service type to self-bind.</param>
            <returns>The new binding.</returns>
        </member>
        <member name="M:Ninject.Core.KernelBase.ResolveInstance(System.Type,Ninject.Core.Activation.IContext,System.Boolean)">
            <summary>
            Resolves an instance of a bound type.
            </summary>
            <param name="service">The type of instance to resolve.</param>
            <param name="context">The context in which the instance should be resolved.</param>
            <param name="isEagerActivation">A value indicating whether this is an eager activation request.</param>
            <returns>The resolved instance.</returns>
        </member>
        <member name="M:Ninject.Core.KernelBase.InjectExistingObject(System.Object)">
            <summary>
            Injects an existing instance of a service.
            </summary>
            <param name="instance">The existing instance to inject.</param>
        </member>
        <member name="M:Ninject.Core.KernelBase.CreateRootContext(System.Type,Ninject.Core.Parameters.IParameterCollection)">
            <summary>
            Creates a new root context.
            </summary>
            <param name="service">The type that was requested.</param>
            <param name="parameters">A collection of transient parameters, or <see langword="null"/> for none.</param>
            <returns>A new <see cref="T:Ninject.Core.Activation.IContext"/> representing the root context.</returns>
        </member>
        <member name="M:Ninject.Core.KernelBase.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Resolves an instance of the specified type, if a default binding has been registered for it.
            </summary>
            <param name="service">The type to retrieve.</param>
            <returns>An instance of the requested type, or <see langword="null"/> if there is no default binding.</returns>
        </member>
        <member name="P:Ninject.Core.KernelBase.Components">
            <summary>
            Gets the kernel's component container.
            </summary>
        </member>
        <member name="P:Ninject.Core.KernelBase.Configuration">
            <summary>
            Gets the name of the configuration that the kernel is currently using. This
            value can be referred to in conditions to alter bindings.
            </summary>
        </member>
        <member name="P:Ninject.Core.KernelBase.Options">
            <summary>
            Gets an object containing configuration information about the kernel.
            </summary>
        </member>
        <member name="P:Ninject.Core.KernelBase.Logger">
            <summary>
            Gets or sets the logger associated with the kernel.
            </summary>
        </member>
        <member name="T:Ninject.Core.KernelOptions">
            <summary>
            Contains configuration information about a <see cref="T:Ninject.Core.IKernel"/>.
            </summary>
        </member>
        <member name="F:Ninject.Core.KernelOptions.Default">
            <summary>
            The default configuration options for a kernel.
            </summary>
        </member>
        <member name="M:Ninject.Core.KernelOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.KernelOptions"/> class.
            </summary>
        </member>
        <member name="P:Ninject.Core.KernelOptions.ImplicitSelfBinding">
            <summary>
            Gets or sets a value indicating whether automatic self-binding is enabled.
            </summary>
            <remarks>
            If <see langword="true"/>, when a type without any bindings is requested from the kernel,
            the kernel will automatically generate an implicit self-binding for the type if it can
            be self-bound. If <see langword="false"/>, the kernel will throw an exception when a type
            with no bindings is requested.
            </remarks>
        </member>
        <member name="P:Ninject.Core.KernelOptions.GenerateDebugInfo">
            <summary>
            Gets or sets a value indicating whether the kernel should generate debugging information
            for bindings and activation contexts.
            </summary>
            <remarks>
            This adds information to the error message that is displayed if there is a problem during
            binding or activation at the expense of additional overhead. This typically should be
            turned off in production environments.
            </remarks>
        </member>
        <member name="P:Ninject.Core.KernelOptions.InjectNonPublicMembers">
            <summary>
            Gets or sets a value indicating whether non-public members should be injected by the
            kernel during activation.
            </summary>
            <remarks>
            If <see langword="true"/>, the kernel will examine non-public (private, protected,
            and internal) members for injection. If <see langword="false"/>, only public members
            will be considered.
            </remarks>
        </member>
        <member name="P:Ninject.Core.KernelOptions.UseEagerActivation">
            <summary>
            Gets or sets a value indicating whether types with restricted instantation (i.e.
            singletons, one-per-threads, etc.) should be eagerly activated.
            </summary>
            <remarks>
            If <see langword="true"/>, the kernel with activate these instances immediately
            when bindings are registered for them. If <see langword="false"/>, the instances
            will be lazily activated the first time they are requested.
            </remarks>
        </member>
        <member name="P:Ninject.Core.KernelOptions.UseReflectionBasedInjection">
            <summary>
            Gets or sets a value indicating whether instances should be created and values be
            injected via reflection rather than dynamic delegates created via lightweight code
            generation.
            </summary>
            <remarks>
            If <see langword="true"/>, the kernel will use reflection to create and inject
            instances. If <see langword="false"/>, the kernel will use lightweight code generation
            instead. Reflection may be faster in situations with a large amount of singletons
            and very few transient services.
            </remarks>
        </member>
        <member name="P:Ninject.Core.KernelOptions.IgnoreProviderCompatibility">
            <summary>
            Gets or sets a value indicating whether the kernel should throw an exception if a
            provider returns an instance of a type that is not compatible with the requested service.
            </summary>
            <remarks>
            If <see langword="true"/>, the kernel will throw an <see cref="T:Ninject.Core.ActivationException"/>
            if a provider returns an instance of a type that does not extend or implement the
            requested service. If <see langword="false"/>, the kernel will continue to activate
            the instance as normal, but may throw an <see cref="T:System.InvalidCastException"/> if an
            activation strategy does not correct the incompatibility (via a proxy, for example).
            </remarks>
        </member>
        <member name="P:Ninject.Core.KernelOptions.InstanceTrackingMode">
            <summary>
            Gets or sets the mode by which the kernel will track instances. <see cref="T:System.WeakReference"/>s
            will be held for each tracked instance, and when the kernel is disposed, all tracked
            instances whose references are still alive will be released by passing them to the
            <c>Release()</c> method on the kernel.
            </summary>
            <remarks>
            By default, the kernel will use <c>InstanceTrackingMode.Default</c>, which means that only
            instances of services whose behaviors are marked as <c>ShouldTrackInstances</c> will
            be tracked.
            </remarks>
        </member>
        <member name="P:Ninject.Core.KernelOptions.DefaultBehaviorType">
            <summary>
            Gets or sets the built-in behavior that should be used for services registered without
            a behavior defined.
            </summary>
            <remarks>
            By default, the kernel will use the <see cref="T:Ninject.Core.Behavior.TransientBehavior"/>.
            </remarks>
        </member>
        <member name="P:Ninject.Core.KernelOptions.InjectAttributeType">
            <summary>
            Gets or sets the attribute type that will control injections. The kernel will look for
            members decorated with attributes of the specified type and inject them with values
            as applicable.
            </summary>
            <remarks>
            By default, the kernel will look for members decorated with <see cref="T:Ninject.Core.InjectAttribute"/>.
            </remarks>
        </member>
        <member name="P:Ninject.Core.KernelOptions.OptionalAttributeType">
            <summary>
            Gets or sets the attribute type that will indicate optional injections.
            </summary>
            <remarks>
            By default, the kernel will look for members decorated with <see cref="T:Ninject.Core.OptionalAttribute"/>.
            </remarks>
        </member>
        <member name="T:Ninject.Core.StandardKernel">
            <summary>
            The stock implementation of a kernel.
            </summary>
        </member>
        <member name="M:Ninject.Core.StandardKernel.#ctor(Ninject.Core.IModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.StandardKernel"/> class.
            </summary>
            <param name="modules">One or more modules to load into the kernel.</param>
        </member>
        <member name="M:Ninject.Core.StandardKernel.#ctor(Ninject.Core.KernelOptions,Ninject.Core.IModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.StandardKernel"/> class.
            </summary>
            <param name="options">The kernel options to use.</param>
            <param name="modules">One or more modules to load into the kernel.</param>
        </member>
        <member name="M:Ninject.Core.StandardKernel.#ctor(System.String,Ninject.Core.IModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.StandardKernel"/> class.
            </summary>
            <param name="configuration">The name of the configuration to use.</param>
            <param name="modules">One or more modules to load into the kernel.</param>
        </member>
        <member name="M:Ninject.Core.StandardKernel.#ctor(Ninject.Core.KernelOptions,System.String,Ninject.Core.IModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Core.StandardKernel"/> class.
            </summary>
            <param name="options">The kernel options to use.</param>
            <param name="configuration">The name of the configuration to use.</param>
            <param name="modules">One or more modules to load into the kernel.</param>
        </member>
        <member name="M:Ninject.Core.StandardKernel.InitializeComponents">
            <summary>
            Connects all kernel components. Called during initialization of the kernel.
            </summary>
        </member>
    </members>
</doc>
