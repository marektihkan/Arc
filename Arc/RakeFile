include FileTest
require "Configuration/Build/Rake/Path.rb"
require "Configuration/Build/Rake/Copy.rb"
require "Configuration/Build/Rake/Run.rb"
require "Configuration/Build/Rake/Create.rb"
require "Configuration/Build/Rake/Delete.rb"
require "Configuration/Build/Rake/Show.rb"


SOLUTION_NAME = "Arc"
SOLUTION_OWNER = "Marek Tihkan"
SOLUTION_VERSION = "0.8.0"
SOLUTION_CONFIGURATION = "release"

desc "Compiles, unit tests, generates the database"
task :all => [:default]

desc "**Default**, compiles and runs tests"
task :default => [:test]

desc "Cleans the working directory"
task :clean do
  Show.message "Cleaning solution from previous build."
  Delete.directory Path.to.build
end

desc "Prepares the working directory for a new build"
task :prepare do
  Show.message "Creating build directories."
  Create.directory Path.to.build
  Create.directory Path.to.build.binary
  Create.directory Path.to.build.tests
  Create.directory Path.to.build.results
end

desc "Update the version information for the build"
task :version do
  Show.message "Creating versioning file."
  Create.versioning_file.
          for_product_named(SOLUTION_NAME).
          versioned(SOLUTION_VERSION).
          reserve_all_rights_to(SOLUTION_OWNER).
          to(Path.to.source.file('CommonAssemblyInfo.cs'))
end

desc "Compiles the solution"
task :compile => [:clean, :prepare, :version] do
  Show.message "Compiling solution."
  Run.MSBuild.for_solution(SOLUTION_NAME).
          with_configuration(SOLUTION_CONFIGURATION).
          rebuild

  Copy.assemblies.
          from(Path.to.source.any.bin.directory(SOLUTION_CONFIGURATION)).
          to(Path.to.build.binary)
  Copy.configuration.
          from(Path.to.source.any.bin.directory(SOLUTION_CONFIGURATION)).
          to(Path.to.build.binary)
  Copy.binaries.
          from(Path.to.tests.any.bin.directory(SOLUTION_CONFIGURATION)).
          to(Path.to.build.tests)
  Copy.configuration.
          from(Path.to.tests.any.bin.directory(SOLUTION_CONFIGURATION)).
          to(Path.to.build.tests)
end

desc "Runs tests"
task :test => [:unit_test, :integration_test]

desc "Runs unit tests"
task :unit_test => :compile do
  Show.message 'Running unit tests.'
  Run.xUnitTests.located_at(Path.to.build.tests).
          save_results_to(Path.to.build.results).
          from_assembly('Arc.Unit.Tests')
end

desc "Runs integration tests"
task :integration_test => :compile do
  Show.message 'Running integration tests.'
  Run.xUnitTests.located_at(Path.to.build.tests).
          save_results_to(Path.to.build.results).
          from_assembly('Arc.Integration.Tests')
end

desc ""
task :code_coverage do
  Run.CodeCoverageAnalysis.
          outputs_to(Path.to.build.results.file('CodeCoverageRawResults.xml')).
          for(['Arc.Unit.Tests', 'Arc.Integration.Tests'])
end

desc "Publishes framework"
task :publish => :compile do
  Show.message 'Publishing framework.'
  Create.directory Path.to.build.publish
  Copy.assemblies.from(Path.to.build.binary).
          matching('Arc.Domain,Arc.Infrastructure,Arc.Testing,AutoMapper').
          to(Path.to.build.publish)

  Create.directory Path.to.build.publish.ioc

  Create.directory Path.to.build.publish.ioc.StructureMap
  Copy.assemblies.from(Path.to.build.binary).matching('*StructureMap*').to(Path.to.build.publish.ioc.StructureMap)

  Create.directory Path.to.build.publish.ioc.CastleWindsor
  Copy.assemblies.from(Path.to.build.binary).
          matching('*CastleWindsor*,Castle.Windsor,Castle.Core,Castle.MicroKernel').
          to(Path.to.build.publish.ioc.CastleWindsor)

  Create.directory Path.to.build.publish.ioc.Ninject
  Copy.assemblies.from(Path.to.build.binary).matching('*Ninject*').to(Path.to.build.publish.ioc.Ninject)

  Create.directory Path.to.build.publish.data

  Create.directory Path.to.build.publish.data.NHibernate
  Copy.assemblies.from(Path.to.build.binary).
          matching('*NHibernate*,Castle.Core,Castle.DynamicProxy2,Iesi.Collections,log4net').
          to(Path.to.build.publish.data.NHibernate)

  Create.directory Path.to.build.publish.logging

  Create.directory Path.to.build.publish.logging.Log4Net
  Copy.assemblies.from(Path.to.build.binary).matching('*log4net*').to(Path.to.build.publish.logging.Log4Net)

  Create.directory Path.to.build.publish.validation

  Create.directory Path.to.build.publish.validation.EnterpriseLibrary
  Copy.assemblies.from(Path.to.build.binary).
          matching('*EnterpriseLibrary*,Microsoft.Practices.ObjectBuilder2,Microsoft.Practices.Unity').
          to(Path.to.build.publish.validation.EnterpriseLibrary) 
end