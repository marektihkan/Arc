<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Arc.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Arc.Infrastructure.Configuration.IConvention`1">
            <summary>
            Convention for configuration.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.IConvention`1.Apply(`0)">
            <summary>
            Applies this convention.
            </summary>
        </member>
        <member name="T:Arc.Infrastructure.Configuration.Dependencies.RegistryConfiguration">
            <summary>
            Registers registries to service locator.
            </summary>
        </member>
        <member name="T:Arc.Infrastructure.Configuration.IConfiguration`1">
            <summary>
            Configuration module for specified handler.
            </summary>
            <typeparam name="TConfigurationHandler">The type of the configuration handler.</typeparam>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.IConfiguration`1.Load(`0)">
            <summary>
            Loads the specified configuration to handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Dependencies.RegistryConfiguration.Default">
            <summary>
            Creates default configuration.
            </summary>
            <returns>Default configuration.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Dependencies.RegistryConfiguration.Load(Arc.Infrastructure.Dependencies.IServiceLocator)">
            <summary>
            Loads the registry configuration to service locator.
            </summary>
            <param name="handler">The service locator.</param>
        </member>
        <member name="T:Arc.Infrastructure.Configuration.Dependencies.LoggingIsNotUsedConfiguration">
            <summary>
            Configuration for logging when its not used.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Dependencies.LoggingIsNotUsedConfiguration.Default">
            <summary>
            Creates default configuration.
            </summary>
            <returns>Default configuration.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Dependencies.LoggingIsNotUsedConfiguration.Load(Arc.Infrastructure.Dependencies.IServiceLocator)">
            <summary>
            Loads the logging configuration to service locator.
            </summary>
            <param name="handler">The service locator.</param>
        </member>
        <member name="T:Arc.Infrastructure.Configuration.Dependencies.ValidationIsNotUsedConfiguration">
            <summary>
            Configuration for validation when its not used.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Dependencies.ValidationIsNotUsedConfiguration.Default">
            <summary>
            Creates default configuration.
            </summary>
            <returns>Default configuration.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Dependencies.ValidationIsNotUsedConfiguration.Load(Arc.Infrastructure.Dependencies.IServiceLocator)">
            <summary>
            Loads the validation configuration to service locator.
            </summary>
            <param name="handler">The service locator.</param>
        </member>
        <member name="T:Arc.Infrastructure.Configuration.Routing.BaseRoutesConfiguration">
            <summary>
            Base routes configuration for web application.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Routing.BaseRoutesConfiguration.Ignore(Arc.Infrastructure.Configuration.Routing.IRouteBuilder[])">
            <summary>
            Ignores the specified routes.
            </summary>
            <param name="routes">The routes.</param>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Routing.BaseRoutesConfiguration.Map(Arc.Infrastructure.Configuration.Routing.IRouteBuilder[])">
            <summary>
            Registers the specified routes.
            </summary>
            <param name="routes">The routes.</param>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Routing.BaseRoutesConfiguration.Load(System.Web.Routing.RouteCollection)">
            <summary>
            Loads the specified routes.
            </summary>
            <param name="routes">The routes.</param>
        </member>
        <member name="T:Arc.Infrastructure.Configuration.Routing.INamedRouteBuilder">
            <summary>
            Route builder with route name.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Routing.INamedRouteBuilder.Url(System.String)">
            <summary>
            Specifies route URL.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="T:Arc.Infrastructure.Configuration.Routing.IRouteBuilder">
            <summary>
            Route builder.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Routing.IRouteBuilder.DefaultsAre(System.Object)">
            <summary>
            Specifies route defaults.
            </summary>
            <param name="defaults">The defaults.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Routing.IRouteBuilder.ConstrainedBy(System.Object)">
            <summary>
            Specifies route's constraints.
            </summary>
            <param name="constraint">The constraint.</param>
            <returns></returns>
        </member>
        <member name="P:Arc.Infrastructure.Configuration.Routing.IRouteBuilder.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:Arc.Infrastructure.Configuration.Routing.Route">
            <summary>
            Web application route.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Routing.Route.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Configuration.Routing.Route"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Routing.Route.Named(System.String)">
            <summary>
            Specifies route name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Routing.Route.Url(System.String)">
            <summary>
            Specifies route URL.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Routing.Route.DefaultsAre(System.Object)">
            <summary>
            Specifies route defaults.
            </summary>
            <param name="defaults">The defaults.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Routing.Route.ConstrainedBy(System.Object)">
            <summary>
            Specifies route's constraints.
            </summary>
            <param name="constraint">The constraint.</param>
            <returns></returns>
        </member>
        <member name="P:Arc.Infrastructure.Configuration.Routing.Route.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:Arc.Infrastructure.Configuration.Routing.Route.RouteDataContract">
            <summary>
            Route data.
            </summary>
        </member>
        <member name="P:Arc.Infrastructure.Configuration.Routing.Route.RouteDataContract.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Arc.Infrastructure.Configuration.Routing.Route.RouteDataContract.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Arc.Infrastructure.Configuration.Routing.Route.RouteDataContract.Defaults">
            <summary>
            Gets or sets the defaults.
            </summary>
            <value>The defaults.</value>
        </member>
        <member name="P:Arc.Infrastructure.Configuration.Routing.Route.RouteDataContract.Constraint">
            <summary>
            Gets or sets the constraint.
            </summary>
            <value>The constraint.</value>
        </member>
        <member name="P:Arc.Infrastructure.Configuration.Routing.Route.RouteDataContract.Namespaces">
            <summary>
            Gets or sets the namespaces.
            </summary>
            <value>The namespaces.</value>
        </member>
        <member name="T:Arc.Infrastructure.Data.ActiveRecordExtensions">
            <summary>
            Active record pattern extensions for entities.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Data.ActiveRecordExtensions.Save(Arc.Domain.Identity.ISaveable)">
            <summary>
            Saves the specified entity.
            </summary>
            <param name="saveable">The saveable.</param>
        </member>
        <member name="M:Arc.Infrastructure.Data.ActiveRecordExtensions.Delete(Arc.Domain.Identity.IDeletable)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="deletable">The deletable.</param>
        </member>
        <member name="T:Arc.Infrastructure.Data.BaseGenericRepository`2">
            <summary>
            Base repository.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TRepository">The type of the repository.</typeparam>
        </member>
        <member name="M:Arc.Infrastructure.Data.BaseGenericRepository`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Data.BaseRepository`1"/> class.
            </summary>
            <param name="repository">The repository.</param>
        </member>
        <member name="P:Arc.Infrastructure.Data.BaseGenericRepository`2.InnerRepository">
            <summary>
            Gets the inner repository.
            </summary>
            <value>The inner repository.</value>
        </member>
        <member name="P:Arc.Infrastructure.Data.BaseGenericRepository`2.UnitOfWork">
            <summary>
            Gets the unit of work.
            </summary>
            <value>The unit of work.</value>
        </member>
        <member name="T:Arc.Infrastructure.Data.Find`1">
            <summary>
            Finds entites from repository.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Arc.Infrastructure.Data.Find`1.ByIdentity(System.Object)">
            <summary>
            Finds entity by the identity.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.Find`1.By(Arc.Domain.Specifications.ISpecification{`0})">
            <summary>
            Finds entity by the specified specification.
            </summary>
            <param name="specification">The specification.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.Find`1.By(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Finds entity by the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.Find`1.All">
            <summary>
            Finds all entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.Find`1.AllBy(Arc.Domain.Specifications.ISpecification{`0})">
            <summary>
            Finds all entities by specification.
            </summary>
            <param name="specification">The specification.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.Find`1.AllBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Finds all entities by predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="T:Arc.Infrastructure.Configuration.Conventions.ServiceLocatorConvention">
            <summary>
            Base class for conventions.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Conventions.ServiceLocatorConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Configuration.Conventions.ServiceLocatorConvention"/> class.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Conventions.ServiceLocatorConvention.For(System.Reflection.Assembly[])">
            <summary>
            Applies convention for specified assemblies.
            </summary>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Conventions.ServiceLocatorConvention.For(System.String[])">
            <summary>
            Applies convention for specified assemblies.
            </summary>
            <param name="assemblyNames">The assembly names.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Conventions.ServiceLocatorConvention.Apply(Arc.Infrastructure.Dependencies.IServiceLocator)">
            <summary>
            Applies this convention.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Arc.Infrastructure.Configuration.Conventions.ServiceLocatorConvention.DefineRules">
            <summary>
            Defines the rules of convention.
            </summary>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.Registration.IRegistration">
            <summary>
            Registration for service locator.
            </summary>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.Registration.IRegistration.ServiceType">
            <summary>
            Gets or sets the type of the service.
            </summary>
            <value>The type of the service.</value>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.Registration.IRegistration.Scope">
            <summary>
            Gets or sets the life style scope.
            </summary>
            <value>The life style scope.</value>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.Registration.IRegistration.ImplementationType">
            <summary>
            Gets or sets the type of the implementation.
            </summary>
            <value>The type of the implementation.</value>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.Registration.IRegistration.Factory">
            <summary>
            Gets or sets the factory method.
            </summary>
            <value>The factory method.</value>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.Registration.IRegistration.LifeStyle">
            <summary>
            Gets the life style builder.
            </summary>
            <value>The life style builder.</value>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.Registration.IServiceBindingSyntax">
            <summary>
            Configuration syntax for binding service to implementation.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.IServiceBindingSyntax.IsImplementedBy``1">
            <summary>
            Service is implemented by specified type.
            </summary>
            <typeparam name="TImplementation">Type of implementation.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.IServiceBindingSyntax.IsImplementedBy(System.Type)">
            <summary>
            Service is implemented by specified type.
            </summary>
            <param name="type">The type of implementation.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.IServiceBindingSyntax.IsConstructedBy(System.Func{Arc.Infrastructure.Dependencies.IServiceLocator,System.Object})">
            <summary>
            Service is constructed by specified factory method.
            </summary>
            <param name="factoryMethod">The factory method.</param>
            <returns></returns>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.Registration.IServiceLifeStyleSyntax">
            <summary>
            Configuration syntax for setting service life style.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.IServiceLifeStyleSyntax.IsTransient">
            <summary>
            Life style is transient.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.IServiceLifeStyleSyntax.IsOnePerRequest">
            <summary>
            Life style is one per web request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.IServiceLifeStyleSyntax.IsOnePerThread">
            <summary>
            Life style is one per thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.IServiceLifeStyleSyntax.IsSingelton">
            <summary>
            Life style is singleton.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.IServiceLifeStyleSyntax.IsOnePerRequestOrThread">
            <summary>
            Life style is one per web request (if web context exists) or thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.IServiceLifeStyleSyntax.Is(Arc.Infrastructure.Dependencies.Registration.ServiceLifeStyle)">
            <summary>
            Life style is spesified style.
            </summary>
            <param name="lifeStyle">The life style.</param>
            <returns></returns>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl">
            <summary>
            Registration options for service locator.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl"/> class.
            </summary>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl.IsImplementedBy``1">
            <summary>
            Service is implemented by specified type.
            </summary>
            <typeparam name="TImplementation">Type of implementation.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl.IsImplementedBy(System.Type)">
            <summary>
            Service is implemented by specified type.
            </summary>
            <param name="type">The type of implementation.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl.IsConstructedBy(System.Func{Arc.Infrastructure.Dependencies.IServiceLocator,System.Object})">
            <summary>
            Service is constructed by specified factory method.
            </summary>
            <param name="factoryMethod">The factory method.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl.IsTransient">
            <summary>
            Life style is transient.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl.IsOnePerRequest">
            <summary>
            Life style is one per web request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl.IsOnePerThread">
            <summary>
            Life style is one per thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl.IsSingelton">
            <summary>
            Life style is singleton.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl.IsOnePerRequestOrThread">
            <summary>
            Life style is one per web request (if web context exists) or thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl.Is(Arc.Infrastructure.Dependencies.Registration.ServiceLifeStyle)">
            <summary>
            Life style is spesified style.
            </summary>
            <param name="lifeStyle">The life style.</param>
            <returns></returns>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl.ServiceType">
            <summary>
            Gets or sets the type of the service.
            </summary>
            <value>The type of the service.</value>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl.ImplementationType">
            <summary>
            Gets or sets the type of the implementation.
            </summary>
            <value>The type of the implementation.</value>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl.Scope">
            <summary>
            Gets or sets the life style scope.
            </summary>
            <value>The life style scope.</value>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl.Factory">
            <summary>
            Gets or sets the factory method.
            </summary>
            <value>The factory method.</value>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.Registration.RegistrationImpl.LifeStyle">
            <summary>
            Gets the life style builder.
            </summary>
            <value>The life style builder.</value>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.Registration.Requested">
            <summary>
            DSL for registering services to service locator.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Requested.Service``1">
            <summary>
            Registers service interface to service locator.
            </summary>
            <typeparam name="TService">The type of the service interface.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Requested.Service(System.Type)">
            <summary>
            Registers service interface to service locator.
            </summary>
            <param name="type">The service interface type.</param>
            <returns></returns>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.Registration.ServiceLifeStyle">
            <summary>
            Service life style.
            </summary>
        </member>
        <member name="F:Arc.Infrastructure.Dependencies.Registration.ServiceLifeStyle.Transient">
            <summary>
            Transient.
            </summary>
        </member>
        <member name="F:Arc.Infrastructure.Dependencies.Registration.ServiceLifeStyle.OnePerRequest">
            <summary>
            One per web request.
            </summary>
        </member>
        <member name="F:Arc.Infrastructure.Dependencies.Registration.ServiceLifeStyle.OnePerThread">
            <summary>
            One per thread.
            </summary>
        </member>
        <member name="F:Arc.Infrastructure.Dependencies.Registration.ServiceLifeStyle.OnePerRequestOrThread">
            <summary>
            One per web request (if web context exists) or thread.
            </summary>
        </member>
        <member name="F:Arc.Infrastructure.Dependencies.Registration.ServiceLifeStyle.Singleton">
            <summary>
            Singleton.
            </summary>
        </member>
        <member name="T:Arc.Infrastructure.Registry.HybridRegistry">
            <summary>
            Registry which adds itmes to web request context or thread.
            </summary>
        </member>
        <member name="T:Arc.Infrastructure.Registry.BaseRegistry">
            <summary>
            Base class for registry.
            </summary>
        </member>
        <member name="T:Arc.Infrastructure.Registry.IRegistry">
            <summary>
            Registry.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Registry.IRegistry.Register(System.String,System.Object)">
            <summary>
            Registers item to the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Arc.Infrastructure.Registry.IRegistry.Get``1(System.String)">
            <summary>
            Gets item with the specified key.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">The key.</param>
            <returns>Item with specified key.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Registry.IRegistry.Get(System.String)">
            <summary>
            Gets item with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>Item with specified key.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Registry.IRegistry.Unregister``1(System.String)">
            <summary>
            Unregisters item from the specified key.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">The key.</param>
            <returns>Unregistered item.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Registry.IRegistry.Unregister(System.String)">
            <summary>
            Unregisters item from the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>Unregistered item.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Registry.BaseRegistry.Register(System.String,System.Object)">
            <summary>
            Registers item to the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Arc.Infrastructure.Registry.BaseRegistry.Get``1(System.String)">
            <summary>
            Gets item with the specified key.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">The key.</param>
            <returns>Item with specified key.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Registry.BaseRegistry.Get(System.String)">
            <summary>
            Gets item with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>Item with specified key.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Registry.BaseRegistry.Unregister``1(System.String)">
            <summary>
            Unregisters item from the specified key.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="key">The key.</param>
            <returns>Unregistered item.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Registry.BaseRegistry.Unregister(System.String)">
            <summary>
            Unregisters item from the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>Unregistered item.</returns>
        </member>
        <member name="P:Arc.Infrastructure.Registry.BaseRegistry.Map">
            <summary>
            Gets the map where items are stored.
            </summary>
            <value>The map.</value>
        </member>
        <member name="T:Arc.Infrastructure.Registry.IHybridRegistry">
            <summary>
            Registry which adds itmes to web request context or thread.
            </summary>
        </member>
        <member name="P:Arc.Infrastructure.Registry.HybridRegistry.Map">
            <summary>
            Gets the map where items are stored.
            </summary>
            <value>The map.</value>
        </member>
        <member name="T:Arc.Infrastructure.Registry.ILocalRegistry">
            <summary>
            Local registry.
            </summary>
        </member>
        <member name="T:Arc.Infrastructure.Registry.IThreadRegistry">
            <summary>
            Registry in thread context.
            </summary>
        </member>
        <member name="T:Arc.Infrastructure.Registry.IWebRequestRegistry">
            <summary>
            Web request registry.
            </summary>
        </member>
        <member name="T:Arc.Infrastructure.Registry.IWebSessionRegistry">
            <summary>
            Web session registry.
            </summary>
        </member>
        <member name="T:Arc.Infrastructure.Registry.ThreadRegistry">
            <summary>
            Registry in thread context.
            </summary>
        </member>
        <member name="P:Arc.Infrastructure.Registry.ThreadRegistry.Map">
            <summary>
            Gets the map where items are stored.
            </summary>
            <value>The map.</value>
        </member>
        <member name="T:Arc.Infrastructure.Utilities.Find">
            <summary>
            Find types.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Utilities.Find.Type(System.String)">
            <summary>
            Gets type of the specified type name.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Utilities.Find.TypeWithInterface``1(System.String)">
            <summary>
            Gets type of the specified type name which implements specified interface.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
        </member>
        <member name="T:Arc.Infrastructure.Utilities.ResolveProvider`1">
            <summary>
            Provider resolver.
            </summary>
            <typeparam name="T">Type of provider interface.</typeparam>
        </member>
        <member name="M:Arc.Infrastructure.Utilities.ResolveProvider`1.Named(System.String)">
            <summary>
            Creates provider of specified type name.
            </summary>
            <param name="providerFullName">Full name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Utilities.ResolveProvider`1.WithRealType(System.Type)">
            <summary>
            Creates provider of specified type.
            </summary>
            <param name="provider">The provider type.</param>
            <returns></returns>
        </member>
        <member name="T:Arc.Infrastructure.Data.BaseRepository`1">
            <summary>
            Base class for generic repositories.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Arc.Infrastructure.Data.BaseRepository`1.#ctor(Arc.Infrastructure.Data.IRepository{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Data.BaseRepository`1"/> class.
            </summary>
            <param name="repository">The repository.</param>
        </member>
        <member name="T:Arc.Infrastructure.Data.IRepository">
            <summary>
            Generic repository.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Data.IRepository.GetEntityById``1(System.Object)">
            <summary>
            Gets the entity by identity.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="identity">The identity.</param>
            <returns>Entity which matches to specified identity.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.IRepository.GetEntityBy``1(Arc.Domain.Specifications.ISpecification{``0})">
            <summary>
            Gets the entity by specification.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="specification">The specification.</param>
            <returns>Entity which match to specification.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.IRepository.GetAllEntities``1">
            <summary>
            Gets all entities.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <returns>List of all entities of specified type.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.IRepository.GetEntitiesBy``1(Arc.Domain.Specifications.ISpecification{``0})">
            <summary>
            Gets the entities by specification.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="specification">The specification.</param>
            <returns>List of entities which match to specification.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.IRepository.Count``1(Arc.Domain.Specifications.ISpecification{``0})">
            <summary>
            Counts results of the specified specification.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="specification">The specification.</param>
            <returns>Count of results.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.IRepository.Save``1(``0)">
            <summary>
            Saves the specified entity.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="savable">The savable entity.</param>
            <returns>Saved entity.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.IRepository.Delete``1(``0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="deletable">The deletable entity.</param>
        </member>
        <member name="M:Arc.Infrastructure.Data.IRepository.Clear">
            <summary>
            Clears unit of work.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Data.IRepository.Evict(System.Object)">
            <summary>
            Evicts the specified evitable.
            </summary>
            <param name="evitable">The evitable.</param>
        </member>
        <member name="P:Arc.Infrastructure.Data.IRepository.UnitOfWork">
            <summary>
            Gets the unit of work.
            </summary>
            <value>The unit of work.</value>
        </member>
        <member name="T:Arc.Infrastructure.Data.IRepository`1">
            <summary>
            Repository for concrete type of entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Arc.Infrastructure.Data.IRepository`1.GetEntityById(System.Object)">
            <summary>
            Gets the entity by identity.
            </summary>
            <param name="identity">The identity.</param>
            <returns>Entity which matches to specified identity.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.IRepository`1.GetAllEntities">
            <summary>
            Gets all entities.
            </summary>
            <returns>List of all entities.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.IRepository`1.Save(`0)">
            <summary>
            Saves the specified entity.
            </summary>
            <param name="savable">The savable entity.</param>
            <returns>Saved entity.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.IRepository`1.Delete(`0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="deletable">The deletable entity.</param>
        </member>
        <member name="T:Arc.Infrastructure.Data.ITransaction">
            <summary>
            Transaction.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Data.ITransaction.Commit">
            <summary>
            Commits this transaction.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Data.ITransaction.Rollback">
            <summary>
            Rollbacks this transaction.
            </summary>
        </member>
        <member name="P:Arc.Infrastructure.Data.ITransaction.IsActive">
            <summary>
            Gets a value indicating whether this transaction is active.
            </summary>
            <value><c>true</c> if this transaction is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Arc.Infrastructure.Data.IUnitOfWork">
            <summary>
            Unit of work.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Data.IUnitOfWork.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
            <returns>Transaction.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.IUnitOfWork.TransactionalFlush">
            <summary>
            Flushes changes in transaction.
            </summary>
        </member>
        <member name="P:Arc.Infrastructure.Data.IUnitOfWork.Session">
            <summary>
            Gets the NHibernate session.
            </summary>
            <value>The NHibernate session.</value>
        </member>
        <member name="P:Arc.Infrastructure.Data.IUnitOfWork.IsInTransaction">
            <summary>
            Gets a value indicating whether this instance is in transaction.
            </summary>
            <value>
            	<c>true</c> if this instance is in transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Arc.Infrastructure.Data.IUnitOfWorkFactory">
            <summary>
            Factory for unit of work.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Data.IUnitOfWorkFactory.Create">
            <summary>
            Creates new unit of work.
            </summary>
            <returns>Unit of work.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.IUnitOfWorkFactory.Release(Arc.Infrastructure.Data.IUnitOfWork)">
            <summary>
            Releases the specified unit of work.
            </summary>
            <param name="releasable">The releasable unit of work.</param>
        </member>
        <member name="P:Arc.Infrastructure.Data.IUnitOfWorkFactory.IsUnitOfWorkOpen">
            <summary>
            Gets a value indicating whether current unit of work is open.
            </summary>
            <value>
            	<c>true</c> if current unit of work is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Arc.Infrastructure.Utilities.Expressions.MemberFinder">
            <summary>
            Finds member path from expression.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Utilities.Expressions.MemberFinder.FindFromExpression(System.Linq.Expressions.Expression)">
            <summary>
            Finds member path from expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>Member path.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Utilities.Expressions.MemberFinder.BuildMemberName(System.Linq.Expressions.MemberExpression)">
            <summary>
            Builds the name of the member.
            </summary>
            <param name="memberExpression">The member expression.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Utilities.Expressions.MemberFinder.FindMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            Finds the member expression from expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Utilities.Expressions.MemberFinder.IsPropertyExpression(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is property expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>
            	<c>true</c> if the specified expression is property expression; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Arc.Infrastructure.Utilities.Expressions.ValueFinder">
            <summary>
            Finds value from expression.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Utilities.Expressions.ValueFinder.FindFromExpression(System.Linq.Expressions.Expression)">
            <summary>
            Finds value from expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>Value from expression.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Utilities.Expressions.ValueFinder.IsValueExpression(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether expression has value.
            </summary>
            <param name="expression">The expression.</param>
            <returns>
            	<c>true</c> if expression has value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Arc.Infrastructure.Data.ObjectMapperExtensions">
            <summary>
            Object mapper extensions.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Data.ObjectMapperExtensions.MapTo``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Maps source type to destination type.
            <remarks>
            For using it, you should configure AutoMapper.
            </remarks>
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.ObjectMapperExtensions.As``1(System.Collections.IEnumerable)">
            <summary>
            Maps source type to destination type.
            <remarks>
            For using it, you should configure AutoMapper.
            </remarks>
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.ObjectMapperExtensions.MapTo``2(``0)">
            <summary>
            Maps source type to destination type.
            <remarks>
            For using it, you should configure AutoMapper.
            </remarks>
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.ObjectMapperExtensions.MapTo``2(``0,``1)">
            <summary>
            Maps source type to destination type.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.ObjectMapperExtensions.As``1(System.Object)">
            <summary>
            Maps source type to destination type.
            <remarks>
            For using it, you should configure AutoMapper.
            </remarks>
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Data.ObjectMapperExtensions.As``1(System.Object,``0)">
            <summary>
            Maps source type to destination type.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns></returns>
        </member>
        <member name="T:Arc.Infrastructure.Data.UnitOfWorkWebModule">
            <summary>
            Web module for releasing unit of work at the end of request.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Data.UnitOfWorkWebModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:Arc.Infrastructure.Data.UnitOfWorkWebModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.Registration.Auto.BaseRegisterTypeStrategy">
            <summary>
            Register type strategy base.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.BaseRegisterTypeStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Dependencies.Registration.Auto.BaseRegisterTypeStrategy"/> class.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.BaseRegisterTypeStrategy.Register(System.Type,System.Type,Arc.Infrastructure.Dependencies.IServiceLocator)">
            <summary>
            Registers the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="implementation">The implementation.</param>
            <param name="locator">The locator.</param>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.Registration.Auto.BaseRegisterTypeStrategy.Scope">
            <summary>
            Gets or sets the scope.
            </summary>
            <value>The scope.</value>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.Registration.Auto.IBindingSyntax">
            <summary>
            Binding syntax.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.IBindingSyntax.BindToSelf">
            <summary>
            Binds to self.
            </summary>
            <returns>ServiceLocator.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.IBindingSyntax.BindToFirstInterface">
            <summary>
            Binds to first interface.
            </summary>
            <returns>ServiceLocator.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.IBindingSyntax.BindToInterface(System.Func{System.Type,System.Boolean})">
            <summary>
            Binds to the specified criteria.
            </summary>
            <param name="criteria">The criteria. (interface)</param>
            <returns>ServiceLocator.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.IBindingSyntax.BindToInterface(System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Binds to the specified criteria.
            </summary>
            <param name="criteria">The criteria. (interface, realType)</param>
            <returns></returns>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.Registration.Auto.IPickingSyntax">
            <summary>
            Picking syntax.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.IPickingSyntax.Pick(System.Func{System.Type,System.Boolean})">
            <summary>
            Picks types by the specified criteria.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>Binding syntax.</returns>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.Registration.Auto.IPickingSyntax.AllConcreteTypes">
            <summary>
            Picks all concrete types.
            </summary>
            <value>Binding syntax.</value>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.IParameters">
            <summary>
            Parameters for service locator.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.IParameters.ConstructorArgument(System.String,System.Object)">
            <summary>
            Adds constructor argument.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>Parameters collecteion.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.IParameters.GetArguments">
            <summary>
            Gets the arguments as IDictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.IParameters.Arguments">
            <summary>
            Gets the arguments as <c>IDictionary&lt;string, object&gt;</c>.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.IServiceLocator">
            <summary>
            Finds requested services.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.IServiceLocator.Resolve``1">
            <summary>
            Resolves requested service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>Requested service.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.IServiceLocator.Resolve(System.Type)">
            <summary>
            Resolves requested service.
            </summary>
            <param name="type">The service type.</param>
            <returns>Requested service.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.IServiceLocator.Resolve``1(Arc.Infrastructure.Dependencies.IParameters)">
            <summary>
            Resolves service with the specified parameters.
            <code>
            serviceLocator.Resolve&lt;IService&gt;(With.Parameters.ConstructorArgument("name", value));
            </code>
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.IServiceLocator.Resolve(System.Type,Arc.Infrastructure.Dependencies.IParameters)">
            <summary>
            Resolves service with specified parameters.
            </summary>
            <param name="service">The service.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.IServiceLocator.Release(System.Object)">
            <summary>
            Releases the specified object.
            </summary>
            <param name="releasable">The releasable object.</param>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.IServiceLocator.Load(System.String)">
            <summary>
            Loads the specified module by name.
            It should load module for concrete implementation of service locator.
            </summary>
            <param name="moduleName">Name of the module.</param>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.IServiceLocator.Load(System.String[])">
            <summary>
            Loads the specified service locator modules by name.
            It should load module for concrete implementation of service locator.
            </summary>
            <param name="moduleNames">The module names.</param>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.IServiceLocator.Load(Arc.Infrastructure.Configuration.IConfiguration{Arc.Infrastructure.Dependencies.IServiceLocator})">
            <summary>
            Loads the specified configuration.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.IServiceLocator.Register(Arc.Infrastructure.Dependencies.Registration.IRegistration[])">
            <summary>
            Registers the specified bindings.
            </summary>
            <param name="registrations">The registrations.</param>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.Registration.Auto.AutoRegistration">
            <summary>
            Auto registration.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.AutoRegistration.For(System.Reflection.Assembly[])">
            <summary>
            ServiceLocator for the specified assemblies.
            </summary>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.AutoRegistration.For(System.String[])">
            <summary>
            ServiceLocator for the specified assembly names.
            </summary>
            <param name="assemblyNames">The assembly names.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.AutoRegistration.Pick(System.Func{System.Type,System.Boolean})">
            <summary>
            Picks types by the specified criteria.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>Binding syntax.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.AutoRegistration.BindToInterface(System.Func{System.Type,System.Boolean})">
            <summary>
            Binds to the specified criteria.
            </summary>
            <param name="criteria">The criteria. (interface)</param>
            <returns>ServiceLocator.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.AutoRegistration.BindToInterface(System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Binds to the specified criteria.
            </summary>
            <param name="criteria">The criteria. (interface, realType)</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.AutoRegistration.BindToSelf">
            <summary>
            Binds to self.
            </summary>
            <returns>ServiceLocator.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.AutoRegistration.BindToFirstInterface">
            <summary>
            Binds to first interface.
            </summary>
            <returns>ServiceLocator.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.AutoRegistration.Using(Arc.Infrastructure.Dependencies.Registration.ServiceLifeStyle)">
            <summary>
            Registers with the specified life style.
            </summary>
            <param name="lifeStyle">The life style.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.AutoRegistration.Load(Arc.Infrastructure.Dependencies.IServiceLocator)">
            <summary>
            Loads configuration to service locator.
            </summary>
            <param name="handler">The service locator.</param>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.Registration.Auto.AutoRegistration.AllConcreteTypes">
            <summary>
            Picks all concrete types.
            </summary>
            <value>Binding syntax.</value>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.Registration.Auto.ITypeRegistrationStrategy">
            <summary>
            Strategy for type registration.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.ITypeRegistrationStrategy.Register(System.Type,Arc.Infrastructure.Dependencies.IServiceLocator)">
            <summary>
            Registers the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="locator">The locator.</param>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.Registration.Auto.ITypeRegistrationStrategy.Scope">
            <summary>
            Gets or sets the scope.
            </summary>
            <value>The scope.</value>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.Registration.Auto.RegisterTypeToFirstMatchStrategy">
            <summary>
            Registers to first criteria match (interface).
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.RegisterTypeToFirstMatchStrategy.#ctor(System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Dependencies.Registration.Auto.RegisterTypeToFirstMatchStrategy"/> class.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.RegisterTypeToFirstMatchStrategy.#ctor(System.Func{System.Type,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Dependencies.Registration.Auto.RegisterTypeToFirstMatchStrategy"/> class.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.RegisterTypeToFirstMatchStrategy.Register(System.Type,Arc.Infrastructure.Dependencies.IServiceLocator)">
            <summary>
            Registers the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="locator">The locator.</param>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.Registration.Auto.RegisterTypeToSelfStrategy">
            <summary>
            Registers to self strategy.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Registration.Auto.RegisterTypeToSelfStrategy.Register(System.Type,Arc.Infrastructure.Dependencies.IServiceLocator)">
            <summary>
            Registers the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="locator">The locator.</param>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.Parameters">
            <summary>
            Parameters for service locator.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Parameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Dependencies.Parameters"/> class.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Parameters.GetArguments">
            <summary>
            Gets the arguments as IDictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.Parameters.ConstructorArgument(System.String,System.Object)">
            <summary>
            Adds constructor argument.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>Parameters collecteion.</returns>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.Parameters.Arguments">
            <summary>
            Gets the arguments as <c>IDictionary&lt;string, object&gt;</c>.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.ServiceLocator">
            <summary>
            Locates services by type. 
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.ServiceLocator.Load(System.String)">
            <summary>
            Loads the specified module by name.
            </summary>
            <param name="moduleName">Name of the module.</param>
            <exception cref="T:System.ArgumentException">moduleName</exception>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.ServiceLocator.Load(System.String[])">
            <summary>
            Loads the specified modules by name.
            </summary>
            <param name="moduleNames">The module names.</param>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.ServiceLocator.Load(Arc.Infrastructure.Configuration.IConfiguration{Arc.Infrastructure.Dependencies.IServiceLocator})">
            <summary>
            Loads the specified configuration.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.ServiceLocator.Register(Arc.Infrastructure.Dependencies.Registration.IRegistration[])">
            <summary>
            Registers the specified bindings.
            </summary>
            <param name="registrations">The registrations.</param>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.ServiceLocator.Resolve``1">
            <summary>
            Resolves requested service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>Requested service.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.ServiceLocator.Resolve(System.Type)">
            <summary>
            Resolves requested service.
            </summary>
            <param name="type">The service type.</param>
            <returns>Requested service.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.ServiceLocator.Resolve``1(Arc.Infrastructure.Dependencies.IParameters)">
            <summary>
            Resolves service with the specified parameters.
            <code>
            serviceLocator.Resolve&lt;IService&gt;(With.Parameters.ConstructorArgument("name", value));
            </code>
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.ServiceLocator.Resolve(System.Type,Arc.Infrastructure.Dependencies.IParameters)">
            <summary>
            Resolves service with specified parameters.
            </summary>
            <param name="service">The service.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Arc.Infrastructure.Dependencies.ServiceLocator.Release(System.Object)">
            <summary>
            Releases the specified object.
            </summary>
            <param name="releasable">The releasable object.</param>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.ServiceLocator.InnerServiceLocator">
            <summary>
            Gets or sets the inner service locator.
            </summary>
            <value>The inner service locator.</value>
        </member>
        <member name="T:Arc.Infrastructure.Dependencies.With">
            <summary>
            DSL for adding parameters to service locator resolving method.
            </summary>
        </member>
        <member name="P:Arc.Infrastructure.Dependencies.With.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:Arc.Infrastructure.Logging.ILogger">
            <summary>
            Service for logging.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Logging.ILogger.Debug(System.String)">
            <summary>
            Registers debug message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.ILogger.Debug(System.String,System.Exception)">
            <summary>
            Registers debug message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.ILogger.Information(System.String)">
            <summary>
            Registers information message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.ILogger.Information(System.String,System.Exception)">
            <summary>
            Registers information message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.ILogger.Warning(System.String)">
            <summary>
            Registers warning message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.ILogger.Warning(System.String,System.Exception)">
            <summary>
            Registers warning message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.ILogger.Error(System.String)">
            <summary>
            Registers error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.ILogger.Error(System.String,System.Exception)">
            <summary>
            Registers error message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.ILogger.Fatal(System.String)">
            <summary>
            Registers fatal message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.ILogger.Fatal(System.String,System.Exception)">
            <summary>
            Registers fatal message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Arc.Infrastructure.Logging.NullLogger">
            <summary>
            Null logger.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Logging.NullLogger.Debug(System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.NullLogger.Debug(System.String,System.Exception)">
            <summary>
            Does nothing.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.NullLogger.Information(System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.NullLogger.Information(System.String,System.Exception)">
            <summary>
            Does nothing.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.NullLogger.Warning(System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.NullLogger.Warning(System.String,System.Exception)">
            <summary>
            Does nothing.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.NullLogger.Error(System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.NullLogger.Error(System.String,System.Exception)">
            <summary>
            Does nothing.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.NullLogger.Fatal(System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Arc.Infrastructure.Logging.NullLogger.Fatal(System.String,System.Exception)">
            <summary>
            Does nothing.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Arc.Infrastructure.Registry.LocalRegistry">
            <summary>
            Local registry.
            </summary>
        </member>
        <member name="P:Arc.Infrastructure.Registry.LocalRegistry.Map">
            <summary>
            Gets the map where items are stored.
            </summary>
            <value>The map.</value>
        </member>
        <member name="T:Arc.Infrastructure.Registry.WebRequestRegistry">
            <summary>
            Web request registry.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Registry.WebRequestRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Registry.WebRequestRegistry"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.HttpContext"/> is not currently available.</exception>
        </member>
        <member name="P:Arc.Infrastructure.Registry.WebRequestRegistry.Map">
            <summary>
            Gets the map where items are stored.
            </summary>
            <value>The map.</value>
        </member>
        <member name="T:Arc.Infrastructure.Registry.WebSessionRegistry">
            <summary>
            Web session registry.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Registry.WebSessionRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Registry.WebSessionRegistry"/> class.
            </summary>
        </member>
        <member name="P:Arc.Infrastructure.Registry.WebSessionRegistry.Map">
            <summary>
            Gets the map where items are stored.
            </summary>
            <value>The map.</value>
        </member>
        <member name="T:Arc.Infrastructure.Validation.EmptyValidationResults">
            <summary>
            Empty validation results.
            </summary>
        </member>
        <member name="T:Arc.Infrastructure.Validation.IValidationResults">
            <summary>
            Validation results.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Validation.IValidationResults.GetFirstMessageFor(System.String)">
            <summary>
            Gets the first message for given tag.
            </summary>
            <param name="tag">The key.</param>
            <returns>First message for given tag or empty string.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Validation.IValidationResults.GetMessagesFor(System.String)">
            <summary>
            Gets the messages for given tag.
            </summary>
            <param name="tag">The key.</param>
            <returns>All messages for given tag or empty array.</returns>
        </member>
        <member name="P:Arc.Infrastructure.Validation.IValidationResults.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Arc.Infrastructure.Validation.IValidationResults.Summary">
            <summary>
            Gets the summary.
            </summary>
            <value>The summary.</value>
        </member>
        <member name="P:Arc.Infrastructure.Validation.IValidationResults.AllErrors">
            <summary>
            Gets all errors.
            </summary>
            <value>All errors.</value>
        </member>
        <member name="M:Arc.Infrastructure.Validation.EmptyValidationResults.GetFirstMessageFor(System.String)">
            <summary>
            Gets the first message for given tag.
            </summary>
            <param name="tag">The key.</param>
            <returns>
            Empty string.
            </returns>
        </member>
        <member name="M:Arc.Infrastructure.Validation.EmptyValidationResults.GetMessagesFor(System.String)">
            <summary>
            Gets the messages for given tag.
            </summary>
            <param name="tag">The key.</param>
            <returns>
            Empty array.
            </returns>
        </member>
        <member name="P:Arc.Infrastructure.Validation.EmptyValidationResults.IsValid">
            <summary>
            This is always valid.
            </summary>
        </member>
        <member name="P:Arc.Infrastructure.Validation.EmptyValidationResults.Summary">
            <summary>
            Gets the summary.
            </summary>
            <value>Empty string.</value>
        </member>
        <member name="P:Arc.Infrastructure.Validation.EmptyValidationResults.AllErrors">
            <summary>
            Gets all errors.
            </summary>
            <value>All errors.</value>
        </member>
        <member name="T:Arc.Infrastructure.Validation.IValidationService">
            <summary>
            Validation service.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Validation.IValidationService.Validate(System.Object)">
            <summary>
            Validates the specified validatable.
            </summary>
            <param name="validatable">The validatable.</param>
            <returns>Validation results.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Validation.IValidationService.Validate``1(System.Object)">
            <summary>
            Validates the specified validatable.
            </summary>
            <typeparam name="T">Validatable type.</typeparam>
            <param name="validatable">The validatable.</param>
            <returns>Validation results.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Validation.IValidationService.Validate(System.Object,System.Type)">
            <summary>
            Validates the specified validatable.
            </summary>
            <param name="validatable">The validatable.</param>
            <param name="validationType">Type of the validation.</param>
            <returns>Validation results.</returns>
        </member>
        <member name="T:Arc.Infrastructure.Validation.IValidator`1">
            <summary>
            Validator for entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Arc.Infrastructure.Validation.IValidator.Validate(System.Object)">
            <summary>
            Validates the specified validatable.
            </summary>
            <param name="validatable">The validatable.</param>
            <returns>Validation results.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Validation.IValidator`1.Validate(`0)">
            <summary>
            Validates the specified entity.
            </summary>
            <param name="validatable">The validatable.</param>
            <returns>Validation results.</returns>
        </member>
        <member name="T:Arc.Infrastructure.Validation.NullValidationService">
            <summary>
            Null validation service.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Validation.NullValidationService.Validate(System.Object)">
            <summary>
            Validates the specified validatable.
            </summary>
            <param name="validatable">The validatable.</param>
            <returns>Empty validation results.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Validation.NullValidationService.Validate``1(System.Object)">
            <summary>
            Validates the specified validatable.
            </summary>
            <typeparam name="T">Validatable type.</typeparam>
            <param name="validatable">The validatable.</param>
            <returns>Empty validation results.</returns>
        </member>
        <member name="M:Arc.Infrastructure.Validation.NullValidationService.Validate(System.Object,System.Type)">
            <summary>
            Validates the specified validatable.
            </summary>
            <param name="validatable">The validatable.</param>
            <param name="validationType">Type of the validation.</param>
            <returns>Empty validation results.</returns>
        </member>
        <member name="T:Arc.Infrastructure.Validation.ValidationException">
            <summary>
            Validation exception.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Validation.ValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Validation.ValidationException"/> class.
            </summary>
        </member>
        <member name="M:Arc.Infrastructure.Validation.ValidationException.#ctor(Arc.Infrastructure.Validation.IValidationResults)">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Validation.ValidationException"/> class.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:Arc.Infrastructure.Validation.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Validation.ValidationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:Arc.Infrastructure.Validation.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Validation.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Arc.Infrastructure.Validation.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arc.Infrastructure.Validation.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Arc.Infrastructure.Validation.ValidationException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="P:Arc.Infrastructure.Validation.ValidationException.Results">
            <summary>
            Gets the validation results.
            </summary>
            <value>The validation results.</value>
        </member>
    </members>
</doc>
